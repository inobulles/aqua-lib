
// this file is automatically generated by 'c/ogl/gl/gen.py' from the Khronos Group OpenGL Registry
// if you need to update this (you probably won't ever), delete 'gl.xml' and run 'gen.py'

#if !defined(__AQUA_LIB__OGL_GL_GL)
#define __AQUA_LIB__OGL_GL_GL

#include "khrplatform.h"
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid; // Not an actual GL type, though used in headers in the past
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef khronos_int32_t GLclampx;
typedef int GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_int32_t GLfixed;
typedef khronos_intptr_t GLintptr;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_ssize_t GLsizeiptrARB;
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context; // compatible with OpenCL cl_context
struct _cl_event; // compatible with OpenCL cl_event
typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void ( *GLVULKANPROCNV)(void);
typedef enum {
	GL_CURRENT_BIT = 0x00000001,
	GL_POINT_BIT = 0x00000002,
	GL_LINE_BIT = 0x00000004,
	GL_POLYGON_BIT = 0x00000008,
	GL_POLYGON_STIPPLE_BIT = 0x00000010,
	GL_PIXEL_MODE_BIT = 0x00000020,
	GL_LIGHTING_BIT = 0x00000040,
	GL_FOG_BIT = 0x00000080,
	GL_DEPTH_BUFFER_BIT = 0x00000100,
	GL_ACCUM_BUFFER_BIT = 0x00000200,
	GL_STENCIL_BUFFER_BIT = 0x00000400,
	GL_VIEWPORT_BIT = 0x00000800,
	GL_TRANSFORM_BIT = 0x00001000,
	GL_ENABLE_BIT = 0x00002000,
	GL_COLOR_BUFFER_BIT = 0x00004000,
	GL_HINT_BIT = 0x00008000,
	GL_EVAL_BIT = 0x00010000,
	GL_LIST_BIT = 0x00020000,
	GL_TEXTURE_BIT = 0x00040000,
	GL_SCISSOR_BIT = 0x00080000,
	GL_MULTISAMPLE_BIT = 0x20000000,
	GL_MULTISAMPLE_BIT_ARB = 0x20000000,
	GL_MULTISAMPLE_BIT_EXT = 0x20000000,
	GL_MULTISAMPLE_BIT_3DFX = 0x20000000,
	GL_ALL_ATTRIB_BITS = 0xFFFFFFFF, // Guaranteed to mark all attribute groups at once
} GL_AttribMask_t;
typedef enum {
	GL_DYNAMIC_STORAGE_BIT = 0x0100,
	GL_DYNAMIC_STORAGE_BIT_EXT = 0x0100,
	GL_CLIENT_STORAGE_BIT = 0x0200,
	GL_CLIENT_STORAGE_BIT_EXT = 0x0200,
	GL_SPARSE_STORAGE_BIT_ARB = 0x0400,
	GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 0x0800,
	GL_PER_GPU_STORAGE_BIT_NV = 0x0800,
	GL_EXTERNAL_STORAGE_BIT_NVX = 0x2000,
} GL_BufferStorageMask_t; // GL_MAP_{COHERENT,PERSISTENT,READ,WRITE}_{BIT,BIT_EXT} also lie in this namespace
typedef enum {
	GL_COVERAGE_BUFFER_BIT_NV = 0x00008000, // Collides with AttribMask bit GL_HINT_BIT. OK since this token is for OpenGL ES 2, which doesn't have attribute groups.
} GL_ClearBufferMask_t; // GL_{DEPTH,ACCUM,STENCIL,COLOR}_BUFFER_BIT also lie in this namespace
typedef enum {
	GL_CLIENT_PIXEL_STORE_BIT = 0x00000001,
	GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002,
	GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF,
} GL_ClientAttribMask_t;
typedef enum {
	GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001,
	GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002,
	GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002,
	GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004,
	GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004,
	GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008,
	GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008,
	GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 0x00000010,
} GL_ContextFlagMask_t; // Should be shared with WGL/GLX, but aren't since the FORWARD_COMPATIBLE and DEBUG values are swapped vs. WGL/GLX.
typedef enum {
	GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001,
	GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002,
} GL_ContextProfileMask_t;
typedef enum {
	GL_MAP_READ_BIT = 0x0001,
	GL_MAP_READ_BIT_EXT = 0x0001,
	GL_MAP_WRITE_BIT = 0x0002,
	GL_MAP_WRITE_BIT_EXT = 0x0002,
	GL_MAP_INVALIDATE_RANGE_BIT = 0x0004,
	GL_MAP_INVALIDATE_RANGE_BIT_EXT = 0x0004,
	GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008,
	GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 0x0008,
	GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010,
	GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 0x0010,
	GL_MAP_UNSYNCHRONIZED_BIT = 0x0020,
	GL_MAP_UNSYNCHRONIZED_BIT_EXT = 0x0020,
	GL_MAP_PERSISTENT_BIT = 0x0040,
	GL_MAP_PERSISTENT_BIT_EXT = 0x0040,
	GL_MAP_COHERENT_BIT = 0x0080,
	GL_MAP_COHERENT_BIT_EXT = 0x0080,
} GL_MapBufferAccessMask_t;
typedef enum {
	GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001,
	GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001,
	GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002,
	GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002,
	GL_UNIFORM_BARRIER_BIT = 0x00000004,
	GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004,
	GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008,
	GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008,
	GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010,
	GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020,
	GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020,
	GL_COMMAND_BARRIER_BIT = 0x00000040,
	GL_COMMAND_BARRIER_BIT_EXT = 0x00000040,
	GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080,
	GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080,
	GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100,
	GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100,
	GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200,
	GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200,
	GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400,
	GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400,
	GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800,
	GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800,
	GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000,
	GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000,
	GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000,
	GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000,
	GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 0x00004000,
	GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000,
	GL_ALL_BARRIER_BITS = 0xFFFFFFFF,
	GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF,
} GL_MemoryBarrierMask_t;
typedef enum {
	GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001,
	GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002,
	GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004,
	GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008,
	GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF,
} GL_OcclusionQueryEventMaskAMD_t;
typedef enum {
	GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001,
	GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001,
} GL_SyncObjectMask_t;
typedef enum {
	GL_VERTEX_SHADER_BIT = 0x00000001,
	GL_VERTEX_SHADER_BIT_EXT = 0x00000001,
	GL_FRAGMENT_SHADER_BIT = 0x00000002,
	GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002,
	GL_GEOMETRY_SHADER_BIT = 0x00000004,
	GL_GEOMETRY_SHADER_BIT_EXT = 0x00000004,
	GL_GEOMETRY_SHADER_BIT_OES = 0x00000004,
	GL_TESS_CONTROL_SHADER_BIT = 0x00000008,
	GL_TESS_CONTROL_SHADER_BIT_EXT = 0x00000008,
	GL_TESS_CONTROL_SHADER_BIT_OES = 0x00000008,
	GL_TESS_EVALUATION_SHADER_BIT = 0x00000010,
	GL_TESS_EVALUATION_SHADER_BIT_EXT = 0x00000010,
	GL_TESS_EVALUATION_SHADER_BIT_OES = 0x00000010,
	GL_COMPUTE_SHADER_BIT = 0x00000020,
	GL_MESH_SHADER_BIT_NV = 0x00000040,
	GL_TASK_SHADER_BIT_NV = 0x00000080,
	GL_ALL_SHADER_BITS = 0xFFFFFFFF,
	GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF,
} GL_UseProgramStageMask_t;
typedef enum {
	GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = 0x00000001,
	GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = 0x00000002,
	GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 0x00000004,
	GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = 0x00000008,
	GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 0x00000010,
	GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 0x00000020,
	GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 0x00000040,
	GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = 0x00000080,
	GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100,
} GL_SubgroupSupportedFeatures_t;
typedef enum {
	GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001,
} GL_TextureStorageMaskAMD_t;
typedef enum {
	GL_RED_BIT_ATI = 0x00000001,
	GL_GREEN_BIT_ATI = 0x00000002,
	GL_BLUE_BIT_ATI = 0x00000004,
} GL_FragmentShaderDestMaskATI_t;
typedef enum {
	GL_2X_BIT_ATI = 0x00000001,
	GL_4X_BIT_ATI = 0x00000002,
	GL_8X_BIT_ATI = 0x00000004,
	GL_HALF_BIT_ATI = 0x00000008,
	GL_QUARTER_BIT_ATI = 0x00000010,
	GL_EIGHTH_BIT_ATI = 0x00000020,
	GL_SATURATE_BIT_ATI = 0x00000040,
} GL_FragmentShaderDestModMaskATI_t;
typedef enum {
	GL_COMP_BIT_ATI = 0x00000002,
	GL_NEGATE_BIT_ATI = 0x00000004,
	GL_BIAS_BIT_ATI = 0x00000008,
} GL_FragmentShaderColorModMaskATI_t;
typedef enum {
	GL_TRACE_OPERATIONS_BIT_MESA = 0x0001,
	GL_TRACE_PRIMITIVES_BIT_MESA = 0x0002,
	GL_TRACE_ARRAYS_BIT_MESA = 0x0004,
	GL_TRACE_TEXTURES_BIT_MESA = 0x0008,
	GL_TRACE_PIXELS_BIT_MESA = 0x0010,
	GL_TRACE_ERRORS_BIT_MESA = 0x0020,
	GL_TRACE_ALL_BITS_MESA = 0xFFFF,
} GL_TraceMaskMESA_t;
typedef enum {
	GL_BOLD_BIT_NV = 0x01,
	GL_ITALIC_BIT_NV = 0x02,
	GL_GLYPH_WIDTH_BIT_NV = 0x01,
	GL_GLYPH_HEIGHT_BIT_NV = 0x02,
	GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04,
	GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08,
	GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10,
	GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20,
	GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40,
	GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80,
	GL_GLYPH_HAS_KERNING_BIT_NV = 0x100,
	GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000,
	GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000,
	GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000,
	GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000,
	GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000,
	GL_FONT_ASCENDER_BIT_NV = 0x00200000,
	GL_FONT_DESCENDER_BIT_NV = 0x00400000,
	GL_FONT_HEIGHT_BIT_NV = 0x00800000,
	GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000,
	GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000,
	GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000,
	GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000,
	GL_FONT_HAS_KERNING_BIT_NV = 0x10000000,
	GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000,
} GL_PathRenderingMaskNV_t;
typedef enum {
	GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000,
	GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001,
} GL_PerformanceQueryCapsMaskINTEL_t;
typedef enum {
	GL_VERTEX23_BIT_PGI = 0x00000004,
	GL_VERTEX4_BIT_PGI = 0x00000008,
	GL_COLOR3_BIT_PGI = 0x00010000,
	GL_COLOR4_BIT_PGI = 0x00020000,
	GL_EDGEFLAG_BIT_PGI = 0x00040000,
	GL_INDEX_BIT_PGI = 0x00080000,
	GL_MAT_AMBIENT_BIT_PGI = 0x00100000,
	GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000,
	GL_MAT_DIFFUSE_BIT_PGI = 0x00400000,
	GL_MAT_EMISSION_BIT_PGI = 0x00800000,
	GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000,
	GL_MAT_SHININESS_BIT_PGI = 0x02000000,
	GL_MAT_SPECULAR_BIT_PGI = 0x04000000,
	GL_NORMAL_BIT_PGI = 0x08000000,
	GL_TEXCOORD1_BIT_PGI = 0x10000000,
	GL_TEXCOORD2_BIT_PGI = 0x20000000,
	GL_TEXCOORD3_BIT_PGI = 0x40000000,
	GL_TEXCOORD4_BIT_PGI = 0x80000000,
} GL_VertexHintsMaskPGI_t;
typedef enum {
	GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001,
	GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002,
	GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004,
	GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008,
	GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010,
	GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020,
	GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040,
	GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080,
	GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100,
	GL_DEPTH_BUFFER_BIT1_QCOM = 0x00000200,
	GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400,
	GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800,
	GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000,
	GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000,
	GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000,
	GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000,
	GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000,
	GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000,
	GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000,
	GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000,
	GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000,
	GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000,
	GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000,
	GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000,
	GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000,
	GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000,
	GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000,
	GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000,
	GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000,
	GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000,
	GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000,
	GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000,
} GL_BufferBitQCOM_t;
typedef enum {
	GL_FOVEATION_ENABLE_BIT_QCOM = 0x00000001,
	GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 0x00000002,
	GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = 0x00000004,
} GL_FoveationConfigBitQCOM_t;
typedef enum {
	GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001,
	GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002,
} GL_FfdMaskSGIX_t;
typedef enum {
	GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000,
	GL_NOP_COMMAND_NV = 0x0001,
	GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002,
	GL_DRAW_ARRAYS_COMMAND_NV = 0x0003,
	GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004,
	GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005,
	GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006,
	GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007,
	GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008,
	GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009,
	GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A,
	GL_BLEND_COLOR_COMMAND_NV = 0x000B,
	GL_STENCIL_REF_COMMAND_NV = 0x000C,
	GL_LINE_WIDTH_COMMAND_NV = 0x000D,
	GL_POLYGON_OFFSET_COMMAND_NV = 0x000E,
	GL_ALPHA_REF_COMMAND_NV = 0x000F,
	GL_VIEWPORT_COMMAND_NV = 0x0010,
	GL_SCISSOR_COMMAND_NV = 0x0011,
	GL_FRONT_FACE_COMMAND_NV = 0x0012,
} GL_CommandOpcodesNV_t; // For NV_command_list.
typedef enum {
	GL_LAYOUT_DEFAULT_INTEL = 0,
	GL_LAYOUT_LINEAR_INTEL = 1,
	GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2,
} GL_MapTextureFormatINTEL_t; // Texture memory layouts for INTEL_map_texture
typedef enum {
	GL_CLOSE_PATH_NV = 0x00,
	GL_MOVE_TO_NV = 0x02,
	GL_RELATIVE_MOVE_TO_NV = 0x03,
	GL_LINE_TO_NV = 0x04,
	GL_RELATIVE_LINE_TO_NV = 0x05,
	GL_HORIZONTAL_LINE_TO_NV = 0x06,
	GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07,
	GL_VERTICAL_LINE_TO_NV = 0x08,
	GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09,
	GL_QUADRATIC_CURVE_TO_NV = 0x0A,
	GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B,
	GL_CUBIC_CURVE_TO_NV = 0x0C,
	GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D,
	GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E,
	GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F,
	GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10,
	GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11,
	GL_SMALL_CCW_ARC_TO_NV = 0x12,
	GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13,
	GL_SMALL_CW_ARC_TO_NV = 0x14,
	GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15,
	GL_LARGE_CCW_ARC_TO_NV = 0x16,
	GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17,
	GL_LARGE_CW_ARC_TO_NV = 0x18,
	GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19,
	GL_CONIC_CURVE_TO_NV = 0x1A,
	GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B,
	GL_SHARED_EDGE_NV = 0xC0,
	GL_ROUNDED_RECT_NV = 0xE8,
	GL_RELATIVE_ROUNDED_RECT_NV = 0xE9,
	GL_ROUNDED_RECT2_NV = 0xEA,
	GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB,
	GL_ROUNDED_RECT4_NV = 0xEC,
	GL_RELATIVE_ROUNDED_RECT4_NV = 0xED,
	GL_ROUNDED_RECT8_NV = 0xEE,
	GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF,
	GL_RESTART_PATH_NV = 0xF0,
	GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2,
	GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4,
	GL_RECT_NV = 0xF6,
	GL_RELATIVE_RECT_NV = 0xF7,
	GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8,
	GL_CIRCULAR_CW_ARC_TO_NV = 0xFA,
	GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC,
	GL_ARC_TO_NV = 0xFE,
	GL_RELATIVE_ARC_TO_NV = 0xFF,
} GL_PathRenderingTokenNV_t;
typedef enum {
	GL_NEXT_BUFFER_NV = -2,
	GL_SKIP_COMPONENTS4_NV = -3,
	GL_SKIP_COMPONENTS3_NV = -4,
	GL_SKIP_COMPONENTS2_NV = -5,
	GL_SKIP_COMPONENTS1_NV = -6,
} GL_TransformFeedbackTokenNV_t; // For NV_transform_feedback. No clue why small negative values are used
typedef enum {
	GL_RESTART_SUN = 0x0001,
	GL_REPLACE_MIDDLE_SUN = 0x0002,
	GL_REPLACE_OLDEST_SUN = 0x0003,
} GL_TriangleListSUN_t;
typedef enum {
	GL_FALSE = 0,
	GL_NO_ERROR = 0,
	GL_ZERO = 0,
	GL_NONE = 0,
	GL_NONE_OES = 0,
	GL_TRUE = 1,
	GL_ONE = 1,
	GL_INVALID_INDEX = 0xFFFFFFFF, // Tagged as uint
	GL_ALL_PIXELS_AMD = 0xFFFFFFFF,
	GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF, // Tagged as uint64
	GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF, // Tagged as uint64
	GL_VERSION_ES_CL_1_0 = 1, // Not an API enum. API definition macro for ES 1.0/1.1 headers
	GL_VERSION_ES_CM_1_1 = 1, // Not an API enum. API definition macro for ES 1.0/1.1 headers
	GL_VERSION_ES_CL_1_1 = 1, // Not an API enum. API definition macro for ES 1.0/1.1 headers
	GL_UUID_SIZE_EXT = 16,
	GL_LUID_SIZE_EXT = 8,
} GL_SpecialNumbers_t; // Tokens whose numeric value is intrinsically meaningful
typedef enum {
	GL_POINTS = 0x0000,
	GL_LINES = 0x0001,
	GL_LINE_LOOP = 0x0002,
	GL_LINE_STRIP = 0x0003,
	GL_TRIANGLES = 0x0004,
	GL_TRIANGLE_STRIP = 0x0005,
	GL_TRIANGLE_FAN = 0x0006,
	GL_QUADS = 0x0007,
	GL_QUADS_EXT = 0x0007,
	GL_QUADS_OES = 0x0007,
	GL_QUAD_STRIP = 0x0008,
	GL_POLYGON = 0x0009,
	GL_LINES_ADJACENCY = 0x000A,
	GL_LINES_ADJACENCY_ARB = 0x000A,
	GL_LINES_ADJACENCY_EXT = 0x000A,
	GL_LINES_ADJACENCY_OES = 0x000A,
	GL_LINE_STRIP_ADJACENCY = 0x000B,
	GL_LINE_STRIP_ADJACENCY_ARB = 0x000B,
	GL_LINE_STRIP_ADJACENCY_EXT = 0x000B,
	GL_LINE_STRIP_ADJACENCY_OES = 0x000B,
	GL_TRIANGLES_ADJACENCY = 0x000C,
	GL_TRIANGLES_ADJACENCY_ARB = 0x000C,
	GL_TRIANGLES_ADJACENCY_EXT = 0x000C,
	GL_TRIANGLES_ADJACENCY_OES = 0x000C,
	GL_TRIANGLE_STRIP_ADJACENCY = 0x000D,
	GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D,
	GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D,
	GL_TRIANGLE_STRIP_ADJACENCY_OES = 0x000D,
	GL_PATCHES = 0x000E,
	GL_PATCHES_EXT = 0x000E,
	GL_PATCHES_OES = 0x000E,
	GL_ACCUM = 0x0100,
	GL_LOAD = 0x0101,
	GL_RETURN = 0x0102,
	GL_MULT = 0x0103,
	GL_ADD = 0x0104,
	GL_NEVER = 0x0200,
	GL_LESS = 0x0201,
	GL_EQUAL = 0x0202,
	GL_LEQUAL = 0x0203,
	GL_GREATER = 0x0204,
	GL_NOTEQUAL = 0x0205,
	GL_GEQUAL = 0x0206,
	GL_ALWAYS = 0x0207,
	GL_SRC_COLOR = 0x0300,
	GL_ONE_MINUS_SRC_COLOR = 0x0301,
	GL_SRC_ALPHA = 0x0302,
	GL_ONE_MINUS_SRC_ALPHA = 0x0303,
	GL_DST_ALPHA = 0x0304,
	GL_ONE_MINUS_DST_ALPHA = 0x0305,
	GL_DST_COLOR = 0x0306,
	GL_ONE_MINUS_DST_COLOR = 0x0307,
	GL_SRC_ALPHA_SATURATE = 0x0308,
	GL_SRC_ALPHA_SATURATE_EXT = 0x0308,
	GL_FRONT_LEFT = 0x0400,
	GL_FRONT_RIGHT = 0x0401,
	GL_BACK_LEFT = 0x0402,
	GL_BACK_RIGHT = 0x0403,
	GL_FRONT = 0x0404,
	GL_BACK = 0x0405,
	GL_LEFT = 0x0406,
	GL_RIGHT = 0x0407,
	GL_FRONT_AND_BACK = 0x0408,
	GL_AUX0 = 0x0409,
	GL_AUX1 = 0x040A,
	GL_AUX2 = 0x040B,
	GL_AUX3 = 0x040C,
	GL_INVALID_ENUM = 0x0500,
	GL_INVALID_VALUE = 0x0501,
	GL_INVALID_OPERATION = 0x0502,
	GL_STACK_OVERFLOW = 0x0503,
	GL_STACK_OVERFLOW_KHR = 0x0503,
	GL_STACK_UNDERFLOW = 0x0504,
	GL_STACK_UNDERFLOW_KHR = 0x0504,
	GL_OUT_OF_MEMORY = 0x0505,
	GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506,
	GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506,
	GL_INVALID_FRAMEBUFFER_OPERATION_OES = 0x0506,
	GL_CONTEXT_LOST = 0x0507,
	GL_CONTEXT_LOST_KHR = 0x0507,
	GL_2D = 0x0600,
	GL_3D = 0x0601,
	GL_3D_COLOR = 0x0602,
	GL_3D_COLOR_TEXTURE = 0x0603,
	GL_4D_COLOR_TEXTURE = 0x0604,
	GL_PASS_THROUGH_TOKEN = 0x0700,
	GL_POINT_TOKEN = 0x0701,
	GL_LINE_TOKEN = 0x0702,
	GL_POLYGON_TOKEN = 0x0703,
	GL_BITMAP_TOKEN = 0x0704,
	GL_DRAW_PIXEL_TOKEN = 0x0705,
	GL_COPY_PIXEL_TOKEN = 0x0706,
	GL_LINE_RESET_TOKEN = 0x0707,
	GL_EXP = 0x0800,
	GL_EXP2 = 0x0801,
	GL_CW = 0x0900,
	GL_CCW = 0x0901,
	GL_COEFF = 0x0A00,
	GL_ORDER = 0x0A01,
	GL_DOMAIN = 0x0A02,
	GL_CURRENT_COLOR = 0x0B00,
	GL_CURRENT_INDEX = 0x0B01,
	GL_CURRENT_NORMAL = 0x0B02,
	GL_CURRENT_TEXTURE_COORDS = 0x0B03,
	GL_CURRENT_RASTER_COLOR = 0x0B04,
	GL_CURRENT_RASTER_INDEX = 0x0B05,
	GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06,
	GL_CURRENT_RASTER_POSITION = 0x0B07,
	GL_CURRENT_RASTER_POSITION_VALID = 0x0B08,
	GL_CURRENT_RASTER_DISTANCE = 0x0B09,
	GL_POINT_SMOOTH = 0x0B10,
	GL_POINT_SIZE = 0x0B11,
	GL_POINT_SIZE_RANGE = 0x0B12,
	GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12,
	GL_POINT_SIZE_GRANULARITY = 0x0B13,
	GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13,
	GL_LINE_SMOOTH = 0x0B20,
	GL_LINE_WIDTH = 0x0B21,
	GL_LINE_WIDTH_RANGE = 0x0B22,
	GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22,
	GL_LINE_WIDTH_GRANULARITY = 0x0B23,
	GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23,
	GL_LINE_STIPPLE = 0x0B24,
	GL_LINE_STIPPLE_PATTERN = 0x0B25,
	GL_LINE_STIPPLE_REPEAT = 0x0B26,
	GL_LIST_MODE = 0x0B30,
	GL_MAX_LIST_NESTING = 0x0B31,
	GL_LIST_BASE = 0x0B32,
	GL_LIST_INDEX = 0x0B33,
	GL_POLYGON_MODE = 0x0B40,
	GL_POLYGON_MODE_NV = 0x0B40,
	GL_POLYGON_SMOOTH = 0x0B41,
	GL_POLYGON_STIPPLE = 0x0B42,
	GL_EDGE_FLAG = 0x0B43,
	GL_CULL_FACE = 0x0B44,
	GL_CULL_FACE_MODE = 0x0B45,
	GL_FRONT_FACE = 0x0B46,
	GL_LIGHTING = 0x0B50,
	GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51,
	GL_LIGHT_MODEL_TWO_SIDE = 0x0B52,
	GL_LIGHT_MODEL_AMBIENT = 0x0B53,
	GL_SHADE_MODEL = 0x0B54,
	GL_COLOR_MATERIAL_FACE = 0x0B55,
	GL_COLOR_MATERIAL_PARAMETER = 0x0B56,
	GL_COLOR_MATERIAL = 0x0B57,
	GL_FOG = 0x0B60,
	GL_FOG_INDEX = 0x0B61,
	GL_FOG_DENSITY = 0x0B62,
	GL_FOG_START = 0x0B63,
	GL_FOG_END = 0x0B64,
	GL_FOG_MODE = 0x0B65,
	GL_FOG_COLOR = 0x0B66,
	GL_DEPTH_RANGE = 0x0B70,
	GL_DEPTH_TEST = 0x0B71,
	GL_DEPTH_WRITEMASK = 0x0B72,
	GL_DEPTH_CLEAR_VALUE = 0x0B73,
	GL_DEPTH_FUNC = 0x0B74,
	GL_ACCUM_CLEAR_VALUE = 0x0B80,
	GL_STENCIL_TEST = 0x0B90,
	GL_STENCIL_CLEAR_VALUE = 0x0B91,
	GL_STENCIL_FUNC = 0x0B92,
	GL_STENCIL_VALUE_MASK = 0x0B93,
	GL_STENCIL_FAIL = 0x0B94,
	GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95,
	GL_STENCIL_PASS_DEPTH_PASS = 0x0B96,
	GL_STENCIL_REF = 0x0B97,
	GL_STENCIL_WRITEMASK = 0x0B98,
	GL_MATRIX_MODE = 0x0BA0,
	GL_NORMALIZE = 0x0BA1,
	GL_VIEWPORT = 0x0BA2,
	GL_MODELVIEW_STACK_DEPTH = 0x0BA3,
	GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3,
	GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3,
	GL_PROJECTION_STACK_DEPTH = 0x0BA4,
	GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4,
	GL_TEXTURE_STACK_DEPTH = 0x0BA5,
	GL_MODELVIEW_MATRIX = 0x0BA6,
	GL_MODELVIEW0_MATRIX_EXT = 0x0BA6,
	GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6,
	GL_PROJECTION_MATRIX = 0x0BA7,
	GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7,
	GL_TEXTURE_MATRIX = 0x0BA8,
	GL_ATTRIB_STACK_DEPTH = 0x0BB0,
	GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1,
	GL_ALPHA_TEST = 0x0BC0,
	GL_ALPHA_TEST_QCOM = 0x0BC0,
	GL_ALPHA_TEST_FUNC = 0x0BC1,
	GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1,
	GL_ALPHA_TEST_REF = 0x0BC2,
	GL_ALPHA_TEST_REF_QCOM = 0x0BC2,
	GL_DITHER = 0x0BD0,
	GL_BLEND_DST = 0x0BE0,
	GL_BLEND_SRC = 0x0BE1,
	GL_BLEND = 0x0BE2,
	GL_LOGIC_OP_MODE = 0x0BF0,
	GL_INDEX_LOGIC_OP = 0x0BF1,
	GL_LOGIC_OP = 0x0BF1,
	GL_COLOR_LOGIC_OP = 0x0BF2,
	GL_AUX_BUFFERS = 0x0C00,
	GL_DRAW_BUFFER = 0x0C01,
	GL_DRAW_BUFFER_EXT = 0x0C01,
	GL_READ_BUFFER = 0x0C02,
	GL_READ_BUFFER_EXT = 0x0C02,
	GL_READ_BUFFER_NV = 0x0C02,
	GL_SCISSOR_BOX = 0x0C10,
	GL_SCISSOR_TEST = 0x0C11,
	GL_INDEX_CLEAR_VALUE = 0x0C20,
	GL_INDEX_WRITEMASK = 0x0C21,
	GL_COLOR_CLEAR_VALUE = 0x0C22,
	GL_COLOR_WRITEMASK = 0x0C23,
	GL_INDEX_MODE = 0x0C30,
	GL_RGBA_MODE = 0x0C31,
	GL_DOUBLEBUFFER = 0x0C32,
	GL_STEREO = 0x0C33,
	GL_RENDER_MODE = 0x0C40,
	GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50,
	GL_POINT_SMOOTH_HINT = 0x0C51,
	GL_LINE_SMOOTH_HINT = 0x0C52,
	GL_POLYGON_SMOOTH_HINT = 0x0C53,
	GL_FOG_HINT = 0x0C54,
	GL_TEXTURE_GEN_S = 0x0C60,
	GL_TEXTURE_GEN_T = 0x0C61,
	GL_TEXTURE_GEN_R = 0x0C62,
	GL_TEXTURE_GEN_Q = 0x0C63,
	GL_PIXEL_MAP_I_TO_I = 0x0C70,
	GL_PIXEL_MAP_S_TO_S = 0x0C71,
	GL_PIXEL_MAP_I_TO_R = 0x0C72,
	GL_PIXEL_MAP_I_TO_G = 0x0C73,
	GL_PIXEL_MAP_I_TO_B = 0x0C74,
	GL_PIXEL_MAP_I_TO_A = 0x0C75,
	GL_PIXEL_MAP_R_TO_R = 0x0C76,
	GL_PIXEL_MAP_G_TO_G = 0x0C77,
	GL_PIXEL_MAP_B_TO_B = 0x0C78,
	GL_PIXEL_MAP_A_TO_A = 0x0C79,
	GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0,
	GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1,
	GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2,
	GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3,
	GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4,
	GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5,
	GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6,
	GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7,
	GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8,
	GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9,
	GL_UNPACK_SWAP_BYTES = 0x0CF0,
	GL_UNPACK_LSB_FIRST = 0x0CF1,
	GL_UNPACK_ROW_LENGTH = 0x0CF2,
	GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2,
	GL_UNPACK_SKIP_ROWS = 0x0CF3,
	GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3,
	GL_UNPACK_SKIP_PIXELS = 0x0CF4,
	GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4,
	GL_UNPACK_ALIGNMENT = 0x0CF5,
	GL_PACK_SWAP_BYTES = 0x0D00,
	GL_PACK_LSB_FIRST = 0x0D01,
	GL_PACK_ROW_LENGTH = 0x0D02,
	GL_PACK_SKIP_ROWS = 0x0D03,
	GL_PACK_SKIP_PIXELS = 0x0D04,
	GL_PACK_ALIGNMENT = 0x0D05,
	GL_MAP_COLOR = 0x0D10,
	GL_MAP_STENCIL = 0x0D11,
	GL_INDEX_SHIFT = 0x0D12,
	GL_INDEX_OFFSET = 0x0D13,
	GL_RED_SCALE = 0x0D14,
	GL_RED_BIAS = 0x0D15,
	GL_ZOOM_X = 0x0D16,
	GL_ZOOM_Y = 0x0D17,
	GL_GREEN_SCALE = 0x0D18,
	GL_GREEN_BIAS = 0x0D19,
	GL_BLUE_SCALE = 0x0D1A,
	GL_BLUE_BIAS = 0x0D1B,
	GL_ALPHA_SCALE = 0x0D1C,
	GL_ALPHA_BIAS = 0x0D1D,
	GL_DEPTH_SCALE = 0x0D1E,
	GL_DEPTH_BIAS = 0x0D1F,
	GL_MAX_EVAL_ORDER = 0x0D30,
	GL_MAX_LIGHTS = 0x0D31,
	GL_MAX_CLIP_PLANES = 0x0D32,
	GL_MAX_CLIP_PLANES_IMG = 0x0D32,
	GL_MAX_CLIP_DISTANCES = 0x0D32,
	GL_MAX_CLIP_DISTANCES_EXT = 0x0D32,
	GL_MAX_CLIP_DISTANCES_APPLE = 0x0D32,
	GL_MAX_TEXTURE_SIZE = 0x0D33,
	GL_MAX_PIXEL_MAP_TABLE = 0x0D34,
	GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35,
	GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36,
	GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36,
	GL_MAX_NAME_STACK_DEPTH = 0x0D37,
	GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38,
	GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38,
	GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39,
	GL_MAX_VIEWPORT_DIMS = 0x0D3A,
	GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B,
	GL_SUBPIXEL_BITS = 0x0D50,
	GL_INDEX_BITS = 0x0D51,
	GL_RED_BITS = 0x0D52,
	GL_GREEN_BITS = 0x0D53,
	GL_BLUE_BITS = 0x0D54,
	GL_ALPHA_BITS = 0x0D55,
	GL_DEPTH_BITS = 0x0D56,
	GL_STENCIL_BITS = 0x0D57,
	GL_ACCUM_RED_BITS = 0x0D58,
	GL_ACCUM_GREEN_BITS = 0x0D59,
	GL_ACCUM_BLUE_BITS = 0x0D5A,
	GL_ACCUM_ALPHA_BITS = 0x0D5B,
	GL_NAME_STACK_DEPTH = 0x0D70,
	GL_AUTO_NORMAL = 0x0D80,
	GL_MAP1_COLOR_4 = 0x0D90,
	GL_MAP1_INDEX = 0x0D91,
	GL_MAP1_NORMAL = 0x0D92,
	GL_MAP1_TEXTURE_COORD_1 = 0x0D93,
	GL_MAP1_TEXTURE_COORD_2 = 0x0D94,
	GL_MAP1_TEXTURE_COORD_3 = 0x0D95,
	GL_MAP1_TEXTURE_COORD_4 = 0x0D96,
	GL_MAP1_VERTEX_3 = 0x0D97,
	GL_MAP1_VERTEX_4 = 0x0D98,
	GL_MAP2_COLOR_4 = 0x0DB0,
	GL_MAP2_INDEX = 0x0DB1,
	GL_MAP2_NORMAL = 0x0DB2,
	GL_MAP2_TEXTURE_COORD_1 = 0x0DB3,
	GL_MAP2_TEXTURE_COORD_2 = 0x0DB4,
	GL_MAP2_TEXTURE_COORD_3 = 0x0DB5,
	GL_MAP2_TEXTURE_COORD_4 = 0x0DB6,
	GL_MAP2_VERTEX_3 = 0x0DB7,
	GL_MAP2_VERTEX_4 = 0x0DB8,
	GL_MAP1_GRID_DOMAIN = 0x0DD0,
	GL_MAP1_GRID_SEGMENTS = 0x0DD1,
	GL_MAP2_GRID_DOMAIN = 0x0DD2,
	GL_MAP2_GRID_SEGMENTS = 0x0DD3,
	GL_TEXTURE_1D = 0x0DE0,
	GL_TEXTURE_2D = 0x0DE1,
	GL_FEEDBACK_BUFFER_POINTER = 0x0DF0,
	GL_FEEDBACK_BUFFER_SIZE = 0x0DF1,
	GL_FEEDBACK_BUFFER_TYPE = 0x0DF2,
	GL_SELECTION_BUFFER_POINTER = 0x0DF3,
	GL_SELECTION_BUFFER_SIZE = 0x0DF4,
	GL_TEXTURE_WIDTH = 0x1000,
	GL_TEXTURE_HEIGHT = 0x1001,
	GL_TEXTURE_INTERNAL_FORMAT = 0x1003,
	GL_TEXTURE_COMPONENTS = 0x1003,
	GL_TEXTURE_BORDER_COLOR = 0x1004,
	GL_TEXTURE_BORDER_COLOR_EXT = 0x1004,
	GL_TEXTURE_BORDER_COLOR_NV = 0x1004,
	GL_TEXTURE_BORDER_COLOR_OES = 0x1004,
	GL_TEXTURE_BORDER = 0x1005,
	GL_TEXTURE_TARGET = 0x1006,
	GL_DONT_CARE = 0x1100,
	GL_FASTEST = 0x1101,
	GL_NICEST = 0x1102,
	GL_AMBIENT = 0x1200,
	GL_DIFFUSE = 0x1201,
	GL_SPECULAR = 0x1202,
	GL_POSITION = 0x1203,
	GL_SPOT_DIRECTION = 0x1204,
	GL_SPOT_EXPONENT = 0x1205,
	GL_SPOT_CUTOFF = 0x1206,
	GL_CONSTANT_ATTENUATION = 0x1207,
	GL_LINEAR_ATTENUATION = 0x1208,
	GL_QUADRATIC_ATTENUATION = 0x1209,
	GL_COMPILE = 0x1300,
	GL_COMPILE_AND_EXECUTE = 0x1301,
	GL_BYTE = 0x1400,
	GL_UNSIGNED_BYTE = 0x1401,
	GL_SHORT = 0x1402,
	GL_UNSIGNED_SHORT = 0x1403,
	GL_INT = 0x1404,
	GL_UNSIGNED_INT = 0x1405,
	GL_FLOAT = 0x1406,
	GL_2_BYTES = 0x1407,
	GL_2_BYTES_NV = 0x1407,
	GL_3_BYTES = 0x1408,
	GL_3_BYTES_NV = 0x1408,
	GL_4_BYTES = 0x1409,
	GL_4_BYTES_NV = 0x1409,
	GL_DOUBLE = 0x140A,
	GL_DOUBLE_EXT = 0x140A,
	GL_HALF_FLOAT = 0x140B,
	GL_HALF_FLOAT_ARB = 0x140B,
	GL_HALF_FLOAT_NV = 0x140B,
	GL_HALF_APPLE = 0x140B,
	GL_FIXED = 0x140C,
	GL_FIXED_OES = 0x140C,
	GL_INT64_ARB = 0x140E,
	GL_INT64_NV = 0x140E,
	GL_UNSIGNED_INT64_ARB = 0x140F,
	GL_UNSIGNED_INT64_NV = 0x140F,
	GL_CLEAR = 0x1500,
	GL_AND = 0x1501,
	GL_AND_REVERSE = 0x1502,
	GL_COPY = 0x1503,
	GL_AND_INVERTED = 0x1504,
	GL_NOOP = 0x1505,
	GL_XOR = 0x1506,
	GL_XOR_NV = 0x1506,
	GL_OR = 0x1507,
	GL_NOR = 0x1508,
	GL_EQUIV = 0x1509,
	GL_INVERT = 0x150A,
	GL_OR_REVERSE = 0x150B,
	GL_COPY_INVERTED = 0x150C,
	GL_OR_INVERTED = 0x150D,
	GL_NAND = 0x150E,
	GL_SET = 0x150F,
	GL_EMISSION = 0x1600,
	GL_SHININESS = 0x1601,
	GL_AMBIENT_AND_DIFFUSE = 0x1602,
	GL_COLOR_INDEXES = 0x1603,
	GL_MODELVIEW = 0x1700,
	GL_MODELVIEW0_ARB = 0x1700,
	GL_MODELVIEW0_EXT = 0x1700,
	GL_PATH_MODELVIEW_NV = 0x1700,
	GL_PROJECTION = 0x1701,
	GL_PATH_PROJECTION_NV = 0x1701,
	GL_TEXTURE = 0x1702,
	GL_COLOR = 0x1800,
	GL_COLOR_EXT = 0x1800,
	GL_DEPTH = 0x1801,
	GL_DEPTH_EXT = 0x1801,
	GL_STENCIL = 0x1802,
	GL_STENCIL_EXT = 0x1802,
	GL_COLOR_INDEX = 0x1900,
	GL_STENCIL_INDEX = 0x1901,
	GL_STENCIL_INDEX_OES = 0x1901,
	GL_DEPTH_COMPONENT = 0x1902,
	GL_RED = 0x1903,
	GL_RED_EXT = 0x1903,
	GL_RED_NV = 0x1903,
	GL_GREEN = 0x1904,
	GL_GREEN_NV = 0x1904,
	GL_BLUE = 0x1905,
	GL_BLUE_NV = 0x1905,
	GL_ALPHA = 0x1906,
	GL_RGB = 0x1907,
	GL_RGBA = 0x1908,
	GL_LUMINANCE = 0x1909,
	GL_LUMINANCE_ALPHA = 0x190A,
	GL_BITMAP = 0x1A00,
	GL_POINT = 0x1B00,
	GL_POINT_NV = 0x1B00,
	GL_LINE = 0x1B01,
	GL_LINE_NV = 0x1B01,
	GL_FILL = 0x1B02,
	GL_FILL_NV = 0x1B02,
	GL_RENDER = 0x1C00,
	GL_FEEDBACK = 0x1C01,
	GL_SELECT = 0x1C02,
	GL_FLAT = 0x1D00,
	GL_SMOOTH = 0x1D01,
	GL_KEEP = 0x1E00,
	GL_REPLACE = 0x1E01,
	GL_INCR = 0x1E02,
	GL_DECR = 0x1E03,
	GL_VENDOR = 0x1F00,
	GL_RENDERER = 0x1F01,
	GL_VERSION = 0x1F02,
	GL_EXTENSIONS = 0x1F03,
	GL_S = 0x2000,
	GL_T = 0x2001,
	GL_R = 0x2002,
	GL_Q = 0x2003,
	GL_MODULATE = 0x2100,
	GL_DECAL = 0x2101,
	GL_TEXTURE_ENV_MODE = 0x2200,
	GL_TEXTURE_ENV_COLOR = 0x2201,
	GL_TEXTURE_ENV = 0x2300,
	GL_EYE_LINEAR = 0x2400,
	GL_EYE_LINEAR_NV = 0x2400,
	GL_OBJECT_LINEAR = 0x2401,
	GL_OBJECT_LINEAR_NV = 0x2401,
	GL_SPHERE_MAP = 0x2402,
	GL_TEXTURE_GEN_MODE = 0x2500,
	GL_TEXTURE_GEN_MODE_OES = 0x2500,
	GL_OBJECT_PLANE = 0x2501,
	GL_EYE_PLANE = 0x2502,
	GL_NEAREST = 0x2600,
	GL_LINEAR = 0x2601,
	GL_NEAREST_MIPMAP_NEAREST = 0x2700,
	GL_LINEAR_MIPMAP_NEAREST = 0x2701,
	GL_NEAREST_MIPMAP_LINEAR = 0x2702,
	GL_LINEAR_MIPMAP_LINEAR = 0x2703,
	GL_TEXTURE_MAG_FILTER = 0x2800,
	GL_TEXTURE_MIN_FILTER = 0x2801,
	GL_TEXTURE_WRAP_S = 0x2802,
	GL_TEXTURE_WRAP_T = 0x2803,
	GL_CLAMP = 0x2900,
	GL_REPEAT = 0x2901,
	GL_POLYGON_OFFSET_UNITS = 0x2A00,
	GL_POLYGON_OFFSET_POINT = 0x2A01,
	GL_POLYGON_OFFSET_POINT_NV = 0x2A01,
	GL_POLYGON_OFFSET_LINE = 0x2A02,
	GL_POLYGON_OFFSET_LINE_NV = 0x2A02,
	GL_R3_G3_B2 = 0x2A10,
	GL_V2F = 0x2A20,
	GL_V3F = 0x2A21,
	GL_C4UB_V2F = 0x2A22,
	GL_C4UB_V3F = 0x2A23,
	GL_C3F_V3F = 0x2A24,
	GL_N3F_V3F = 0x2A25,
	GL_C4F_N3F_V3F = 0x2A26,
	GL_T2F_V3F = 0x2A27,
	GL_T4F_V4F = 0x2A28,
	GL_T2F_C4UB_V3F = 0x2A29,
	GL_T2F_C3F_V3F = 0x2A2A,
	GL_T2F_N3F_V3F = 0x2A2B,
	GL_T2F_C4F_N3F_V3F = 0x2A2C,
	GL_T4F_C4F_N3F_V4F = 0x2A2D,
	GL_CLIP_PLANE0 = 0x3000,
	GL_CLIP_PLANE0_IMG = 0x3000,
	GL_CLIP_DISTANCE0 = 0x3000,
	GL_CLIP_DISTANCE0_EXT = 0x3000,
	GL_CLIP_DISTANCE0_APPLE = 0x3000,
	GL_CLIP_PLANE1 = 0x3001,
	GL_CLIP_PLANE1_IMG = 0x3001,
	GL_CLIP_DISTANCE1 = 0x3001,
	GL_CLIP_DISTANCE1_EXT = 0x3001,
	GL_CLIP_DISTANCE1_APPLE = 0x3001,
	GL_CLIP_PLANE2 = 0x3002,
	GL_CLIP_PLANE2_IMG = 0x3002,
	GL_CLIP_DISTANCE2 = 0x3002,
	GL_CLIP_DISTANCE2_EXT = 0x3002,
	GL_CLIP_DISTANCE2_APPLE = 0x3002,
	GL_CLIP_PLANE3 = 0x3003,
	GL_CLIP_PLANE3_IMG = 0x3003,
	GL_CLIP_DISTANCE3 = 0x3003,
	GL_CLIP_DISTANCE3_EXT = 0x3003,
	GL_CLIP_DISTANCE3_APPLE = 0x3003,
	GL_CLIP_PLANE4 = 0x3004,
	GL_CLIP_PLANE4_IMG = 0x3004,
	GL_CLIP_DISTANCE4 = 0x3004,
	GL_CLIP_DISTANCE4_EXT = 0x3004,
	GL_CLIP_DISTANCE4_APPLE = 0x3004,
	GL_CLIP_PLANE5 = 0x3005,
	GL_CLIP_PLANE5_IMG = 0x3005,
	GL_CLIP_DISTANCE5 = 0x3005,
	GL_CLIP_DISTANCE5_EXT = 0x3005,
	GL_CLIP_DISTANCE5_APPLE = 0x3005,
	GL_CLIP_DISTANCE6 = 0x3006,
	GL_CLIP_DISTANCE6_EXT = 0x3006,
	GL_CLIP_DISTANCE6_APPLE = 0x3006,
	GL_CLIP_DISTANCE7 = 0x3007,
	GL_CLIP_DISTANCE7_EXT = 0x3007,
	GL_CLIP_DISTANCE7_APPLE = 0x3007,
	GL_LIGHT0 = 0x4000,
	GL_LIGHT1 = 0x4001,
	GL_LIGHT2 = 0x4002,
	GL_LIGHT3 = 0x4003,
	GL_LIGHT4 = 0x4004,
	GL_LIGHT5 = 0x4005,
	GL_LIGHT6 = 0x4006,
	GL_LIGHT7 = 0x4007,
}; // Mostly OpenGL 1.0/1.1 enum assignments. Unused ranges should generally remain unused.
typedef enum {
	GL_ABGR_EXT = 0x8000,
	GL_CONSTANT_COLOR = 0x8001,
	GL_CONSTANT_COLOR_EXT = 0x8001,
	GL_ONE_MINUS_CONSTANT_COLOR = 0x8002,
	GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002,
	GL_CONSTANT_ALPHA = 0x8003,
	GL_CONSTANT_ALPHA_EXT = 0x8003,
	GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004,
	GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004,
	GL_BLEND_COLOR = 0x8005,
	GL_BLEND_COLOR_EXT = 0x8005,
	GL_FUNC_ADD = 0x8006,
	GL_FUNC_ADD_EXT = 0x8006,
	GL_FUNC_ADD_OES = 0x8006,
	GL_MIN = 0x8007,
	GL_MIN_EXT = 0x8007,
	GL_MAX = 0x8008,
	GL_MAX_EXT = 0x8008,
	GL_BLEND_EQUATION = 0x8009,
	GL_BLEND_EQUATION_EXT = 0x8009,
	GL_BLEND_EQUATION_OES = 0x8009,
	GL_BLEND_EQUATION_RGB = 0x8009,
	GL_BLEND_EQUATION_RGB_EXT = 0x8009,
	GL_BLEND_EQUATION_RGB_OES = 0x8009,
	GL_FUNC_SUBTRACT = 0x800A,
	GL_FUNC_SUBTRACT_EXT = 0x800A,
	GL_FUNC_SUBTRACT_OES = 0x800A,
	GL_FUNC_REVERSE_SUBTRACT = 0x800B,
	GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B,
	GL_FUNC_REVERSE_SUBTRACT_OES = 0x800B,
	GL_CMYK_EXT = 0x800C,
	GL_CMYKA_EXT = 0x800D,
	GL_PACK_CMYK_HINT_EXT = 0x800E,
	GL_UNPACK_CMYK_HINT_EXT = 0x800F,
	GL_CONVOLUTION_1D = 0x8010,
	GL_CONVOLUTION_1D_EXT = 0x8010,
	GL_CONVOLUTION_2D = 0x8011,
	GL_CONVOLUTION_2D_EXT = 0x8011,
	GL_SEPARABLE_2D = 0x8012,
	GL_SEPARABLE_2D_EXT = 0x8012,
	GL_CONVOLUTION_BORDER_MODE = 0x8013,
	GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013,
	GL_CONVOLUTION_FILTER_SCALE = 0x8014,
	GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014,
	GL_CONVOLUTION_FILTER_BIAS = 0x8015,
	GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015,
	GL_REDUCE = 0x8016,
	GL_REDUCE_EXT = 0x8016,
	GL_CONVOLUTION_FORMAT = 0x8017,
	GL_CONVOLUTION_FORMAT_EXT = 0x8017,
	GL_CONVOLUTION_WIDTH = 0x8018,
	GL_CONVOLUTION_WIDTH_EXT = 0x8018,
	GL_CONVOLUTION_HEIGHT = 0x8019,
	GL_CONVOLUTION_HEIGHT_EXT = 0x8019,
	GL_MAX_CONVOLUTION_WIDTH = 0x801A,
	GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A,
	GL_MAX_CONVOLUTION_HEIGHT = 0x801B,
	GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B,
	GL_POST_CONVOLUTION_RED_SCALE = 0x801C,
	GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C,
	GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D,
	GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D,
	GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E,
	GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E,
	GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F,
	GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F,
	GL_POST_CONVOLUTION_RED_BIAS = 0x8020,
	GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020,
	GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021,
	GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021,
	GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022,
	GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022,
	GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023,
	GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023,
	GL_HISTOGRAM = 0x8024,
	GL_HISTOGRAM_EXT = 0x8024,
	GL_PROXY_HISTOGRAM = 0x8025,
	GL_PROXY_HISTOGRAM_EXT = 0x8025,
	GL_HISTOGRAM_WIDTH = 0x8026,
	GL_HISTOGRAM_WIDTH_EXT = 0x8026,
	GL_HISTOGRAM_FORMAT = 0x8027,
	GL_HISTOGRAM_FORMAT_EXT = 0x8027,
	GL_HISTOGRAM_RED_SIZE = 0x8028,
	GL_HISTOGRAM_RED_SIZE_EXT = 0x8028,
	GL_HISTOGRAM_GREEN_SIZE = 0x8029,
	GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029,
	GL_HISTOGRAM_BLUE_SIZE = 0x802A,
	GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A,
	GL_HISTOGRAM_ALPHA_SIZE = 0x802B,
	GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B,
	GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C,
	GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C,
	GL_HISTOGRAM_SINK = 0x802D,
	GL_HISTOGRAM_SINK_EXT = 0x802D,
	GL_MINMAX = 0x802E,
	GL_MINMAX_EXT = 0x802E,
	GL_MINMAX_FORMAT = 0x802F,
	GL_MINMAX_FORMAT_EXT = 0x802F,
	GL_MINMAX_SINK = 0x8030,
	GL_MINMAX_SINK_EXT = 0x8030,
	GL_TABLE_TOO_LARGE_EXT = 0x8031,
	GL_TABLE_TOO_LARGE = 0x8031,
	GL_UNSIGNED_BYTE_3_3_2 = 0x8032,
	GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032,
	GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033,
	GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033,
	GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034,
	GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034,
	GL_UNSIGNED_INT_8_8_8_8 = 0x8035,
	GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035,
	GL_UNSIGNED_INT_10_10_10_2 = 0x8036,
	GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036,
	GL_POLYGON_OFFSET_EXT = 0x8037,
	GL_POLYGON_OFFSET_FILL = 0x8037,
	GL_POLYGON_OFFSET_FACTOR = 0x8038,
	GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038,
	GL_POLYGON_OFFSET_BIAS_EXT = 0x8039,
	GL_RESCALE_NORMAL = 0x803A,
	GL_RESCALE_NORMAL_EXT = 0x803A,
	GL_ALPHA4 = 0x803B,
	GL_ALPHA4_EXT = 0x803B,
	GL_ALPHA8 = 0x803C,
	GL_ALPHA8_EXT = 0x803C,
	GL_ALPHA8_OES = 0x803C,
	GL_ALPHA12 = 0x803D,
	GL_ALPHA12_EXT = 0x803D,
	GL_ALPHA16 = 0x803E,
	GL_ALPHA16_EXT = 0x803E,
	GL_LUMINANCE4 = 0x803F,
	GL_LUMINANCE4_EXT = 0x803F,
	GL_LUMINANCE8 = 0x8040,
	GL_LUMINANCE8_EXT = 0x8040,
	GL_LUMINANCE8_OES = 0x8040,
	GL_LUMINANCE12 = 0x8041,
	GL_LUMINANCE12_EXT = 0x8041,
	GL_LUMINANCE16 = 0x8042,
	GL_LUMINANCE16_EXT = 0x8042,
	GL_LUMINANCE4_ALPHA4 = 0x8043,
	GL_LUMINANCE4_ALPHA4_EXT = 0x8043,
	GL_LUMINANCE4_ALPHA4_OES = 0x8043,
	GL_LUMINANCE6_ALPHA2 = 0x8044,
	GL_LUMINANCE6_ALPHA2_EXT = 0x8044,
	GL_LUMINANCE8_ALPHA8 = 0x8045,
	GL_LUMINANCE8_ALPHA8_EXT = 0x8045,
	GL_LUMINANCE8_ALPHA8_OES = 0x8045,
	GL_LUMINANCE12_ALPHA4 = 0x8046,
	GL_LUMINANCE12_ALPHA4_EXT = 0x8046,
	GL_LUMINANCE12_ALPHA12 = 0x8047,
	GL_LUMINANCE12_ALPHA12_EXT = 0x8047,
	GL_LUMINANCE16_ALPHA16 = 0x8048,
	GL_LUMINANCE16_ALPHA16_EXT = 0x8048,
	GL_INTENSITY = 0x8049,
	GL_INTENSITY_EXT = 0x8049,
	GL_INTENSITY4 = 0x804A,
	GL_INTENSITY4_EXT = 0x804A,
	GL_INTENSITY8 = 0x804B,
	GL_INTENSITY8_EXT = 0x804B,
	GL_INTENSITY12 = 0x804C,
	GL_INTENSITY12_EXT = 0x804C,
	GL_INTENSITY16 = 0x804D,
	GL_INTENSITY16_EXT = 0x804D,
	GL_RGB2_EXT = 0x804E,
	GL_RGB4 = 0x804F,
	GL_RGB4_EXT = 0x804F,
	GL_RGB5 = 0x8050,
	GL_RGB5_EXT = 0x8050,
	GL_RGB8 = 0x8051,
	GL_RGB8_EXT = 0x8051,
	GL_RGB8_OES = 0x8051,
	GL_RGB10 = 0x8052,
	GL_RGB10_EXT = 0x8052,
	GL_RGB12 = 0x8053,
	GL_RGB12_EXT = 0x8053,
	GL_RGB16 = 0x8054,
	GL_RGB16_EXT = 0x8054,
	GL_RGBA2 = 0x8055,
	GL_RGBA2_EXT = 0x8055,
	GL_RGBA4 = 0x8056,
	GL_RGBA4_EXT = 0x8056,
	GL_RGBA4_OES = 0x8056,
	GL_RGB5_A1 = 0x8057,
	GL_RGB5_A1_EXT = 0x8057,
	GL_RGB5_A1_OES = 0x8057,
	GL_RGBA8 = 0x8058,
	GL_RGBA8_EXT = 0x8058,
	GL_RGBA8_OES = 0x8058,
	GL_RGB10_A2 = 0x8059,
	GL_RGB10_A2_EXT = 0x8059,
	GL_RGBA12 = 0x805A,
	GL_RGBA12_EXT = 0x805A,
	GL_RGBA16 = 0x805B,
	GL_RGBA16_EXT = 0x805B,
	GL_TEXTURE_RED_SIZE = 0x805C,
	GL_TEXTURE_RED_SIZE_EXT = 0x805C,
	GL_TEXTURE_GREEN_SIZE = 0x805D,
	GL_TEXTURE_GREEN_SIZE_EXT = 0x805D,
	GL_TEXTURE_BLUE_SIZE = 0x805E,
	GL_TEXTURE_BLUE_SIZE_EXT = 0x805E,
	GL_TEXTURE_ALPHA_SIZE = 0x805F,
	GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F,
	GL_TEXTURE_LUMINANCE_SIZE = 0x8060,
	GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060,
	GL_TEXTURE_INTENSITY_SIZE = 0x8061,
	GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061,
	GL_REPLACE_EXT = 0x8062,
	GL_PROXY_TEXTURE_1D = 0x8063,
	GL_PROXY_TEXTURE_1D_EXT = 0x8063,
	GL_PROXY_TEXTURE_2D = 0x8064,
	GL_PROXY_TEXTURE_2D_EXT = 0x8064,
	GL_TEXTURE_TOO_LARGE_EXT = 0x8065,
	GL_TEXTURE_PRIORITY = 0x8066,
	GL_TEXTURE_PRIORITY_EXT = 0x8066,
	GL_TEXTURE_RESIDENT = 0x8067,
	GL_TEXTURE_RESIDENT_EXT = 0x8067,
	GL_TEXTURE_1D_BINDING_EXT = 0x8068,
	GL_TEXTURE_BINDING_1D = 0x8068,
	GL_TEXTURE_2D_BINDING_EXT = 0x8069,
	GL_TEXTURE_BINDING_2D = 0x8069,
	GL_TEXTURE_3D_BINDING_EXT = 0x806A,
	GL_TEXTURE_3D_BINDING_OES = 0x806A,
	GL_TEXTURE_BINDING_3D = 0x806A,
	GL_TEXTURE_BINDING_3D_OES = 0x806A,
	GL_PACK_SKIP_IMAGES = 0x806B,
	GL_PACK_SKIP_IMAGES_EXT = 0x806B,
	GL_PACK_IMAGE_HEIGHT = 0x806C,
	GL_PACK_IMAGE_HEIGHT_EXT = 0x806C,
	GL_UNPACK_SKIP_IMAGES = 0x806D,
	GL_UNPACK_SKIP_IMAGES_EXT = 0x806D,
	GL_UNPACK_IMAGE_HEIGHT = 0x806E,
	GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E,
	GL_TEXTURE_3D = 0x806F,
	GL_TEXTURE_3D_EXT = 0x806F,
	GL_TEXTURE_3D_OES = 0x806F,
	GL_PROXY_TEXTURE_3D = 0x8070,
	GL_PROXY_TEXTURE_3D_EXT = 0x8070,
	GL_TEXTURE_DEPTH = 0x8071,
	GL_TEXTURE_DEPTH_EXT = 0x8071,
	GL_TEXTURE_WRAP_R = 0x8072,
	GL_TEXTURE_WRAP_R_EXT = 0x8072,
	GL_TEXTURE_WRAP_R_OES = 0x8072,
	GL_MAX_3D_TEXTURE_SIZE = 0x8073,
	GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073,
	GL_MAX_3D_TEXTURE_SIZE_OES = 0x8073,
	GL_VERTEX_ARRAY = 0x8074,
	GL_VERTEX_ARRAY_EXT = 0x8074,
	GL_VERTEX_ARRAY_KHR = 0x8074,
	GL_NORMAL_ARRAY = 0x8075,
	GL_NORMAL_ARRAY_EXT = 0x8075,
	GL_COLOR_ARRAY = 0x8076,
	GL_COLOR_ARRAY_EXT = 0x8076,
	GL_INDEX_ARRAY = 0x8077,
	GL_INDEX_ARRAY_EXT = 0x8077,
	GL_TEXTURE_COORD_ARRAY = 0x8078,
	GL_TEXTURE_COORD_ARRAY_EXT = 0x8078,
	GL_EDGE_FLAG_ARRAY = 0x8079,
	GL_EDGE_FLAG_ARRAY_EXT = 0x8079,
	GL_VERTEX_ARRAY_SIZE = 0x807A,
	GL_VERTEX_ARRAY_SIZE_EXT = 0x807A,
	GL_VERTEX_ARRAY_TYPE = 0x807B,
	GL_VERTEX_ARRAY_TYPE_EXT = 0x807B,
	GL_VERTEX_ARRAY_STRIDE = 0x807C,
	GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C,
	GL_VERTEX_ARRAY_COUNT_EXT = 0x807D,
	GL_NORMAL_ARRAY_TYPE = 0x807E,
	GL_NORMAL_ARRAY_TYPE_EXT = 0x807E,
	GL_NORMAL_ARRAY_STRIDE = 0x807F,
	GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F,
	GL_NORMAL_ARRAY_COUNT_EXT = 0x8080,
	GL_COLOR_ARRAY_SIZE = 0x8081,
	GL_COLOR_ARRAY_SIZE_EXT = 0x8081,
	GL_COLOR_ARRAY_TYPE = 0x8082,
	GL_COLOR_ARRAY_TYPE_EXT = 0x8082,
	GL_COLOR_ARRAY_STRIDE = 0x8083,
	GL_COLOR_ARRAY_STRIDE_EXT = 0x8083,
	GL_COLOR_ARRAY_COUNT_EXT = 0x8084,
	GL_INDEX_ARRAY_TYPE = 0x8085,
	GL_INDEX_ARRAY_TYPE_EXT = 0x8085,
	GL_INDEX_ARRAY_STRIDE = 0x8086,
	GL_INDEX_ARRAY_STRIDE_EXT = 0x8086,
	GL_INDEX_ARRAY_COUNT_EXT = 0x8087,
	GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088,
	GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088,
	GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089,
	GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089,
	GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A,
	GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A,
	GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B,
	GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C,
	GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C,
	GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D,
	GL_VERTEX_ARRAY_POINTER = 0x808E,
	GL_VERTEX_ARRAY_POINTER_EXT = 0x808E,
	GL_NORMAL_ARRAY_POINTER = 0x808F,
	GL_NORMAL_ARRAY_POINTER_EXT = 0x808F,
	GL_COLOR_ARRAY_POINTER = 0x8090,
	GL_COLOR_ARRAY_POINTER_EXT = 0x8090,
	GL_INDEX_ARRAY_POINTER = 0x8091,
	GL_INDEX_ARRAY_POINTER_EXT = 0x8091,
	GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092,
	GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092,
	GL_EDGE_FLAG_ARRAY_POINTER = 0x8093,
	GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093,
	GL_INTERLACE_SGIX = 0x8094,
	GL_DETAIL_TEXTURE_2D_SGIS = 0x8095,
	GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096,
	GL_LINEAR_DETAIL_SGIS = 0x8097,
	GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098,
	GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099,
	GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A,
	GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B,
	GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C,
	GL_MULTISAMPLE = 0x809D,
	GL_MULTISAMPLE_ARB = 0x809D,
	GL_MULTISAMPLE_EXT = 0x809D,
	GL_MULTISAMPLE_SGIS = 0x809D,
	GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E,
	GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E,
	GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E,
	GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E,
	GL_SAMPLE_ALPHA_TO_ONE = 0x809F,
	GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F,
	GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F,
	GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F,
	GL_SAMPLE_COVERAGE = 0x80A0,
	GL_SAMPLE_COVERAGE_ARB = 0x80A0,
	GL_SAMPLE_MASK_EXT = 0x80A0,
	GL_SAMPLE_MASK_SGIS = 0x80A0,
	GL_1PASS_EXT = 0x80A1,
	GL_1PASS_SGIS = 0x80A1,
	GL_2PASS_0_EXT = 0x80A2,
	GL_2PASS_0_SGIS = 0x80A2,
	GL_2PASS_1_EXT = 0x80A3,
	GL_2PASS_1_SGIS = 0x80A3,
	GL_4PASS_0_EXT = 0x80A4,
	GL_4PASS_0_SGIS = 0x80A4,
	GL_4PASS_1_EXT = 0x80A5,
	GL_4PASS_1_SGIS = 0x80A5,
	GL_4PASS_2_EXT = 0x80A6,
	GL_4PASS_2_SGIS = 0x80A6,
	GL_4PASS_3_EXT = 0x80A7,
	GL_4PASS_3_SGIS = 0x80A7,
	GL_SAMPLE_BUFFERS = 0x80A8,
	GL_SAMPLE_BUFFERS_ARB = 0x80A8,
	GL_SAMPLE_BUFFERS_EXT = 0x80A8,
	GL_SAMPLE_BUFFERS_SGIS = 0x80A8,
	GL_SAMPLES = 0x80A9,
	GL_SAMPLES_ARB = 0x80A9,
	GL_SAMPLES_EXT = 0x80A9,
	GL_SAMPLES_SGIS = 0x80A9,
	GL_SAMPLE_COVERAGE_VALUE = 0x80AA,
	GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA,
	GL_SAMPLE_MASK_VALUE_EXT = 0x80AA,
	GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA,
	GL_SAMPLE_COVERAGE_INVERT = 0x80AB,
	GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB,
	GL_SAMPLE_MASK_INVERT_EXT = 0x80AB,
	GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB,
	GL_SAMPLE_PATTERN_EXT = 0x80AC,
	GL_SAMPLE_PATTERN_SGIS = 0x80AC,
	GL_LINEAR_SHARPEN_SGIS = 0x80AD,
	GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE,
	GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF,
	GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0,
	GL_COLOR_MATRIX = 0x80B1,
	GL_COLOR_MATRIX_SGI = 0x80B1,
	GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2,
	GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2,
	GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3,
	GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3,
	GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4,
	GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4,
	GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5,
	GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5,
	GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6,
	GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6,
	GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7,
	GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7,
	GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8,
	GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8,
	GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9,
	GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9,
	GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA,
	GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA,
	GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB,
	GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB,
	GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC,
	GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD,
	GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE,
	GL_SHADOW_AMBIENT_SGIX = 0x80BF,
	GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF,
}; // The primary GL enumerant space begins here. All modern enum allocations are in this range. These enums are mostly assigned the default class since it's a great deal of not very useful work to be more specific
typedef enum {
	GL_BLEND_DST_RGB = 0x80C8,
	GL_BLEND_DST_RGB_EXT = 0x80C8,
	GL_BLEND_DST_RGB_OES = 0x80C8,
	GL_BLEND_SRC_RGB = 0x80C9,
	GL_BLEND_SRC_RGB_EXT = 0x80C9,
	GL_BLEND_SRC_RGB_OES = 0x80C9,
	GL_BLEND_DST_ALPHA = 0x80CA,
	GL_BLEND_DST_ALPHA_EXT = 0x80CA,
	GL_BLEND_DST_ALPHA_OES = 0x80CA,
	GL_BLEND_SRC_ALPHA = 0x80CB,
	GL_BLEND_SRC_ALPHA_EXT = 0x80CB,
	GL_BLEND_SRC_ALPHA_OES = 0x80CB,
	GL_422_EXT = 0x80CC,
	GL_422_REV_EXT = 0x80CD,
	GL_422_AVERAGE_EXT = 0x80CE,
	GL_422_REV_AVERAGE_EXT = 0x80CF,
};
typedef enum {
	GL_COLOR_TABLE = 0x80D0,
	GL_COLOR_TABLE_SGI = 0x80D0,
	GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1,
	GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1,
	GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2,
	GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2,
	GL_PROXY_COLOR_TABLE = 0x80D3,
	GL_PROXY_COLOR_TABLE_SGI = 0x80D3,
	GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4,
	GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4,
	GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5,
	GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5,
	GL_COLOR_TABLE_SCALE = 0x80D6,
	GL_COLOR_TABLE_SCALE_SGI = 0x80D6,
	GL_COLOR_TABLE_BIAS = 0x80D7,
	GL_COLOR_TABLE_BIAS_SGI = 0x80D7,
	GL_COLOR_TABLE_FORMAT = 0x80D8,
	GL_COLOR_TABLE_FORMAT_SGI = 0x80D8,
	GL_COLOR_TABLE_WIDTH = 0x80D9,
	GL_COLOR_TABLE_WIDTH_SGI = 0x80D9,
	GL_COLOR_TABLE_RED_SIZE = 0x80DA,
	GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA,
	GL_COLOR_TABLE_GREEN_SIZE = 0x80DB,
	GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB,
	GL_COLOR_TABLE_BLUE_SIZE = 0x80DC,
	GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC,
	GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD,
	GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD,
	GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE,
	GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE,
	GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF,
	GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF,
};
typedef enum {
	GL_BGR = 0x80E0,
	GL_BGR_EXT = 0x80E0,
	GL_BGRA = 0x80E1,
	GL_BGRA_EXT = 0x80E1,
	GL_BGRA_IMG = 0x80E1,
	GL_COLOR_INDEX1_EXT = 0x80E2,
	GL_COLOR_INDEX2_EXT = 0x80E3,
	GL_COLOR_INDEX4_EXT = 0x80E4,
	GL_COLOR_INDEX8_EXT = 0x80E5,
	GL_COLOR_INDEX12_EXT = 0x80E6,
	GL_COLOR_INDEX16_EXT = 0x80E7,
	GL_MAX_ELEMENTS_VERTICES = 0x80E8,
	GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8,
	GL_MAX_ELEMENTS_INDICES = 0x80E9,
	GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9,
	GL_PHONG_WIN = 0x80EA,
	GL_PHONG_HINT_WIN = 0x80EB,
	GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC,
	GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED,
	GL_PARAMETER_BUFFER = 0x80EE,
	GL_PARAMETER_BUFFER_ARB = 0x80EE,
	GL_PARAMETER_BUFFER_BINDING = 0x80EF,
	GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF,
	GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0,
};
typedef enum {
	GL_DUAL_ALPHA4_SGIS = 0x8110,
	GL_DUAL_ALPHA8_SGIS = 0x8111,
	GL_DUAL_ALPHA12_SGIS = 0x8112,
	GL_DUAL_ALPHA16_SGIS = 0x8113,
	GL_DUAL_LUMINANCE4_SGIS = 0x8114,
	GL_DUAL_LUMINANCE8_SGIS = 0x8115,
	GL_DUAL_LUMINANCE12_SGIS = 0x8116,
	GL_DUAL_LUMINANCE16_SGIS = 0x8117,
	GL_DUAL_INTENSITY4_SGIS = 0x8118,
	GL_DUAL_INTENSITY8_SGIS = 0x8119,
	GL_DUAL_INTENSITY12_SGIS = 0x811A,
	GL_DUAL_INTENSITY16_SGIS = 0x811B,
	GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C,
	GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D,
	GL_QUAD_ALPHA4_SGIS = 0x811E,
	GL_QUAD_ALPHA8_SGIS = 0x811F,
	GL_QUAD_LUMINANCE4_SGIS = 0x8120,
	GL_QUAD_LUMINANCE8_SGIS = 0x8121,
	GL_QUAD_INTENSITY4_SGIS = 0x8122,
	GL_QUAD_INTENSITY8_SGIS = 0x8123,
	GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124,
	GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125,
	GL_POINT_SIZE_MIN = 0x8126,
	GL_POINT_SIZE_MIN_ARB = 0x8126,
	GL_POINT_SIZE_MIN_EXT = 0x8126,
	GL_POINT_SIZE_MIN_SGIS = 0x8126,
	GL_POINT_SIZE_MAX = 0x8127,
	GL_POINT_SIZE_MAX_ARB = 0x8127,
	GL_POINT_SIZE_MAX_EXT = 0x8127,
	GL_POINT_SIZE_MAX_SGIS = 0x8127,
	GL_POINT_FADE_THRESHOLD_SIZE = 0x8128,
	GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128,
	GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128,
	GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128,
	GL_DISTANCE_ATTENUATION_EXT = 0x8129,
	GL_DISTANCE_ATTENUATION_SGIS = 0x8129,
	GL_POINT_DISTANCE_ATTENUATION = 0x8129,
	GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129,
	GL_FOG_FUNC_SGIS = 0x812A,
	GL_FOG_FUNC_POINTS_SGIS = 0x812B,
	GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C,
	GL_CLAMP_TO_BORDER = 0x812D,
	GL_CLAMP_TO_BORDER_ARB = 0x812D,
	GL_CLAMP_TO_BORDER_EXT = 0x812D,
	GL_CLAMP_TO_BORDER_NV = 0x812D,
	GL_CLAMP_TO_BORDER_SGIS = 0x812D,
	GL_CLAMP_TO_BORDER_OES = 0x812D,
	GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E,
	GL_CLAMP_TO_EDGE = 0x812F,
	GL_CLAMP_TO_EDGE_SGIS = 0x812F,
	GL_PACK_SKIP_VOLUMES_SGIS = 0x8130,
	GL_PACK_IMAGE_DEPTH_SGIS = 0x8131,
	GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132,
	GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133,
	GL_TEXTURE_4D_SGIS = 0x8134,
	GL_PROXY_TEXTURE_4D_SGIS = 0x8135,
	GL_TEXTURE_4DSIZE_SGIS = 0x8136,
	GL_TEXTURE_WRAP_Q_SGIS = 0x8137,
	GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138,
	GL_PIXEL_TEX_GEN_SGIX = 0x8139,
	GL_TEXTURE_MIN_LOD = 0x813A,
	GL_TEXTURE_MIN_LOD_SGIS = 0x813A,
	GL_TEXTURE_MAX_LOD = 0x813B,
	GL_TEXTURE_MAX_LOD_SGIS = 0x813B,
	GL_TEXTURE_BASE_LEVEL = 0x813C,
	GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C,
	GL_TEXTURE_MAX_LEVEL = 0x813D,
	GL_TEXTURE_MAX_LEVEL_APPLE = 0x813D,
	GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D,
	GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E,
	GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F,
	GL_PIXEL_TILE_WIDTH_SGIX = 0x8140,
	GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141,
	GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142,
	GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143,
	GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144,
	GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145,
	GL_FILTER4_SGIS = 0x8146,
	GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147,
	GL_SPRITE_SGIX = 0x8148,
	GL_SPRITE_MODE_SGIX = 0x8149,
	GL_SPRITE_AXIS_SGIX = 0x814A,
	GL_SPRITE_TRANSLATION_SGIX = 0x814B,
	GL_SPRITE_AXIAL_SGIX = 0x814C,
	GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D,
	GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E,
	GL_TEXTURE_4D_BINDING_SGIS = 0x814F,
};
typedef enum {
	GL_IGNORE_BORDER_HP = 0x8150,
	GL_CONSTANT_BORDER = 0x8151,
	GL_CONSTANT_BORDER_HP = 0x8151,
	GL_REPLICATE_BORDER = 0x8153,
	GL_REPLICATE_BORDER_HP = 0x8153,
	GL_CONVOLUTION_BORDER_COLOR = 0x8154,
	GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154,
	GL_IMAGE_SCALE_X_HP = 0x8155,
	GL_IMAGE_SCALE_Y_HP = 0x8156,
	GL_IMAGE_TRANSLATE_X_HP = 0x8157,
	GL_IMAGE_TRANSLATE_Y_HP = 0x8158,
	GL_IMAGE_ROTATE_ANGLE_HP = 0x8159,
	GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A,
	GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B,
	GL_IMAGE_MAG_FILTER_HP = 0x815C,
	GL_IMAGE_MIN_FILTER_HP = 0x815D,
	GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E,
	GL_CUBIC_HP = 0x815F,
	GL_AVERAGE_HP = 0x8160,
	GL_IMAGE_TRANSFORM_2D_HP = 0x8161,
	GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162,
	GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163,
	GL_OCCLUSION_TEST_HP = 0x8165,
	GL_OCCLUSION_TEST_RESULT_HP = 0x8166,
	GL_TEXTURE_LIGHTING_MODE_HP = 0x8167,
	GL_TEXTURE_POST_SPECULAR_HP = 0x8168,
	GL_TEXTURE_PRE_SPECULAR_HP = 0x8169,
};
typedef enum {
	GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170,
	GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171,
	GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172,
	GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173,
	GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174,
	GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175,
	GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176,
	GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177,
	GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178,
	GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179,
	GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A,
	GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B,
	GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C,
	GL_REFERENCE_PLANE_SGIX = 0x817D,
	GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E,
	GL_IR_INSTRUMENT1_SGIX = 0x817F,
	GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180,
	GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181,
	GL_LIST_PRIORITY_SGIX = 0x8182,
	GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183,
	GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184,
	GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185,
	GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186,
	GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187,
	GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188,
	GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189,
	GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A,
	GL_FRAMEZOOM_SGIX = 0x818B,
	GL_FRAMEZOOM_FACTOR_SGIX = 0x818C,
	GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D,
	GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E,
	GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F,
	GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190,
	GL_GENERATE_MIPMAP = 0x8191,
	GL_GENERATE_MIPMAP_SGIS = 0x8191,
	GL_GENERATE_MIPMAP_HINT = 0x8192,
	GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192,
	GL_GEOMETRY_DEFORMATION_SGIX = 0x8194,
	GL_TEXTURE_DEFORMATION_SGIX = 0x8195,
	GL_DEFORMATIONS_MASK_SGIX = 0x8196,
	GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197,
	GL_FOG_OFFSET_SGIX = 0x8198,
	GL_FOG_OFFSET_VALUE_SGIX = 0x8199,
	GL_TEXTURE_COMPARE_SGIX = 0x819A,
	GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B,
	GL_TEXTURE_LEQUAL_R_SGIX = 0x819C,
	GL_TEXTURE_GEQUAL_R_SGIX = 0x819D,
	GL_DEPTH_COMPONENT16 = 0x81A5,
	GL_DEPTH_COMPONENT16_ARB = 0x81A5,
	GL_DEPTH_COMPONENT16_OES = 0x81A5,
	GL_DEPTH_COMPONENT16_SGIX = 0x81A5,
	GL_DEPTH_COMPONENT24 = 0x81A6,
	GL_DEPTH_COMPONENT24_ARB = 0x81A6,
	GL_DEPTH_COMPONENT24_OES = 0x81A6,
	GL_DEPTH_COMPONENT24_SGIX = 0x81A6,
	GL_DEPTH_COMPONENT32 = 0x81A7,
	GL_DEPTH_COMPONENT32_ARB = 0x81A7,
	GL_DEPTH_COMPONENT32_OES = 0x81A7,
	GL_DEPTH_COMPONENT32_SGIX = 0x81A7,
	GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8,
	GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9,
	GL_CULL_VERTEX_EXT = 0x81AA,
	GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB,
	GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC,
	GL_IUI_V2F_EXT = 0x81AD,
	GL_IUI_V3F_EXT = 0x81AE,
	GL_IUI_N3F_V2F_EXT = 0x81AF,
	GL_IUI_N3F_V3F_EXT = 0x81B0,
	GL_T2F_IUI_V2F_EXT = 0x81B1,
	GL_T2F_IUI_V3F_EXT = 0x81B2,
	GL_T2F_IUI_N3F_V2F_EXT = 0x81B3,
	GL_T2F_IUI_N3F_V3F_EXT = 0x81B4,
	GL_INDEX_TEST_EXT = 0x81B5,
	GL_INDEX_TEST_FUNC_EXT = 0x81B6,
	GL_INDEX_TEST_REF_EXT = 0x81B7,
	GL_INDEX_MATERIAL_EXT = 0x81B8,
	GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9,
	GL_INDEX_MATERIAL_FACE_EXT = 0x81BA,
	GL_YCRCB_422_SGIX = 0x81BB,
	GL_YCRCB_444_SGIX = 0x81BC,
};
typedef enum {
	GL_WRAP_BORDER_SUN = 0x81D4,
	GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5,
	GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6,
	GL_TRIANGLE_LIST_SUN = 0x81D7,
	GL_REPLACEMENT_CODE_SUN = 0x81D8,
	GL_GLOBAL_ALPHA_SUN = 0x81D9,
	GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA,
};
typedef enum {
	GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF,
	GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0,
	GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1,
	GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2,
	GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3,
	GL_EYE_POINT_SGIS = 0x81F4,
	GL_OBJECT_POINT_SGIS = 0x81F5,
	GL_EYE_LINE_SGIS = 0x81F6,
	GL_OBJECT_LINE_SGIS = 0x81F7,
	GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8,
	GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8,
	GL_SINGLE_COLOR = 0x81F9,
	GL_SINGLE_COLOR_EXT = 0x81F9,
	GL_SEPARATE_SPECULAR_COLOR = 0x81FA,
	GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA,
	GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB,
};
typedef enum {
	GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200,
}; // Range released by MS 2002/9/16
typedef enum {
	GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,
	GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210,
	GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211,
	GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211,
	GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,
	GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213,
	GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214,
	GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215,
	GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216,
	GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217,
	GL_FRAMEBUFFER_DEFAULT = 0x8218,
	GL_FRAMEBUFFER_UNDEFINED = 0x8219,
	GL_FRAMEBUFFER_UNDEFINED_OES = 0x8219,
	GL_DEPTH_STENCIL_ATTACHMENT = 0x821A,
	GL_MAJOR_VERSION = 0x821B,
	GL_MINOR_VERSION = 0x821C,
	GL_NUM_EXTENSIONS = 0x821D,
	GL_CONTEXT_FLAGS = 0x821E,
	GL_BUFFER_IMMUTABLE_STORAGE = 0x821F,
	GL_BUFFER_IMMUTABLE_STORAGE_EXT = 0x821F,
	GL_BUFFER_STORAGE_FLAGS = 0x8220,
	GL_BUFFER_STORAGE_FLAGS_EXT = 0x8220,
	GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221,
	GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 0x8221,
	GL_INDEX = 0x8222,
	GL_COMPRESSED_RED = 0x8225,
	GL_COMPRESSED_RG = 0x8226,
	GL_RG = 0x8227,
	GL_RG_EXT = 0x8227,
	GL_RG_INTEGER = 0x8228,
	GL_R8 = 0x8229,
	GL_R8_EXT = 0x8229,
	GL_R16 = 0x822A,
	GL_R16_EXT = 0x822A,
	GL_RG8 = 0x822B,
	GL_RG8_EXT = 0x822B,
	GL_RG16 = 0x822C,
	GL_RG16_EXT = 0x822C,
	GL_R16F = 0x822D,
	GL_R16F_EXT = 0x822D,
	GL_R32F = 0x822E,
	GL_R32F_EXT = 0x822E,
	GL_RG16F = 0x822F,
	GL_RG16F_EXT = 0x822F,
	GL_RG32F = 0x8230,
	GL_RG32F_EXT = 0x8230,
	GL_R8I = 0x8231,
	GL_R8UI = 0x8232,
	GL_R16I = 0x8233,
	GL_R16UI = 0x8234,
	GL_R32I = 0x8235,
	GL_R32UI = 0x8236,
	GL_RG8I = 0x8237,
	GL_RG8UI = 0x8238,
	GL_RG16I = 0x8239,
	GL_RG16UI = 0x823A,
	GL_RG32I = 0x823B,
	GL_RG32UI = 0x823C,
};
typedef enum {
	GL_SYNC_CL_EVENT_ARB = 0x8240,
	GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241,
	GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242,
	GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242,
	GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242,
	GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243,
	GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243,
	GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243,
	GL_DEBUG_CALLBACK_FUNCTION = 0x8244,
	GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244,
	GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244,
	GL_DEBUG_CALLBACK_USER_PARAM = 0x8245,
	GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245,
	GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245,
	GL_DEBUG_SOURCE_API = 0x8246,
	GL_DEBUG_SOURCE_API_ARB = 0x8246,
	GL_DEBUG_SOURCE_API_KHR = 0x8246,
	GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247,
	GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247,
	GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247,
	GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248,
	GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248,
	GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248,
	GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249,
	GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249,
	GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249,
	GL_DEBUG_SOURCE_APPLICATION = 0x824A,
	GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A,
	GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824A,
	GL_DEBUG_SOURCE_OTHER = 0x824B,
	GL_DEBUG_SOURCE_OTHER_ARB = 0x824B,
	GL_DEBUG_SOURCE_OTHER_KHR = 0x824B,
	GL_DEBUG_TYPE_ERROR = 0x824C,
	GL_DEBUG_TYPE_ERROR_ARB = 0x824C,
	GL_DEBUG_TYPE_ERROR_KHR = 0x824C,
	GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D,
	GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D,
	GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D,
	GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E,
	GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E,
	GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E,
	GL_DEBUG_TYPE_PORTABILITY = 0x824F,
	GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F,
	GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824F,
	GL_DEBUG_TYPE_PERFORMANCE = 0x8250,
	GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250,
	GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250,
	GL_DEBUG_TYPE_OTHER = 0x8251,
	GL_DEBUG_TYPE_OTHER_ARB = 0x8251,
	GL_DEBUG_TYPE_OTHER_KHR = 0x8251,
	GL_LOSE_CONTEXT_ON_RESET = 0x8252,
	GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252,
	GL_LOSE_CONTEXT_ON_RESET_EXT = 0x8252,
	GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252,
	GL_GUILTY_CONTEXT_RESET = 0x8253,
	GL_GUILTY_CONTEXT_RESET_ARB = 0x8253,
	GL_GUILTY_CONTEXT_RESET_EXT = 0x8253,
	GL_GUILTY_CONTEXT_RESET_KHR = 0x8253,
	GL_INNOCENT_CONTEXT_RESET = 0x8254,
	GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254,
	GL_INNOCENT_CONTEXT_RESET_EXT = 0x8254,
	GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254,
	GL_UNKNOWN_CONTEXT_RESET = 0x8255,
	GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255,
	GL_UNKNOWN_CONTEXT_RESET_EXT = 0x8255,
	GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255,
	GL_RESET_NOTIFICATION_STRATEGY = 0x8256,
	GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256,
	GL_RESET_NOTIFICATION_STRATEGY_EXT = 0x8256,
	GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256,
	GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257,
	GL_PROGRAM_SEPARABLE = 0x8258,
	GL_PROGRAM_SEPARABLE_EXT = 0x8258,
	GL_ACTIVE_PROGRAM = 0x8259,
	GL_ACTIVE_PROGRAM_EXT = 0x8259, // For the OpenGL ES version of EXT_separate_shader_objects
	GL_PROGRAM_PIPELINE_BINDING = 0x825A,
	GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825A,
	GL_MAX_VIEWPORTS = 0x825B,
	GL_MAX_VIEWPORTS_NV = 0x825B,
	GL_MAX_VIEWPORTS_OES = 0x825B,
	GL_VIEWPORT_SUBPIXEL_BITS = 0x825C,
	GL_VIEWPORT_SUBPIXEL_BITS_EXT = 0x825C,
	GL_VIEWPORT_SUBPIXEL_BITS_NV = 0x825C,
	GL_VIEWPORT_SUBPIXEL_BITS_OES = 0x825C,
	GL_VIEWPORT_BOUNDS_RANGE = 0x825D,
	GL_VIEWPORT_BOUNDS_RANGE_EXT = 0x825D,
	GL_VIEWPORT_BOUNDS_RANGE_NV = 0x825D,
	GL_VIEWPORT_BOUNDS_RANGE_OES = 0x825D,
	GL_LAYER_PROVOKING_VERTEX = 0x825E,
	GL_LAYER_PROVOKING_VERTEX_EXT = 0x825E,
	GL_LAYER_PROVOKING_VERTEX_OES = 0x825E,
	GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F,
	GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT = 0x825F,
	GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 0x825F,
	GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 0x825F,
	GL_UNDEFINED_VERTEX = 0x8260,
	GL_UNDEFINED_VERTEX_EXT = 0x8260,
	GL_UNDEFINED_VERTEX_OES = 0x8260,
	GL_NO_RESET_NOTIFICATION = 0x8261,
	GL_NO_RESET_NOTIFICATION_ARB = 0x8261,
	GL_NO_RESET_NOTIFICATION_EXT = 0x8261,
	GL_NO_RESET_NOTIFICATION_KHR = 0x8261,
	GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262,
	GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263,
	GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264,
	GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265,
	GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266,
	GL_COMPUTE_WORK_GROUP_SIZE = 0x8267,
	GL_DEBUG_TYPE_MARKER = 0x8268,
	GL_DEBUG_TYPE_MARKER_KHR = 0x8268,
	GL_DEBUG_TYPE_PUSH_GROUP = 0x8269,
	GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269,
	GL_DEBUG_TYPE_POP_GROUP = 0x826A,
	GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826A,
	GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B,
	GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B,
	GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C,
	GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C,
	GL_DEBUG_GROUP_STACK_DEPTH = 0x826D,
	GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D,
	GL_MAX_UNIFORM_LOCATIONS = 0x826E,
	GL_INTERNALFORMAT_SUPPORTED = 0x826F,
	GL_INTERNALFORMAT_PREFERRED = 0x8270,
	GL_INTERNALFORMAT_RED_SIZE = 0x8271,
	GL_INTERNALFORMAT_GREEN_SIZE = 0x8272,
	GL_INTERNALFORMAT_BLUE_SIZE = 0x8273,
	GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274,
	GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275,
	GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276,
	GL_INTERNALFORMAT_SHARED_SIZE = 0x8277,
	GL_INTERNALFORMAT_RED_TYPE = 0x8278,
	GL_INTERNALFORMAT_GREEN_TYPE = 0x8279,
	GL_INTERNALFORMAT_BLUE_TYPE = 0x827A,
	GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B,
	GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C,
	GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D,
	GL_MAX_WIDTH = 0x827E,
	GL_MAX_HEIGHT = 0x827F,
	GL_MAX_DEPTH = 0x8280,
	GL_MAX_LAYERS = 0x8281,
	GL_MAX_COMBINED_DIMENSIONS = 0x8282,
	GL_COLOR_COMPONENTS = 0x8283,
	GL_DEPTH_COMPONENTS = 0x8284,
	GL_STENCIL_COMPONENTS = 0x8285,
	GL_COLOR_RENDERABLE = 0x8286,
	GL_DEPTH_RENDERABLE = 0x8287,
	GL_STENCIL_RENDERABLE = 0x8288,
	GL_FRAMEBUFFER_RENDERABLE = 0x8289,
	GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A,
	GL_FRAMEBUFFER_BLEND = 0x828B,
	GL_READ_PIXELS = 0x828C,
	GL_READ_PIXELS_FORMAT = 0x828D,
	GL_READ_PIXELS_TYPE = 0x828E,
	GL_TEXTURE_IMAGE_FORMAT = 0x828F,
	GL_TEXTURE_IMAGE_TYPE = 0x8290,
	GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291,
	GL_GET_TEXTURE_IMAGE_TYPE = 0x8292,
	GL_MIPMAP = 0x8293,
	GL_MANUAL_GENERATE_MIPMAP = 0x8294,
	GL_AUTO_GENERATE_MIPMAP = 0x8295, // Should be deprecated
	GL_COLOR_ENCODING = 0x8296,
	GL_SRGB_READ = 0x8297,
	GL_SRGB_WRITE = 0x8298,
	GL_SRGB_DECODE_ARB = 0x8299,
	GL_FILTER = 0x829A,
	GL_VERTEX_TEXTURE = 0x829B,
	GL_TESS_CONTROL_TEXTURE = 0x829C,
	GL_TESS_EVALUATION_TEXTURE = 0x829D,
	GL_GEOMETRY_TEXTURE = 0x829E,
	GL_FRAGMENT_TEXTURE = 0x829F,
	GL_COMPUTE_TEXTURE = 0x82A0,
	GL_TEXTURE_SHADOW = 0x82A1,
	GL_TEXTURE_GATHER = 0x82A2,
	GL_TEXTURE_GATHER_SHADOW = 0x82A3,
	GL_SHADER_IMAGE_LOAD = 0x82A4,
	GL_SHADER_IMAGE_STORE = 0x82A5,
	GL_SHADER_IMAGE_ATOMIC = 0x82A6,
	GL_IMAGE_TEXEL_SIZE = 0x82A7,
	GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8,
	GL_IMAGE_PIXEL_FORMAT = 0x82A9,
	GL_IMAGE_PIXEL_TYPE = 0x82AA,
	GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC,
	GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD,
	GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE,
	GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF,
}; // Range released by MS on 2002/9/16
typedef enum {
	GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1,
	GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2,
	GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3,
	GL_CLEAR_BUFFER = 0x82B4,
	GL_TEXTURE_VIEW = 0x82B5,
	GL_VIEW_COMPATIBILITY_CLASS = 0x82B6,
	GL_FULL_SUPPORT = 0x82B7,
	GL_CAVEAT_SUPPORT = 0x82B8,
	GL_IMAGE_CLASS_4_X_32 = 0x82B9,
	GL_IMAGE_CLASS_2_X_32 = 0x82BA,
	GL_IMAGE_CLASS_1_X_32 = 0x82BB,
	GL_IMAGE_CLASS_4_X_16 = 0x82BC,
	GL_IMAGE_CLASS_2_X_16 = 0x82BD,
	GL_IMAGE_CLASS_1_X_16 = 0x82BE,
	GL_IMAGE_CLASS_4_X_8 = 0x82BF,
	GL_IMAGE_CLASS_2_X_8 = 0x82C0,
	GL_IMAGE_CLASS_1_X_8 = 0x82C1,
	GL_IMAGE_CLASS_11_11_10 = 0x82C2,
	GL_IMAGE_CLASS_10_10_10_2 = 0x82C3,
	GL_VIEW_CLASS_128_BITS = 0x82C4,
	GL_VIEW_CLASS_96_BITS = 0x82C5,
	GL_VIEW_CLASS_64_BITS = 0x82C6,
	GL_VIEW_CLASS_48_BITS = 0x82C7,
	GL_VIEW_CLASS_32_BITS = 0x82C8,
	GL_VIEW_CLASS_24_BITS = 0x82C9,
	GL_VIEW_CLASS_16_BITS = 0x82CA,
	GL_VIEW_CLASS_8_BITS = 0x82CB,
	GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC,
	GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD,
	GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE,
	GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF,
	GL_VIEW_CLASS_RGTC1_RED = 0x82D0,
	GL_VIEW_CLASS_RGTC2_RG = 0x82D1,
	GL_VIEW_CLASS_BPTC_UNORM = 0x82D2,
	GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3,
	GL_VERTEX_ATTRIB_BINDING = 0x82D4,
	GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5,
	GL_VERTEX_BINDING_DIVISOR = 0x82D6,
	GL_VERTEX_BINDING_OFFSET = 0x82D7,
	GL_VERTEX_BINDING_STRIDE = 0x82D8,
	GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9,
	GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA,
	GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB,
	GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 0x82DB,
	GL_TEXTURE_VIEW_MIN_LEVEL_OES = 0x82DB,
	GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC,
	GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 0x82DC,
	GL_TEXTURE_VIEW_NUM_LEVELS_OES = 0x82DC,
	GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD,
	GL_TEXTURE_VIEW_MIN_LAYER_EXT = 0x82DD,
	GL_TEXTURE_VIEW_MIN_LAYER_OES = 0x82DD,
	GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE,
	GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 0x82DE,
	GL_TEXTURE_VIEW_NUM_LAYERS_OES = 0x82DE,
	GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF,
	GL_BUFFER = 0x82E0,
	GL_BUFFER_KHR = 0x82E0,
	GL_SHADER = 0x82E1,
	GL_SHADER_KHR = 0x82E1,
	GL_PROGRAM = 0x82E2,
	GL_PROGRAM_KHR = 0x82E2,
	GL_QUERY = 0x82E3,
	GL_QUERY_KHR = 0x82E3,
	GL_PROGRAM_PIPELINE = 0x82E4,
	GL_PROGRAM_PIPELINE_KHR = 0x82E4,
	GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5,
	GL_SAMPLER = 0x82E6,
	GL_SAMPLER_KHR = 0x82E6,
	GL_DISPLAY_LIST = 0x82E7,
	GL_MAX_LABEL_LENGTH = 0x82E8,
	GL_MAX_LABEL_LENGTH_KHR = 0x82E8,
	GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9,
	GL_QUERY_TARGET = 0x82EA,
	GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC,
	GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC,
	GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED,
	GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED,
	GL_VERTICES_SUBMITTED = 0x82EE,
	GL_VERTICES_SUBMITTED_ARB = 0x82EE,
	GL_PRIMITIVES_SUBMITTED = 0x82EF,
	GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF,
	GL_VERTEX_SHADER_INVOCATIONS = 0x82F0,
	GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0,
	GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1,
	GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1,
	GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2,
	GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2,
	GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3,
	GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3,
	GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4,
	GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4,
	GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5,
	GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5,
	GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6,
	GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6,
	GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7,
	GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7,
	GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8,
	GL_MAX_CULL_DISTANCES = 0x82F9,
	GL_MAX_CULL_DISTANCES_EXT = 0x82F9,
	GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA,
	GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 0x82FA,
	GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB,
	GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB,
	GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC,
	GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC,
	GL_ROBUST_GPU_TIMEOUT_MS_KHR = 0x82FD, // Reserved for future
}; // Range reclaimed from ADD on 2012/05/10
typedef enum {
	GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x8310,
	GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311,
	GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312,
	GL_FRAGMENTS_INSTRUMENT_SGIX = 0x8313,
	GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = 0x8314,
	GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = 0x8315,
	GL_CONVOLUTION_HINT_SGIX = 0x8316,
	GL_YCRCB_SGIX = 0x8318,
	GL_YCRCBA_SGIX = 0x8319,
	GL_UNPACK_COMPRESSED_SIZE_SGIX = 0x831A,
	GL_PACK_MAX_COMPRESSED_SIZE_SGIX = 0x831B,
	GL_PACK_COMPRESSED_SIZE_SGIX = 0x831C,
	GL_SLIM8U_SGIX = 0x831D,
	GL_SLIM10U_SGIX = 0x831E,
	GL_SLIM12S_SGIX = 0x831F,
	GL_ALPHA_MIN_SGIX = 0x8320,
	GL_ALPHA_MAX_SGIX = 0x8321,
	GL_SCALEBIAS_HINT_SGIX = 0x8322,
	GL_ASYNC_MARKER_SGIX = 0x8329,
	GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B,
	GL_ASYNC_HISTOGRAM_SGIX = 0x832C,
	GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D,
};
typedef enum {
	GL_PIXEL_TRANSFORM_2D_EXT = 0x8330,
	GL_PIXEL_MAG_FILTER_EXT = 0x8331,
	GL_PIXEL_MIN_FILTER_EXT = 0x8332,
	GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333,
	GL_CUBIC_EXT = 0x8334,
	GL_AVERAGE_EXT = 0x8335,
	GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336,
	GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337,
	GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338,
};
typedef enum {
	GL_FRAGMENT_MATERIAL_EXT = 0x8349,
	GL_FRAGMENT_NORMAL_EXT = 0x834A,
	GL_FRAGMENT_COLOR_EXT = 0x834C,
	GL_ATTENUATION_EXT = 0x834D,
	GL_SHADOW_ATTENUATION_EXT = 0x834E,
	GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F,
	GL_TEXTURE_LIGHT_EXT = 0x8350,
	GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351,
	GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352,
	GL_PIXEL_TEXTURE_SGIS = 0x8353,
	GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354,
	GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355,
	GL_PIXEL_GROUP_COLOR_SGIS = 0x8356,
	GL_LINE_QUALITY_HINT_SGIX = 0x835B,
	GL_ASYNC_TEX_IMAGE_SGIX = 0x835C,
	GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D,
	GL_ASYNC_READ_PIXELS_SGIX = 0x835E,
	GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F,
	GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360,
	GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361,
	GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362,
	GL_UNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362,
	GL_UNSIGNED_SHORT_5_6_5 = 0x8363,
	GL_UNSIGNED_SHORT_5_6_5_EXT = 0x8363,
	GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364,
	GL_UNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364,
	GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365,
	GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365,
	GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365,
	GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366,
	GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366,
	GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367,
	GL_UNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367,
	GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368,
	GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368,
	GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369,
	GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A,
	GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B,
};
typedef enum {
	GL_MIRRORED_REPEAT = 0x8370,
	GL_MIRRORED_REPEAT_ARB = 0x8370,
	GL_MIRRORED_REPEAT_IBM = 0x8370,
	GL_MIRRORED_REPEAT_OES = 0x8370,
};
typedef enum {
};
typedef enum {
	GL_RGB_S3TC = 0x83A0,
	GL_RGB4_S3TC = 0x83A1,
	GL_RGBA_S3TC = 0x83A2,
	GL_RGBA4_S3TC = 0x83A3,
	GL_RGBA_DXT5_S3TC = 0x83A4,
	GL_RGBA4_DXT5_S3TC = 0x83A5,
};
typedef enum {
	GL_VERTEX_PRECLIP_SGIX = 0x83EE,
	GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF,
}; // Most of this could be reclaimed
typedef enum {
	GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,
	GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,
	GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2,
	GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,
	GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3,
	GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,
	GL_PARALLEL_ARRAYS_INTEL = 0x83F4,
	GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5,
	GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6,
	GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7,
	GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8,
	GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9,
	GL_PERFQUERY_FLUSH_INTEL = 0x83FA,
	GL_PERFQUERY_WAIT_INTEL = 0x83FB,
	GL_BLACKHOLE_RENDER_INTEL = 0x83FC,
	GL_CONSERVATIVE_RASTERIZATION_INTEL = 0x83FE,
	GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF,
};
typedef enum {
	GL_FRAGMENT_LIGHTING_SGIX = 0x8400,
	GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401,
	GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402,
	GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403,
	GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404,
	GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405,
	GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406,
	GL_LIGHT_ENV_MODE_SGIX = 0x8407,
	GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408,
	GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409,
	GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A,
	GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B,
	GL_FRAGMENT_LIGHT0_SGIX = 0x840C,
	GL_FRAGMENT_LIGHT1_SGIX = 0x840D,
	GL_FRAGMENT_LIGHT2_SGIX = 0x840E,
	GL_FRAGMENT_LIGHT3_SGIX = 0x840F,
	GL_FRAGMENT_LIGHT4_SGIX = 0x8410,
	GL_FRAGMENT_LIGHT5_SGIX = 0x8411,
	GL_FRAGMENT_LIGHT6_SGIX = 0x8412,
	GL_FRAGMENT_LIGHT7_SGIX = 0x8413,
	GL_PACK_RESAMPLE_SGIX = 0x842E, // Formerly 0x842C in SGI specfile
	GL_UNPACK_RESAMPLE_SGIX = 0x842F, // Formerly 0x842D in SGI specfile
	GL_RESAMPLE_DECIMATE_SGIX = 0x8430, // Formerly 0x8430 in SGI specfile
	GL_RESAMPLE_REPLICATE_SGIX = 0x8433, // Formerly 0x842E in SGI specfile
	GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434, // Formerly 0x842F in SGI specfile
	GL_TANGENT_ARRAY_EXT = 0x8439,
	GL_BINORMAL_ARRAY_EXT = 0x843A,
	GL_CURRENT_TANGENT_EXT = 0x843B,
	GL_CURRENT_BINORMAL_EXT = 0x843C,
	GL_TANGENT_ARRAY_TYPE_EXT = 0x843E,
	GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F,
	GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440,
	GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441,
	GL_TANGENT_ARRAY_POINTER_EXT = 0x8442,
	GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443,
	GL_MAP1_TANGENT_EXT = 0x8444,
	GL_MAP2_TANGENT_EXT = 0x8445,
	GL_MAP1_BINORMAL_EXT = 0x8446,
	GL_MAP2_BINORMAL_EXT = 0x8447,
	GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D,
	GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E,
	GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F,
	GL_FOG_COORDINATE_SOURCE = 0x8450,
	GL_FOG_COORDINATE_SOURCE_EXT = 0x8450,
	GL_FOG_COORD_SRC = 0x8450,
	GL_FOG_COORDINATE = 0x8451,
	GL_FOG_COORD = 0x8451,
	GL_FOG_COORDINATE_EXT = 0x8451,
	GL_FRAGMENT_DEPTH = 0x8452,
	GL_FRAGMENT_DEPTH_EXT = 0x8452,
	GL_CURRENT_FOG_COORDINATE = 0x8453,
	GL_CURRENT_FOG_COORD = 0x8453,
	GL_CURRENT_FOG_COORDINATE_EXT = 0x8453,
	GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454,
	GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454,
	GL_FOG_COORD_ARRAY_TYPE = 0x8454,
	GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455,
	GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455,
	GL_FOG_COORD_ARRAY_STRIDE = 0x8455,
	GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456,
	GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456,
	GL_FOG_COORD_ARRAY_POINTER = 0x8456,
	GL_FOG_COORDINATE_ARRAY = 0x8457,
	GL_FOG_COORDINATE_ARRAY_EXT = 0x8457,
	GL_FOG_COORD_ARRAY = 0x8457,
	GL_COLOR_SUM = 0x8458,
	GL_COLOR_SUM_ARB = 0x8458,
	GL_COLOR_SUM_EXT = 0x8458,
	GL_CURRENT_SECONDARY_COLOR = 0x8459,
	GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459,
	GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A,
	GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A,
	GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B,
	GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B,
	GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C,
	GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C,
	GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D,
	GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D,
	GL_SECONDARY_COLOR_ARRAY = 0x845E,
	GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E,
	GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F,
	GL_ALIASED_POINT_SIZE_RANGE = 0x846D,
	GL_ALIASED_LINE_WIDTH_RANGE = 0x846E,
};
typedef enum {
};
typedef enum {
	GL_SCREEN_COORDINATES_REND = 0x8490,
	GL_INVERTED_SCREEN_W_REND = 0x8491,
};
typedef enum {
};
typedef enum {
	GL_TEXTURE0 = 0x84C0,
	GL_TEXTURE0_ARB = 0x84C0,
	GL_TEXTURE1 = 0x84C1,
	GL_TEXTURE1_ARB = 0x84C1,
	GL_TEXTURE2 = 0x84C2,
	GL_TEXTURE2_ARB = 0x84C2,
	GL_TEXTURE3 = 0x84C3,
	GL_TEXTURE3_ARB = 0x84C3,
	GL_TEXTURE4 = 0x84C4,
	GL_TEXTURE4_ARB = 0x84C4,
	GL_TEXTURE5 = 0x84C5,
	GL_TEXTURE5_ARB = 0x84C5,
	GL_TEXTURE6 = 0x84C6,
	GL_TEXTURE6_ARB = 0x84C6,
	GL_TEXTURE7 = 0x84C7,
	GL_TEXTURE7_ARB = 0x84C7,
	GL_TEXTURE8 = 0x84C8,
	GL_TEXTURE8_ARB = 0x84C8,
	GL_TEXTURE9 = 0x84C9,
	GL_TEXTURE9_ARB = 0x84C9,
	GL_TEXTURE10 = 0x84CA,
	GL_TEXTURE10_ARB = 0x84CA,
	GL_TEXTURE11 = 0x84CB,
	GL_TEXTURE11_ARB = 0x84CB,
	GL_TEXTURE12 = 0x84CC,
	GL_TEXTURE12_ARB = 0x84CC,
	GL_TEXTURE13 = 0x84CD,
	GL_TEXTURE13_ARB = 0x84CD,
	GL_TEXTURE14 = 0x84CE,
	GL_TEXTURE14_ARB = 0x84CE,
	GL_TEXTURE15 = 0x84CF,
	GL_TEXTURE15_ARB = 0x84CF,
	GL_TEXTURE16 = 0x84D0,
	GL_TEXTURE16_ARB = 0x84D0,
	GL_TEXTURE17 = 0x84D1,
	GL_TEXTURE17_ARB = 0x84D1,
	GL_TEXTURE18 = 0x84D2,
	GL_TEXTURE18_ARB = 0x84D2,
	GL_TEXTURE19 = 0x84D3,
	GL_TEXTURE19_ARB = 0x84D3,
	GL_TEXTURE20 = 0x84D4,
	GL_TEXTURE20_ARB = 0x84D4,
	GL_TEXTURE21 = 0x84D5,
	GL_TEXTURE21_ARB = 0x84D5,
	GL_TEXTURE22 = 0x84D6,
	GL_TEXTURE22_ARB = 0x84D6,
	GL_TEXTURE23 = 0x84D7,
	GL_TEXTURE23_ARB = 0x84D7,
	GL_TEXTURE24 = 0x84D8,
	GL_TEXTURE24_ARB = 0x84D8,
	GL_TEXTURE25 = 0x84D9,
	GL_TEXTURE25_ARB = 0x84D9,
	GL_TEXTURE26 = 0x84DA,
	GL_TEXTURE26_ARB = 0x84DA,
	GL_TEXTURE27 = 0x84DB,
	GL_TEXTURE27_ARB = 0x84DB,
	GL_TEXTURE28 = 0x84DC,
	GL_TEXTURE28_ARB = 0x84DC,
	GL_TEXTURE29 = 0x84DD,
	GL_TEXTURE29_ARB = 0x84DD,
	GL_TEXTURE30 = 0x84DE,
	GL_TEXTURE30_ARB = 0x84DE,
	GL_TEXTURE31 = 0x84DF,
	GL_TEXTURE31_ARB = 0x84DF,
	GL_ACTIVE_TEXTURE = 0x84E0,
	GL_ACTIVE_TEXTURE_ARB = 0x84E0,
	GL_CLIENT_ACTIVE_TEXTURE = 0x84E1,
	GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1,
	GL_MAX_TEXTURE_UNITS = 0x84E2,
	GL_MAX_TEXTURE_UNITS_ARB = 0x84E2,
	GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3,
	GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3,
	GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3,
	GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4,
	GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4,
	GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4,
	GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5,
	GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5,
	GL_TRANSPOSE_COLOR_MATRIX = 0x84E6,
	GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6,
	GL_SUBTRACT = 0x84E7,
	GL_SUBTRACT_ARB = 0x84E7,
	GL_MAX_RENDERBUFFER_SIZE = 0x84E8,
	GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8,
	GL_MAX_RENDERBUFFER_SIZE_OES = 0x84E8,
	GL_COMPRESSED_ALPHA = 0x84E9,
	GL_COMPRESSED_ALPHA_ARB = 0x84E9,
	GL_COMPRESSED_LUMINANCE = 0x84EA,
	GL_COMPRESSED_LUMINANCE_ARB = 0x84EA,
	GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB,
	GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB,
	GL_COMPRESSED_INTENSITY = 0x84EC,
	GL_COMPRESSED_INTENSITY_ARB = 0x84EC,
	GL_COMPRESSED_RGB = 0x84ED,
	GL_COMPRESSED_RGB_ARB = 0x84ED,
	GL_COMPRESSED_RGBA = 0x84EE,
	GL_COMPRESSED_RGBA_ARB = 0x84EE,
	GL_TEXTURE_COMPRESSION_HINT = 0x84EF,
	GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF,
};
typedef enum {
	GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0,
	GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1,
	GL_ALL_COMPLETED_NV = 0x84F2,
	GL_FENCE_STATUS_NV = 0x84F3,
	GL_FENCE_CONDITION_NV = 0x84F4,
	GL_TEXTURE_RECTANGLE = 0x84F5,
	GL_TEXTURE_RECTANGLE_ARB = 0x84F5,
	GL_TEXTURE_RECTANGLE_NV = 0x84F5,
	GL_TEXTURE_BINDING_RECTANGLE = 0x84F6,
	GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6,
	GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6,
	GL_PROXY_TEXTURE_RECTANGLE = 0x84F7,
	GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7,
	GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7,
	GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8,
	GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8,
	GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8,
	GL_DEPTH_STENCIL = 0x84F9,
	GL_DEPTH_STENCIL_EXT = 0x84F9,
	GL_DEPTH_STENCIL_NV = 0x84F9,
	GL_DEPTH_STENCIL_OES = 0x84F9,
	GL_UNSIGNED_INT_24_8 = 0x84FA,
	GL_UNSIGNED_INT_24_8_EXT = 0x84FA,
	GL_UNSIGNED_INT_24_8_NV = 0x84FA,
	GL_UNSIGNED_INT_24_8_OES = 0x84FA,
	GL_MAX_TEXTURE_LOD_BIAS = 0x84FD,
	GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD,
	GL_TEXTURE_MAX_ANISOTROPY = 0x84FE,
	GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE,
	GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF,
	GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF,
	GL_TEXTURE_FILTER_CONTROL = 0x8500,
	GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500,
	GL_TEXTURE_LOD_BIAS = 0x8501,
	GL_TEXTURE_LOD_BIAS_EXT = 0x8501,
	GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502,
	GL_COMBINE4_NV = 0x8503,
	GL_MAX_SHININESS_NV = 0x8504,
	GL_MAX_SPOT_EXPONENT_NV = 0x8505,
	GL_MODELVIEW1_MATRIX_EXT = 0x8506,
	GL_INCR_WRAP = 0x8507,
	GL_INCR_WRAP_EXT = 0x8507,
	GL_INCR_WRAP_OES = 0x8507,
	GL_DECR_WRAP = 0x8508,
	GL_DECR_WRAP_EXT = 0x8508,
	GL_DECR_WRAP_OES = 0x8508,
	GL_VERTEX_WEIGHTING_EXT = 0x8509,
	GL_MODELVIEW1_ARB = 0x850A,
	GL_MODELVIEW1_EXT = 0x850A,
	GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B,
	GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C,
	GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D,
	GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E,
	GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F,
	GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510,
	GL_NORMAL_MAP = 0x8511,
	GL_NORMAL_MAP_ARB = 0x8511,
	GL_NORMAL_MAP_EXT = 0x8511,
	GL_NORMAL_MAP_NV = 0x8511,
	GL_NORMAL_MAP_OES = 0x8511,
	GL_REFLECTION_MAP = 0x8512,
	GL_REFLECTION_MAP_ARB = 0x8512,
	GL_REFLECTION_MAP_EXT = 0x8512,
	GL_REFLECTION_MAP_NV = 0x8512,
	GL_REFLECTION_MAP_OES = 0x8512,
	GL_TEXTURE_CUBE_MAP = 0x8513,
	GL_TEXTURE_CUBE_MAP_ARB = 0x8513,
	GL_TEXTURE_CUBE_MAP_EXT = 0x8513,
	GL_TEXTURE_CUBE_MAP_OES = 0x8513,
	GL_TEXTURE_BINDING_CUBE_MAP = 0x8514,
	GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514,
	GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514,
	GL_TEXTURE_BINDING_CUBE_MAP_OES = 0x8514,
	GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,
	GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515,
	GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515,
	GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A,
	GL_PROXY_TEXTURE_CUBE_MAP = 0x851B,
	GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B,
	GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B,
	GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C,
	GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C,
	GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C,
	GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C,
	GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D,
	GL_VERTEX_ARRAY_RANGE_NV = 0x851D,
	GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E,
	GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E,
	GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F,
	GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F,
	GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520,
	GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521,
	GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521,
	GL_REGISTER_COMBINERS_NV = 0x8522,
	GL_VARIABLE_A_NV = 0x8523,
	GL_VARIABLE_B_NV = 0x8524,
	GL_VARIABLE_C_NV = 0x8525,
	GL_VARIABLE_D_NV = 0x8526,
	GL_VARIABLE_E_NV = 0x8527,
	GL_VARIABLE_F_NV = 0x8528,
	GL_VARIABLE_G_NV = 0x8529,
	GL_CONSTANT_COLOR0_NV = 0x852A,
	GL_CONSTANT_COLOR1_NV = 0x852B,
	GL_PRIMARY_COLOR_NV = 0x852C,
	GL_SECONDARY_COLOR_NV = 0x852D,
	GL_SPARE0_NV = 0x852E,
	GL_SPARE1_NV = 0x852F,
	GL_DISCARD_NV = 0x8530,
	GL_E_TIMES_F_NV = 0x8531,
	GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532,
	GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533,
	GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534,
	GL_PER_STAGE_CONSTANTS_NV = 0x8535,
	GL_UNSIGNED_IDENTITY_NV = 0x8536,
	GL_UNSIGNED_INVERT_NV = 0x8537,
	GL_EXPAND_NORMAL_NV = 0x8538,
	GL_EXPAND_NEGATE_NV = 0x8539,
	GL_HALF_BIAS_NORMAL_NV = 0x853A,
	GL_HALF_BIAS_NEGATE_NV = 0x853B,
	GL_SIGNED_IDENTITY_NV = 0x853C,
	GL_SIGNED_NEGATE_NV = 0x853D,
	GL_SCALE_BY_TWO_NV = 0x853E,
	GL_SCALE_BY_FOUR_NV = 0x853F,
	GL_SCALE_BY_ONE_HALF_NV = 0x8540,
	GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541,
	GL_COMBINER_INPUT_NV = 0x8542,
	GL_COMBINER_MAPPING_NV = 0x8543,
	GL_COMBINER_COMPONENT_USAGE_NV = 0x8544,
	GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545,
	GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546,
	GL_COMBINER_MUX_SUM_NV = 0x8547,
	GL_COMBINER_SCALE_NV = 0x8548,
	GL_COMBINER_BIAS_NV = 0x8549,
	GL_COMBINER_AB_OUTPUT_NV = 0x854A,
	GL_COMBINER_CD_OUTPUT_NV = 0x854B,
	GL_COMBINER_SUM_OUTPUT_NV = 0x854C,
	GL_MAX_GENERAL_COMBINERS_NV = 0x854D,
	GL_NUM_GENERAL_COMBINERS_NV = 0x854E,
	GL_COLOR_SUM_CLAMP_NV = 0x854F,
	GL_COMBINER0_NV = 0x8550,
	GL_COMBINER1_NV = 0x8551,
	GL_COMBINER2_NV = 0x8552,
	GL_COMBINER3_NV = 0x8553,
	GL_COMBINER4_NV = 0x8554,
	GL_COMBINER5_NV = 0x8555,
	GL_COMBINER6_NV = 0x8556,
	GL_COMBINER7_NV = 0x8557,
	GL_PRIMITIVE_RESTART_NV = 0x8558,
	GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559,
	GL_FOG_DISTANCE_MODE_NV = 0x855A,
	GL_EYE_RADIAL_NV = 0x855B,
	GL_EYE_PLANE_ABSOLUTE_NV = 0x855C,
	GL_EMBOSS_LIGHT_NV = 0x855D,
	GL_EMBOSS_CONSTANT_NV = 0x855E,
	GL_EMBOSS_MAP_NV = 0x855F,
};
typedef enum {
	GL_RED_MIN_CLAMP_INGR = 0x8560,
	GL_GREEN_MIN_CLAMP_INGR = 0x8561,
	GL_BLUE_MIN_CLAMP_INGR = 0x8562,
	GL_ALPHA_MIN_CLAMP_INGR = 0x8563,
	GL_RED_MAX_CLAMP_INGR = 0x8564,
	GL_GREEN_MAX_CLAMP_INGR = 0x8565,
	GL_BLUE_MAX_CLAMP_INGR = 0x8566,
	GL_ALPHA_MAX_CLAMP_INGR = 0x8567,
	GL_INTERLACE_READ_INGR = 0x8568,
};
typedef enum {
	GL_COMBINE = 0x8570,
	GL_COMBINE_ARB = 0x8570,
	GL_COMBINE_EXT = 0x8570,
	GL_COMBINE_RGB = 0x8571,
	GL_COMBINE_RGB_ARB = 0x8571,
	GL_COMBINE_RGB_EXT = 0x8571,
	GL_COMBINE_ALPHA = 0x8572,
	GL_COMBINE_ALPHA_ARB = 0x8572,
	GL_COMBINE_ALPHA_EXT = 0x8572,
	GL_RGB_SCALE = 0x8573,
	GL_RGB_SCALE_ARB = 0x8573,
	GL_RGB_SCALE_EXT = 0x8573,
	GL_ADD_SIGNED = 0x8574,
	GL_ADD_SIGNED_ARB = 0x8574,
	GL_ADD_SIGNED_EXT = 0x8574,
	GL_INTERPOLATE = 0x8575,
	GL_INTERPOLATE_ARB = 0x8575,
	GL_INTERPOLATE_EXT = 0x8575,
	GL_CONSTANT = 0x8576,
	GL_CONSTANT_ARB = 0x8576,
	GL_CONSTANT_EXT = 0x8576,
	GL_CONSTANT_NV = 0x8576,
	GL_PRIMARY_COLOR = 0x8577,
	GL_PRIMARY_COLOR_ARB = 0x8577,
	GL_PRIMARY_COLOR_EXT = 0x8577,
	GL_PREVIOUS = 0x8578,
	GL_PREVIOUS_ARB = 0x8578,
	GL_PREVIOUS_EXT = 0x8578,
	GL_SOURCE0_RGB = 0x8580,
	GL_SOURCE0_RGB_ARB = 0x8580,
	GL_SOURCE0_RGB_EXT = 0x8580,
	GL_SRC0_RGB = 0x8580,
	GL_SOURCE1_RGB = 0x8581,
	GL_SOURCE1_RGB_ARB = 0x8581,
	GL_SOURCE1_RGB_EXT = 0x8581,
	GL_SRC1_RGB = 0x8581,
	GL_SOURCE2_RGB = 0x8582,
	GL_SOURCE2_RGB_ARB = 0x8582,
	GL_SOURCE2_RGB_EXT = 0x8582,
	GL_SRC2_RGB = 0x8582,
	GL_SOURCE3_RGB_NV = 0x8583,
	GL_SOURCE0_ALPHA = 0x8588,
	GL_SOURCE0_ALPHA_ARB = 0x8588,
	GL_SOURCE0_ALPHA_EXT = 0x8588,
	GL_SRC0_ALPHA = 0x8588,
	GL_SOURCE1_ALPHA = 0x8589,
	GL_SOURCE1_ALPHA_ARB = 0x8589,
	GL_SOURCE1_ALPHA_EXT = 0x8589,
	GL_SRC1_ALPHA = 0x8589,
	GL_SRC1_ALPHA_EXT = 0x8589,
	GL_SOURCE2_ALPHA = 0x858A,
	GL_SOURCE2_ALPHA_ARB = 0x858A,
	GL_SOURCE2_ALPHA_EXT = 0x858A,
	GL_SRC2_ALPHA = 0x858A,
	GL_SOURCE3_ALPHA_NV = 0x858B,
	GL_OPERAND0_RGB = 0x8590,
	GL_OPERAND0_RGB_ARB = 0x8590,
	GL_OPERAND0_RGB_EXT = 0x8590,
	GL_OPERAND1_RGB = 0x8591,
	GL_OPERAND1_RGB_ARB = 0x8591,
	GL_OPERAND1_RGB_EXT = 0x8591,
	GL_OPERAND2_RGB = 0x8592,
	GL_OPERAND2_RGB_ARB = 0x8592,
	GL_OPERAND2_RGB_EXT = 0x8592,
	GL_OPERAND3_RGB_NV = 0x8593,
	GL_OPERAND0_ALPHA = 0x8598,
	GL_OPERAND0_ALPHA_ARB = 0x8598,
	GL_OPERAND0_ALPHA_EXT = 0x8598,
	GL_OPERAND1_ALPHA = 0x8599,
	GL_OPERAND1_ALPHA_ARB = 0x8599,
	GL_OPERAND1_ALPHA_EXT = 0x8599,
	GL_OPERAND2_ALPHA = 0x859A,
	GL_OPERAND2_ALPHA_ARB = 0x859A,
	GL_OPERAND2_ALPHA_EXT = 0x859A,
	GL_OPERAND3_ALPHA_NV = 0x859B,
} GL_RegisterCombinerPname_t;
typedef enum {
	GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0,
	GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1,
	GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2,
	GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3,
	GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4,
	GL_PERTURB_EXT = 0x85AE,
	GL_TEXTURE_NORMAL_EXT = 0x85AF,
};
typedef enum {
	GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0,
	GL_TRANSFORM_HINT_APPLE = 0x85B1,
	GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2,
	GL_BUFFER_OBJECT_APPLE = 0x85B3,
	GL_STORAGE_CLIENT_APPLE = 0x85B4,
	GL_VERTEX_ARRAY_BINDING = 0x85B5,
	GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5,
	GL_VERTEX_ARRAY_BINDING_OES = 0x85B5,
	GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7,
	GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8,
	GL_YCBCR_422_APPLE = 0x85B9,
	GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA,
	GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA,
	GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB,
	GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB,
	GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC,
	GL_STORAGE_PRIVATE_APPLE = 0x85BD,
	GL_STORAGE_CACHED_APPLE = 0x85BE,
	GL_STORAGE_SHARED_APPLE = 0x85BF,
};
typedef enum {
	GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0,
	GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1,
	GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2,
	GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3,
	GL_R1UI_V3F_SUN = 0x85C4,
	GL_R1UI_C4UB_V3F_SUN = 0x85C5,
	GL_R1UI_C3F_V3F_SUN = 0x85C6,
	GL_R1UI_N3F_V3F_SUN = 0x85C7,
	GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8,
	GL_R1UI_T2F_V3F_SUN = 0x85C9,
	GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA,
	GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB,
	GL_SLICE_ACCUM_SUN = 0x85CC,
};
typedef enum {
}; // 3Dlabs private extension for Autodesk
typedef enum {
};
typedef enum {
	GL_QUAD_MESH_SUN = 0x8614,
	GL_TRIANGLE_MESH_SUN = 0x8615,
};
typedef enum {
	GL_VERTEX_PROGRAM_ARB = 0x8620,
	GL_VERTEX_PROGRAM_NV = 0x8620,
	GL_VERTEX_STATE_PROGRAM_NV = 0x8621,
	GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,
	GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622,
	GL_ATTRIB_ARRAY_SIZE_NV = 0x8623,
	GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623,
	GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623,
	GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624,
	GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,
	GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624,
	GL_ATTRIB_ARRAY_TYPE_NV = 0x8625,
	GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625,
	GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625,
	GL_CURRENT_ATTRIB_NV = 0x8626,
	GL_CURRENT_VERTEX_ATTRIB = 0x8626,
	GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626,
	GL_PROGRAM_LENGTH_ARB = 0x8627,
	GL_PROGRAM_LENGTH_NV = 0x8627,
	GL_PROGRAM_STRING_ARB = 0x8628,
	GL_PROGRAM_STRING_NV = 0x8628,
	GL_MODELVIEW_PROJECTION_NV = 0x8629,
	GL_IDENTITY_NV = 0x862A,
	GL_INVERSE_NV = 0x862B,
	GL_TRANSPOSE_NV = 0x862C,
	GL_INVERSE_TRANSPOSE_NV = 0x862D,
	GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E,
	GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E,
	GL_MAX_PROGRAM_MATRICES_ARB = 0x862F,
	GL_MAX_TRACK_MATRICES_NV = 0x862F,
	GL_MATRIX0_NV = 0x8630,
	GL_MATRIX1_NV = 0x8631,
	GL_MATRIX2_NV = 0x8632,
	GL_MATRIX3_NV = 0x8633,
	GL_MATRIX4_NV = 0x8634,
	GL_MATRIX5_NV = 0x8635,
	GL_MATRIX6_NV = 0x8636,
	GL_MATRIX7_NV = 0x8637,
	GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640,
	GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640,
	GL_CURRENT_MATRIX_ARB = 0x8641,
	GL_CURRENT_MATRIX_NV = 0x8641,
	GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642,
	GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642,
	GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642,
	GL_PROGRAM_POINT_SIZE = 0x8642,
	GL_PROGRAM_POINT_SIZE_ARB = 0x8642,
	GL_PROGRAM_POINT_SIZE_EXT = 0x8642,
	GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643,
	GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643,
	GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643,
	GL_PROGRAM_PARAMETER_NV = 0x8644,
	GL_ATTRIB_ARRAY_POINTER_NV = 0x8645,
	GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645,
	GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645,
	GL_PROGRAM_TARGET_NV = 0x8646,
	GL_PROGRAM_RESIDENT_NV = 0x8647,
	GL_TRACK_MATRIX_NV = 0x8648,
	GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649,
	GL_VERTEX_PROGRAM_BINDING_NV = 0x864A,
	GL_PROGRAM_ERROR_POSITION_ARB = 0x864B,
	GL_PROGRAM_ERROR_POSITION_NV = 0x864B,
	GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C,
	GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D,
	GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E,
	GL_DEPTH_CLAMP = 0x864F,
	GL_DEPTH_CLAMP_NV = 0x864F,
	GL_DEPTH_CLAMP_EXT = 0x864F,
	GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650,
	GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651,
	GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652,
	GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653,
	GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654,
	GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655,
	GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656,
	GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657,
	GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658,
	GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659,
	GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A,
	GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B,
	GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C,
	GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D,
	GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E,
	GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F,
	GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660,
	GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661,
	GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662,
	GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663,
	GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664,
	GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665,
	GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666,
	GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667,
	GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668,
	GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669,
	GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A,
	GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B,
	GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C,
	GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D,
	GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E,
	GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F,
	GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670,
	GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671,
	GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672,
	GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673,
	GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674,
	GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675,
	GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676,
	GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677,
	GL_PROGRAM_BINDING_ARB = 0x8677, // NOT an alias. Accidental reuse of GL_MAP2_VERTEX_ATTRIB7_4_NV
	GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678,
	GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679,
	GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A,
	GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B,
	GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C,
	GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D,
	GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E,
	GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F,
};
typedef enum {
};
typedef enum {
	GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0,
	GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0,
	GL_TEXTURE_COMPRESSED = 0x86A1,
	GL_TEXTURE_COMPRESSED_ARB = 0x86A1,
	GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2,
	GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2,
	GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3,
	GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3,
	GL_MAX_VERTEX_UNITS_ARB = 0x86A4,
	GL_MAX_VERTEX_UNITS_OES = 0x86A4,
	GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5,
	GL_WEIGHT_SUM_UNITY_ARB = 0x86A6,
	GL_VERTEX_BLEND_ARB = 0x86A7,
	GL_CURRENT_WEIGHT_ARB = 0x86A8,
	GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9,
	GL_WEIGHT_ARRAY_TYPE_OES = 0x86A9,
	GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA,
	GL_WEIGHT_ARRAY_STRIDE_OES = 0x86AA,
	GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB,
	GL_WEIGHT_ARRAY_SIZE_OES = 0x86AB,
	GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC,
	GL_WEIGHT_ARRAY_POINTER_OES = 0x86AC,
	GL_WEIGHT_ARRAY_ARB = 0x86AD,
	GL_WEIGHT_ARRAY_OES = 0x86AD,
	GL_DOT3_RGB = 0x86AE,
	GL_DOT3_RGB_ARB = 0x86AE,
	GL_DOT3_RGBA = 0x86AF,
	GL_DOT3_RGBA_ARB = 0x86AF,
	GL_DOT3_RGBA_IMG = 0x86AF,
};
typedef enum {
	GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0,
	GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1,
	GL_MULTISAMPLE_3DFX = 0x86B2,
	GL_SAMPLE_BUFFERS_3DFX = 0x86B3,
	GL_SAMPLES_3DFX = 0x86B4,
};
typedef enum {
	GL_EVAL_2D_NV = 0x86C0,
	GL_EVAL_TRIANGULAR_2D_NV = 0x86C1,
	GL_MAP_TESSELLATION_NV = 0x86C2,
	GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3,
	GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4,
	GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5,
	GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6,
	GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7,
	GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8,
	GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9,
	GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA,
	GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB,
	GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC,
	GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD,
	GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE,
	GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF,
	GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0,
	GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1,
	GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2,
	GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3,
	GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4,
	GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5,
	GL_MAX_MAP_TESSELLATION_NV = 0x86D6,
	GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7,
	GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8,
	GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9,
	GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA,
	GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB,
	GL_DSDT_MAG_INTENSITY_NV = 0x86DC,
	GL_SHADER_CONSISTENT_NV = 0x86DD,
	GL_TEXTURE_SHADER_NV = 0x86DE,
	GL_SHADER_OPERATION_NV = 0x86DF,
	GL_CULL_MODES_NV = 0x86E0,
	GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1,
	GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1,
	GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2,
	GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2,
	GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3,
	GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3,
	GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4,
	GL_CONST_EYE_NV = 0x86E5,
	GL_PASS_THROUGH_NV = 0x86E6,
	GL_CULL_FRAGMENT_NV = 0x86E7,
	GL_OFFSET_TEXTURE_2D_NV = 0x86E8,
	GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9,
	GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA,
	GL_SURFACE_STATE_NV = 0x86EB,
	GL_DOT_PRODUCT_NV = 0x86EC,
	GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED,
	GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE,
	GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF,
	GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0,
	GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1,
	GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2,
	GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3,
	GL_HILO_NV = 0x86F4,
	GL_DSDT_NV = 0x86F5,
	GL_DSDT_MAG_NV = 0x86F6,
	GL_DSDT_MAG_VIB_NV = 0x86F7,
	GL_HILO16_NV = 0x86F8,
	GL_SIGNED_HILO_NV = 0x86F9,
	GL_SIGNED_HILO16_NV = 0x86FA,
	GL_SIGNED_RGBA_NV = 0x86FB,
	GL_SIGNED_RGBA8_NV = 0x86FC,
	GL_SURFACE_REGISTERED_NV = 0x86FD,
	GL_SIGNED_RGB_NV = 0x86FE,
	GL_SIGNED_RGB8_NV = 0x86FF,
	GL_SURFACE_MAPPED_NV = 0x8700,
	GL_SIGNED_LUMINANCE_NV = 0x8701,
	GL_SIGNED_LUMINANCE8_NV = 0x8702,
	GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703,
	GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704,
	GL_SIGNED_ALPHA_NV = 0x8705,
	GL_SIGNED_ALPHA8_NV = 0x8706,
	GL_SIGNED_INTENSITY_NV = 0x8707,
	GL_SIGNED_INTENSITY8_NV = 0x8708,
	GL_DSDT8_NV = 0x8709,
	GL_DSDT8_MAG8_NV = 0x870A,
	GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B,
	GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C,
	GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D,
	GL_HI_SCALE_NV = 0x870E,
	GL_LO_SCALE_NV = 0x870F,
	GL_DS_SCALE_NV = 0x8710,
	GL_DT_SCALE_NV = 0x8711,
	GL_MAGNITUDE_SCALE_NV = 0x8712,
	GL_VIBRANCE_SCALE_NV = 0x8713,
	GL_HI_BIAS_NV = 0x8714,
	GL_LO_BIAS_NV = 0x8715,
	GL_DS_BIAS_NV = 0x8716,
	GL_DT_BIAS_NV = 0x8717,
	GL_MAGNITUDE_BIAS_NV = 0x8718,
	GL_VIBRANCE_BIAS_NV = 0x8719,
	GL_TEXTURE_BORDER_VALUES_NV = 0x871A,
	GL_TEXTURE_HI_SIZE_NV = 0x871B,
	GL_TEXTURE_LO_SIZE_NV = 0x871C,
	GL_TEXTURE_DS_SIZE_NV = 0x871D,
	GL_TEXTURE_DT_SIZE_NV = 0x871E,
	GL_TEXTURE_MAG_SIZE_NV = 0x871F,
};
typedef enum {
	GL_MODELVIEW2_ARB = 0x8722,
	GL_MODELVIEW3_ARB = 0x8723,
	GL_MODELVIEW4_ARB = 0x8724,
	GL_MODELVIEW5_ARB = 0x8725,
	GL_MODELVIEW6_ARB = 0x8726,
	GL_MODELVIEW7_ARB = 0x8727,
	GL_MODELVIEW8_ARB = 0x8728,
	GL_MODELVIEW9_ARB = 0x8729,
	GL_MODELVIEW10_ARB = 0x872A,
	GL_MODELVIEW11_ARB = 0x872B,
	GL_MODELVIEW12_ARB = 0x872C,
	GL_MODELVIEW13_ARB = 0x872D,
	GL_MODELVIEW14_ARB = 0x872E,
	GL_MODELVIEW15_ARB = 0x872F,
	GL_MODELVIEW16_ARB = 0x8730,
	GL_MODELVIEW17_ARB = 0x8731,
	GL_MODELVIEW18_ARB = 0x8732,
	GL_MODELVIEW19_ARB = 0x8733,
	GL_MODELVIEW20_ARB = 0x8734,
	GL_MODELVIEW21_ARB = 0x8735,
	GL_MODELVIEW22_ARB = 0x8736,
	GL_MODELVIEW23_ARB = 0x8737,
	GL_MODELVIEW24_ARB = 0x8738,
	GL_MODELVIEW25_ARB = 0x8739,
	GL_MODELVIEW26_ARB = 0x873A,
	GL_MODELVIEW27_ARB = 0x873B,
	GL_MODELVIEW28_ARB = 0x873C,
	GL_MODELVIEW29_ARB = 0x873D,
	GL_MODELVIEW30_ARB = 0x873E,
	GL_MODELVIEW31_ARB = 0x873F,
};
typedef enum {
	GL_DOT3_RGB_EXT = 0x8740,
	GL_Z400_BINARY_AMD = 0x8740, // NOT an alias. Accidental reuse of GL_DOT3_RGB_EXT
	GL_DOT3_RGBA_EXT = 0x8741,
	GL_PROGRAM_BINARY_LENGTH_OES = 0x8741, // NOT an alias. Accidental reuse of GL_DOT3_RGBA_EXT
	GL_PROGRAM_BINARY_LENGTH = 0x8741,
	GL_MIRROR_CLAMP_ATI = 0x8742,
	GL_MIRROR_CLAMP_EXT = 0x8742,
	GL_MIRROR_CLAMP_TO_EDGE = 0x8743,
	GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743,
	GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743,
	GL_MODULATE_ADD_ATI = 0x8744,
	GL_MODULATE_SIGNED_ADD_ATI = 0x8745,
	GL_MODULATE_SUBTRACT_ATI = 0x8746,
	GL_SET_AMD = 0x874A,
	GL_REPLACE_VALUE_AMD = 0x874B,
	GL_STENCIL_OP_VALUE_AMD = 0x874C,
	GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D,
	GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E,
	GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F,
};
typedef enum {
	GL_DEPTH_STENCIL_MESA = 0x8750,
	GL_UNSIGNED_INT_24_8_MESA = 0x8751,
	GL_UNSIGNED_INT_8_24_REV_MESA = 0x8752,
	GL_UNSIGNED_SHORT_15_1_MESA = 0x8753,
	GL_UNSIGNED_SHORT_1_15_REV_MESA = 0x8754,
	GL_TRACE_MASK_MESA = 0x8755,
	GL_TRACE_NAME_MESA = 0x8756,
	GL_YCBCR_MESA = 0x8757,
	GL_PACK_INVERT_MESA = 0x8758,
	GL_DEBUG_OBJECT_MESA = 0x8759, // NOT an alias. Accidental reuse of GL_TEXTURE_1D_STACK_MESAX
	GL_TEXTURE_1D_STACK_MESAX = 0x8759,
	GL_DEBUG_PRINT_MESA = 0x875A, // NOT an alias. Accidental reuse of GL_TEXTURE_2D_STACK_MESAX
	GL_TEXTURE_2D_STACK_MESAX = 0x875A,
	GL_DEBUG_ASSERT_MESA = 0x875B, // NOT an alias. Accidental reuse of GL_PROXY_TEXTURE_1D_STACK_MESAX
	GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B,
	GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C,
	GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D,
	GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E,
	GL_PROGRAM_BINARY_FORMAT_MESA = 0x875F,
};
typedef enum {
	GL_STATIC_ATI = 0x8760,
	GL_DYNAMIC_ATI = 0x8761,
	GL_PRESERVE_ATI = 0x8762,
	GL_DISCARD_ATI = 0x8763,
	GL_BUFFER_SIZE = 0x8764,
	GL_BUFFER_SIZE_ARB = 0x8764,
	GL_OBJECT_BUFFER_SIZE_ATI = 0x8764,
	GL_BUFFER_USAGE = 0x8765,
	GL_BUFFER_USAGE_ARB = 0x8765,
	GL_OBJECT_BUFFER_USAGE_ATI = 0x8765,
	GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766,
	GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767,
	GL_ELEMENT_ARRAY_ATI = 0x8768,
	GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769,
	GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A,
	GL_MAX_VERTEX_STREAMS_ATI = 0x876B,
	GL_VERTEX_STREAM0_ATI = 0x876C,
	GL_VERTEX_STREAM1_ATI = 0x876D,
	GL_VERTEX_STREAM2_ATI = 0x876E,
	GL_VERTEX_STREAM3_ATI = 0x876F,
	GL_VERTEX_STREAM4_ATI = 0x8770,
	GL_VERTEX_STREAM5_ATI = 0x8771,
	GL_VERTEX_STREAM6_ATI = 0x8772,
	GL_VERTEX_STREAM7_ATI = 0x8773,
	GL_VERTEX_SOURCE_ATI = 0x8774,
	GL_BUMP_ROT_MATRIX_ATI = 0x8775,
	GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776,
	GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777,
	GL_BUMP_TEX_UNITS_ATI = 0x8778,
	GL_DUDV_ATI = 0x8779,
	GL_DU8DV8_ATI = 0x877A,
	GL_BUMP_ENVMAP_ATI = 0x877B,
	GL_BUMP_TARGET_ATI = 0x877C,
	GL_VERTEX_SHADER_EXT = 0x8780,
	GL_VERTEX_SHADER_BINDING_EXT = 0x8781,
	GL_OP_INDEX_EXT = 0x8782,
	GL_OP_NEGATE_EXT = 0x8783,
	GL_OP_DOT3_EXT = 0x8784,
	GL_OP_DOT4_EXT = 0x8785,
	GL_OP_MUL_EXT = 0x8786,
	GL_OP_ADD_EXT = 0x8787,
	GL_OP_MADD_EXT = 0x8788,
	GL_OP_FRAC_EXT = 0x8789,
	GL_OP_MAX_EXT = 0x878A,
	GL_OP_MIN_EXT = 0x878B,
	GL_OP_SET_GE_EXT = 0x878C,
	GL_OP_SET_LT_EXT = 0x878D,
	GL_OP_CLAMP_EXT = 0x878E,
	GL_OP_FLOOR_EXT = 0x878F,
	GL_OP_ROUND_EXT = 0x8790,
	GL_OP_EXP_BASE_2_EXT = 0x8791,
	GL_OP_LOG_BASE_2_EXT = 0x8792,
	GL_OP_POWER_EXT = 0x8793,
	GL_OP_RECIP_EXT = 0x8794,
	GL_OP_RECIP_SQRT_EXT = 0x8795,
	GL_OP_SUB_EXT = 0x8796,
	GL_OP_CROSS_PRODUCT_EXT = 0x8797,
	GL_OP_MULTIPLY_MATRIX_EXT = 0x8798,
	GL_OP_MOV_EXT = 0x8799,
	GL_OUTPUT_VERTEX_EXT = 0x879A,
	GL_OUTPUT_COLOR0_EXT = 0x879B,
	GL_OUTPUT_COLOR1_EXT = 0x879C,
	GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D,
	GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E,
	GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F,
	GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0,
	GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1,
	GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2,
	GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3,
	GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4,
	GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5,
	GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6,
	GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7,
	GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8,
	GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9,
	GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA,
	GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB,
	GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC,
	GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD,
	GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE,
	GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF,
	GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0,
	GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1,
	GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2,
	GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3,
	GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4,
	GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5,
	GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6,
	GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7,
	GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8,
	GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9,
	GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA,
	GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB,
	GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC,
	GL_OUTPUT_FOG_EXT = 0x87BD,
	GL_SCALAR_EXT = 0x87BE,
	GL_VECTOR_EXT = 0x87BF,
	GL_MATRIX_EXT = 0x87C0,
	GL_VARIANT_EXT = 0x87C1,
	GL_INVARIANT_EXT = 0x87C2,
	GL_LOCAL_CONSTANT_EXT = 0x87C3,
	GL_LOCAL_EXT = 0x87C4,
	GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5,
	GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6,
	GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7,
	GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8,
	GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9,
	GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA,
	GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB,
	GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC,
	GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD,
	GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE,
	GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF,
	GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0,
	GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1,
	GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2,
	GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3,
	GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4,
	GL_X_EXT = 0x87D5,
	GL_Y_EXT = 0x87D6,
	GL_Z_EXT = 0x87D7,
	GL_W_EXT = 0x87D8,
	GL_NEGATIVE_X_EXT = 0x87D9,
	GL_NEGATIVE_Y_EXT = 0x87DA,
	GL_NEGATIVE_Z_EXT = 0x87DB,
	GL_NEGATIVE_W_EXT = 0x87DC,
	GL_ZERO_EXT = 0x87DD,
	GL_ONE_EXT = 0x87DE,
	GL_NEGATIVE_ONE_EXT = 0x87DF,
	GL_NORMALIZED_RANGE_EXT = 0x87E0,
	GL_FULL_RANGE_EXT = 0x87E1,
	GL_CURRENT_VERTEX_EXT = 0x87E2,
	GL_MVP_MATRIX_EXT = 0x87E3,
	GL_VARIANT_VALUE_EXT = 0x87E4,
	GL_VARIANT_DATATYPE_EXT = 0x87E5,
	GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6,
	GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7,
	GL_VARIANT_ARRAY_EXT = 0x87E8,
	GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9,
	GL_INVARIANT_VALUE_EXT = 0x87EA,
	GL_INVARIANT_DATATYPE_EXT = 0x87EB,
	GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC,
	GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED,
	GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE,
	GL_PN_TRIANGLES_ATI = 0x87F0,
	GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1,
	GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2,
	GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3,
	GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4,
	GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5,
	GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6,
	GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7,
	GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8,
	GL_3DC_X_AMD = 0x87F9,
	GL_3DC_XY_AMD = 0x87FA,
	GL_VBO_FREE_MEMORY_ATI = 0x87FB,
	GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC,
	GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD,
	GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE,
	GL_NUM_PROGRAM_BINARY_FORMATS_OES = 0x87FE,
	GL_PROGRAM_BINARY_FORMATS = 0x87FF,
	GL_PROGRAM_BINARY_FORMATS_OES = 0x87FF,
	GL_STENCIL_BACK_FUNC = 0x8800,
	GL_STENCIL_BACK_FUNC_ATI = 0x8800,
	GL_STENCIL_BACK_FAIL = 0x8801,
	GL_STENCIL_BACK_FAIL_ATI = 0x8801,
	GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,
	GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802,
	GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803,
	GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803,
	GL_FRAGMENT_PROGRAM_ARB = 0x8804,
	GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805,
	GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806,
	GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807,
	GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808,
	GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809,
	GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A,
	GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B,
	GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C,
	GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D,
	GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E,
	GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F,
	GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810,
	GL_RGBA32F = 0x8814,
	GL_RGBA32F_ARB = 0x8814,
	GL_RGBA32F_EXT = 0x8814,
	GL_RGBA_FLOAT32_APPLE = 0x8814,
	GL_RGBA_FLOAT32_ATI = 0x8814,
	GL_RGB32F = 0x8815,
	GL_RGB32F_ARB = 0x8815,
	GL_RGB32F_EXT = 0x8815,
	GL_RGB_FLOAT32_APPLE = 0x8815,
	GL_RGB_FLOAT32_ATI = 0x8815,
	GL_ALPHA32F_ARB = 0x8816,
	GL_ALPHA32F_EXT = 0x8816,
	GL_ALPHA_FLOAT32_APPLE = 0x8816,
	GL_ALPHA_FLOAT32_ATI = 0x8816,
	GL_INTENSITY32F_ARB = 0x8817,
	GL_INTENSITY_FLOAT32_APPLE = 0x8817,
	GL_INTENSITY_FLOAT32_ATI = 0x8817,
	GL_LUMINANCE32F_ARB = 0x8818,
	GL_LUMINANCE32F_EXT = 0x8818,
	GL_LUMINANCE_FLOAT32_APPLE = 0x8818,
	GL_LUMINANCE_FLOAT32_ATI = 0x8818,
	GL_LUMINANCE_ALPHA32F_ARB = 0x8819,
	GL_LUMINANCE_ALPHA32F_EXT = 0x8819,
	GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819,
	GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819,
	GL_RGBA16F = 0x881A,
	GL_RGBA16F_ARB = 0x881A,
	GL_RGBA16F_EXT = 0x881A,
	GL_RGBA_FLOAT16_APPLE = 0x881A,
	GL_RGBA_FLOAT16_ATI = 0x881A,
	GL_RGB16F = 0x881B,
	GL_RGB16F_ARB = 0x881B,
	GL_RGB16F_EXT = 0x881B,
	GL_RGB_FLOAT16_APPLE = 0x881B,
	GL_RGB_FLOAT16_ATI = 0x881B,
	GL_ALPHA16F_ARB = 0x881C,
	GL_ALPHA16F_EXT = 0x881C,
	GL_ALPHA_FLOAT16_APPLE = 0x881C,
	GL_ALPHA_FLOAT16_ATI = 0x881C,
	GL_INTENSITY16F_ARB = 0x881D,
	GL_INTENSITY_FLOAT16_APPLE = 0x881D,
	GL_INTENSITY_FLOAT16_ATI = 0x881D,
	GL_LUMINANCE16F_ARB = 0x881E,
	GL_LUMINANCE16F_EXT = 0x881E,
	GL_LUMINANCE_FLOAT16_APPLE = 0x881E,
	GL_LUMINANCE_FLOAT16_ATI = 0x881E,
	GL_LUMINANCE_ALPHA16F_ARB = 0x881F,
	GL_LUMINANCE_ALPHA16F_EXT = 0x881F,
	GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F,
	GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F,
	GL_RGBA_FLOAT_MODE_ARB = 0x8820,
	GL_RGBA_FLOAT_MODE_ATI = 0x8820,
	GL_WRITEONLY_RENDERING_QCOM = 0x8823,
	GL_MAX_DRAW_BUFFERS = 0x8824,
	GL_MAX_DRAW_BUFFERS_ARB = 0x8824,
	GL_MAX_DRAW_BUFFERS_ATI = 0x8824,
	GL_MAX_DRAW_BUFFERS_EXT = 0x8824,
	GL_MAX_DRAW_BUFFERS_NV = 0x8824,
	GL_DRAW_BUFFER0 = 0x8825,
	GL_DRAW_BUFFER0_ARB = 0x8825,
	GL_DRAW_BUFFER0_ATI = 0x8825,
	GL_DRAW_BUFFER0_EXT = 0x8825,
	GL_DRAW_BUFFER0_NV = 0x8825,
	GL_DRAW_BUFFER1 = 0x8826,
	GL_DRAW_BUFFER1_ARB = 0x8826,
	GL_DRAW_BUFFER1_ATI = 0x8826,
	GL_DRAW_BUFFER1_EXT = 0x8826,
	GL_DRAW_BUFFER1_NV = 0x8826,
	GL_DRAW_BUFFER2 = 0x8827,
	GL_DRAW_BUFFER2_ARB = 0x8827,
	GL_DRAW_BUFFER2_ATI = 0x8827,
	GL_DRAW_BUFFER2_EXT = 0x8827,
	GL_DRAW_BUFFER2_NV = 0x8827,
	GL_DRAW_BUFFER3 = 0x8828,
	GL_DRAW_BUFFER3_ARB = 0x8828,
	GL_DRAW_BUFFER3_ATI = 0x8828,
	GL_DRAW_BUFFER3_EXT = 0x8828,
	GL_DRAW_BUFFER3_NV = 0x8828,
	GL_DRAW_BUFFER4 = 0x8829,
	GL_DRAW_BUFFER4_ARB = 0x8829,
	GL_DRAW_BUFFER4_ATI = 0x8829,
	GL_DRAW_BUFFER4_EXT = 0x8829,
	GL_DRAW_BUFFER4_NV = 0x8829,
	GL_DRAW_BUFFER5 = 0x882A,
	GL_DRAW_BUFFER5_ARB = 0x882A,
	GL_DRAW_BUFFER5_ATI = 0x882A,
	GL_DRAW_BUFFER5_EXT = 0x882A,
	GL_DRAW_BUFFER5_NV = 0x882A,
	GL_DRAW_BUFFER6 = 0x882B,
	GL_DRAW_BUFFER6_ARB = 0x882B,
	GL_DRAW_BUFFER6_ATI = 0x882B,
	GL_DRAW_BUFFER6_EXT = 0x882B,
	GL_DRAW_BUFFER6_NV = 0x882B,
	GL_DRAW_BUFFER7 = 0x882C,
	GL_DRAW_BUFFER7_ARB = 0x882C,
	GL_DRAW_BUFFER7_ATI = 0x882C,
	GL_DRAW_BUFFER7_EXT = 0x882C,
	GL_DRAW_BUFFER7_NV = 0x882C,
	GL_DRAW_BUFFER8 = 0x882D,
	GL_DRAW_BUFFER8_ARB = 0x882D,
	GL_DRAW_BUFFER8_ATI = 0x882D,
	GL_DRAW_BUFFER8_EXT = 0x882D,
	GL_DRAW_BUFFER8_NV = 0x882D,
	GL_DRAW_BUFFER9 = 0x882E,
	GL_DRAW_BUFFER9_ARB = 0x882E,
	GL_DRAW_BUFFER9_ATI = 0x882E,
	GL_DRAW_BUFFER9_EXT = 0x882E,
	GL_DRAW_BUFFER9_NV = 0x882E,
	GL_DRAW_BUFFER10 = 0x882F,
	GL_DRAW_BUFFER10_ARB = 0x882F,
	GL_DRAW_BUFFER10_ATI = 0x882F,
	GL_DRAW_BUFFER10_EXT = 0x882F,
	GL_DRAW_BUFFER10_NV = 0x882F,
	GL_DRAW_BUFFER11 = 0x8830,
	GL_DRAW_BUFFER11_ARB = 0x8830,
	GL_DRAW_BUFFER11_ATI = 0x8830,
	GL_DRAW_BUFFER11_EXT = 0x8830,
	GL_DRAW_BUFFER11_NV = 0x8830,
	GL_DRAW_BUFFER12 = 0x8831,
	GL_DRAW_BUFFER12_ARB = 0x8831,
	GL_DRAW_BUFFER12_ATI = 0x8831,
	GL_DRAW_BUFFER12_EXT = 0x8831,
	GL_DRAW_BUFFER12_NV = 0x8831,
	GL_DRAW_BUFFER13 = 0x8832,
	GL_DRAW_BUFFER13_ARB = 0x8832,
	GL_DRAW_BUFFER13_ATI = 0x8832,
	GL_DRAW_BUFFER13_EXT = 0x8832,
	GL_DRAW_BUFFER13_NV = 0x8832,
	GL_DRAW_BUFFER14 = 0x8833,
	GL_DRAW_BUFFER14_ARB = 0x8833,
	GL_DRAW_BUFFER14_ATI = 0x8833,
	GL_DRAW_BUFFER14_EXT = 0x8833,
	GL_DRAW_BUFFER14_NV = 0x8833,
	GL_DRAW_BUFFER15 = 0x8834,
	GL_DRAW_BUFFER15_ARB = 0x8834,
	GL_DRAW_BUFFER15_ATI = 0x8834,
	GL_DRAW_BUFFER15_EXT = 0x8834,
	GL_DRAW_BUFFER15_NV = 0x8834,
	GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835,
	GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 0x8837, // Defined by Mesa but not ATI
	GL_BLEND_EQUATION_ALPHA = 0x883D,
	GL_BLEND_EQUATION_ALPHA_EXT = 0x883D,
	GL_BLEND_EQUATION_ALPHA_OES = 0x883D,
	GL_SUBSAMPLE_DISTANCE_AMD = 0x883F,
};
typedef enum {
	GL_MATRIX_PALETTE_ARB = 0x8840,
	GL_MATRIX_PALETTE_OES = 0x8840,
	GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841,
	GL_MAX_PALETTE_MATRICES_ARB = 0x8842,
	GL_MAX_PALETTE_MATRICES_OES = 0x8842,
	GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843,
	GL_CURRENT_PALETTE_MATRIX_OES = 0x8843,
	GL_MATRIX_INDEX_ARRAY_ARB = 0x8844,
	GL_MATRIX_INDEX_ARRAY_OES = 0x8844,
	GL_CURRENT_MATRIX_INDEX_ARB = 0x8845,
	GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846,
	GL_MATRIX_INDEX_ARRAY_SIZE_OES = 0x8846,
	GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847,
	GL_MATRIX_INDEX_ARRAY_TYPE_OES = 0x8847,
	GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848,
	GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 0x8848,
	GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849,
	GL_MATRIX_INDEX_ARRAY_POINTER_OES = 0x8849,
	GL_TEXTURE_DEPTH_SIZE = 0x884A,
	GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A,
	GL_DEPTH_TEXTURE_MODE = 0x884B,
	GL_DEPTH_TEXTURE_MODE_ARB = 0x884B,
	GL_TEXTURE_COMPARE_MODE = 0x884C,
	GL_TEXTURE_COMPARE_MODE_ARB = 0x884C,
	GL_TEXTURE_COMPARE_MODE_EXT = 0x884C,
	GL_TEXTURE_COMPARE_FUNC = 0x884D,
	GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D,
	GL_TEXTURE_COMPARE_FUNC_EXT = 0x884D,
	GL_COMPARE_R_TO_TEXTURE = 0x884E,
	GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E,
	GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E,
	GL_COMPARE_REF_TO_TEXTURE = 0x884E,
	GL_COMPARE_REF_TO_TEXTURE_EXT = 0x884E,
	GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F,
};
typedef enum {
	GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850,
	GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851,
	GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852,
	GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853,
	GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854,
	GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855,
	GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856,
	GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857,
	GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858,
	GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859,
	GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A,
	GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B,
	GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C,
	GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D,
	GL_HILO8_NV = 0x885E,
	GL_SIGNED_HILO8_NV = 0x885F,
	GL_FORCE_BLUE_TO_ONE_NV = 0x8860,
	GL_POINT_SPRITE = 0x8861,
	GL_POINT_SPRITE_ARB = 0x8861,
	GL_POINT_SPRITE_NV = 0x8861,
	GL_POINT_SPRITE_OES = 0x8861,
	GL_COORD_REPLACE = 0x8862,
	GL_COORD_REPLACE_ARB = 0x8862,
	GL_COORD_REPLACE_NV = 0x8862,
	GL_COORD_REPLACE_OES = 0x8862,
	GL_POINT_SPRITE_R_MODE_NV = 0x8863,
	GL_PIXEL_COUNTER_BITS_NV = 0x8864,
	GL_QUERY_COUNTER_BITS = 0x8864,
	GL_QUERY_COUNTER_BITS_ARB = 0x8864,
	GL_QUERY_COUNTER_BITS_EXT = 0x8864,
	GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865,
	GL_CURRENT_QUERY = 0x8865,
	GL_CURRENT_QUERY_ARB = 0x8865,
	GL_CURRENT_QUERY_EXT = 0x8865,
	GL_PIXEL_COUNT_NV = 0x8866,
	GL_QUERY_RESULT = 0x8866,
	GL_QUERY_RESULT_ARB = 0x8866,
	GL_QUERY_RESULT_EXT = 0x8866,
	GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867,
	GL_QUERY_RESULT_AVAILABLE = 0x8867,
	GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867,
	GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867,
	GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868,
	GL_MAX_VERTEX_ATTRIBS = 0x8869,
	GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869,
	GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,
	GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A,
	GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C,
	GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 0x886C,
	GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 0x886C,
	GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D,
	GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 0x886D,
	GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 0x886D,
	GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E,
	GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F,
	GL_FRAGMENT_PROGRAM_NV = 0x8870,
	GL_MAX_TEXTURE_COORDS = 0x8871,
	GL_MAX_TEXTURE_COORDS_ARB = 0x8871,
	GL_MAX_TEXTURE_COORDS_NV = 0x8871,
	GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872,
	GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872,
	GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872,
	GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873,
	GL_PROGRAM_ERROR_STRING_ARB = 0x8874,
	GL_PROGRAM_ERROR_STRING_NV = 0x8874,
	GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875,
	GL_PROGRAM_FORMAT_ARB = 0x8876,
	GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878,
	GL_READ_PIXEL_DATA_RANGE_NV = 0x8879,
	GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A,
	GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B,
	GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C,
	GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D,
	GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F,
	GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x887F,
	GL_GEOMETRY_SHADER_INVOCATIONS_OES = 0x887F,
	GL_FLOAT_R_NV = 0x8880,
	GL_FLOAT_RG_NV = 0x8881,
	GL_FLOAT_RGB_NV = 0x8882,
	GL_FLOAT_RGBA_NV = 0x8883,
	GL_FLOAT_R16_NV = 0x8884,
	GL_FLOAT_R32_NV = 0x8885,
	GL_FLOAT_RG16_NV = 0x8886,
	GL_FLOAT_RG32_NV = 0x8887,
	GL_FLOAT_RGB16_NV = 0x8888,
	GL_FLOAT_RGB32_NV = 0x8889,
	GL_FLOAT_RGBA16_NV = 0x888A,
	GL_FLOAT_RGBA32_NV = 0x888B,
	GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C,
	GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D,
	GL_FLOAT_RGBA_MODE_NV = 0x888E,
	GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F,
	GL_DEPTH_BOUNDS_TEST_EXT = 0x8890,
	GL_DEPTH_BOUNDS_EXT = 0x8891,
	GL_ARRAY_BUFFER = 0x8892,
	GL_ARRAY_BUFFER_ARB = 0x8892,
	GL_ELEMENT_ARRAY_BUFFER = 0x8893,
	GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893,
	GL_ARRAY_BUFFER_BINDING = 0x8894,
	GL_ARRAY_BUFFER_BINDING_ARB = 0x8894,
	GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895,
	GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895,
	GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896,
	GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896,
	GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897,
	GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897,
	GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898,
	GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898,
	GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899,
	GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899,
	GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A,
	GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A,
	GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B,
	GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B,
	GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C,
	GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C,
	GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D,
	GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D,
	GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D,
	GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E,
	GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E,
	GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 0x889E,
	GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F,
	GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F,
	GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0,
	GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1,
	GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2,
	GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3,
	GL_PROGRAM_TEMPORARIES_ARB = 0x88A4,
	GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5,
	GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6,
	GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7,
	GL_PROGRAM_PARAMETERS_ARB = 0x88A8,
	GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9,
	GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA,
	GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB,
	GL_PROGRAM_ATTRIBS_ARB = 0x88AC,
	GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD,
	GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE,
	GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF,
	GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0,
	GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1,
	GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2,
	GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3,
	GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4,
	GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5,
	GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6,
	GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7,
	GL_READ_ONLY = 0x88B8,
	GL_READ_ONLY_ARB = 0x88B8,
	GL_WRITE_ONLY = 0x88B9,
	GL_WRITE_ONLY_ARB = 0x88B9,
	GL_WRITE_ONLY_OES = 0x88B9,
	GL_READ_WRITE = 0x88BA,
	GL_READ_WRITE_ARB = 0x88BA,
	GL_BUFFER_ACCESS = 0x88BB,
	GL_BUFFER_ACCESS_ARB = 0x88BB,
	GL_BUFFER_ACCESS_OES = 0x88BB,
	GL_BUFFER_MAPPED = 0x88BC,
	GL_BUFFER_MAPPED_ARB = 0x88BC,
	GL_BUFFER_MAPPED_OES = 0x88BC,
	GL_BUFFER_MAP_POINTER = 0x88BD,
	GL_BUFFER_MAP_POINTER_ARB = 0x88BD,
	GL_BUFFER_MAP_POINTER_OES = 0x88BD,
	GL_WRITE_DISCARD_NV = 0x88BE,
	GL_TIME_ELAPSED = 0x88BF,
	GL_TIME_ELAPSED_EXT = 0x88BF,
	GL_MATRIX0_ARB = 0x88C0,
	GL_MATRIX1_ARB = 0x88C1,
	GL_MATRIX2_ARB = 0x88C2,
	GL_MATRIX3_ARB = 0x88C3,
	GL_MATRIX4_ARB = 0x88C4,
	GL_MATRIX5_ARB = 0x88C5,
	GL_MATRIX6_ARB = 0x88C6,
	GL_MATRIX7_ARB = 0x88C7,
	GL_MATRIX8_ARB = 0x88C8,
	GL_MATRIX9_ARB = 0x88C9,
	GL_MATRIX10_ARB = 0x88CA,
	GL_MATRIX11_ARB = 0x88CB,
	GL_MATRIX12_ARB = 0x88CC,
	GL_MATRIX13_ARB = 0x88CD,
	GL_MATRIX14_ARB = 0x88CE,
	GL_MATRIX15_ARB = 0x88CF,
	GL_MATRIX16_ARB = 0x88D0,
	GL_MATRIX17_ARB = 0x88D1,
	GL_MATRIX18_ARB = 0x88D2,
	GL_MATRIX19_ARB = 0x88D3,
	GL_MATRIX20_ARB = 0x88D4,
	GL_MATRIX21_ARB = 0x88D5,
	GL_MATRIX22_ARB = 0x88D6,
	GL_MATRIX23_ARB = 0x88D7,
	GL_MATRIX24_ARB = 0x88D8,
	GL_MATRIX25_ARB = 0x88D9,
	GL_MATRIX26_ARB = 0x88DA,
	GL_MATRIX27_ARB = 0x88DB,
	GL_MATRIX28_ARB = 0x88DC,
	GL_MATRIX29_ARB = 0x88DD,
	GL_MATRIX30_ARB = 0x88DE,
	GL_MATRIX31_ARB = 0x88DF,
	GL_STREAM_DRAW = 0x88E0,
	GL_STREAM_DRAW_ARB = 0x88E0,
	GL_STREAM_READ = 0x88E1,
	GL_STREAM_READ_ARB = 0x88E1,
	GL_STREAM_COPY = 0x88E2,
	GL_STREAM_COPY_ARB = 0x88E2,
	GL_STATIC_DRAW = 0x88E4,
	GL_STATIC_DRAW_ARB = 0x88E4,
	GL_STATIC_READ = 0x88E5,
	GL_STATIC_READ_ARB = 0x88E5,
	GL_STATIC_COPY = 0x88E6,
	GL_STATIC_COPY_ARB = 0x88E6,
	GL_DYNAMIC_DRAW = 0x88E8,
	GL_DYNAMIC_DRAW_ARB = 0x88E8,
	GL_DYNAMIC_READ = 0x88E9,
	GL_DYNAMIC_READ_ARB = 0x88E9,
	GL_DYNAMIC_COPY = 0x88EA,
	GL_DYNAMIC_COPY_ARB = 0x88EA,
	GL_PIXEL_PACK_BUFFER = 0x88EB,
	GL_PIXEL_PACK_BUFFER_ARB = 0x88EB,
	GL_PIXEL_PACK_BUFFER_EXT = 0x88EB,
	GL_PIXEL_PACK_BUFFER_NV = 0x88EB,
	GL_PIXEL_UNPACK_BUFFER = 0x88EC,
	GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC,
	GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC,
	GL_PIXEL_UNPACK_BUFFER_NV = 0x88EC,
	GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED,
	GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED,
	GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED,
	GL_PIXEL_PACK_BUFFER_BINDING_NV = 0x88ED,
	GL_ETC1_SRGB8_NV = 0x88EE,
	GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF,
	GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF,
	GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF,
	GL_PIXEL_UNPACK_BUFFER_BINDING_NV = 0x88EF,
	GL_DEPTH24_STENCIL8 = 0x88F0,
	GL_DEPTH24_STENCIL8_EXT = 0x88F0,
	GL_DEPTH24_STENCIL8_OES = 0x88F0,
	GL_TEXTURE_STENCIL_SIZE = 0x88F1,
	GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1,
	GL_STENCIL_TAG_BITS_EXT = 0x88F2,
	GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3,
	GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4,
	GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5,
	GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6,
	GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7,
	GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8,
	GL_SRC1_COLOR = 0x88F9,
	GL_SRC1_COLOR_EXT = 0x88F9,
	GL_ONE_MINUS_SRC1_COLOR = 0x88FA,
	GL_ONE_MINUS_SRC1_COLOR_EXT = 0x88FA,
	GL_ONE_MINUS_SRC1_ALPHA = 0x88FB,
	GL_ONE_MINUS_SRC1_ALPHA_EXT = 0x88FB,
	GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC,
	GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 0x88FC,
	GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD,
	GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD,
	GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD,
	GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE,
	GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE,
	GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE,
	GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 0x88FE,
	GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 0x88FE,
	GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF,
	GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF,
	GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904,
	GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904,
	GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904,
	GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905,
	GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905,
	GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905,
	GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906,
	GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907,
	GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908,
	GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909,
	GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910,
	GL_ACTIVE_STENCIL_FACE_EXT = 0x8911,
	GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912,
	GL_SAMPLES_PASSED = 0x8914,
	GL_SAMPLES_PASSED_ARB = 0x8914,
	GL_GEOMETRY_VERTICES_OUT = 0x8916,
	GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 0x8916,
	GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 0x8916,
	GL_GEOMETRY_INPUT_TYPE = 0x8917,
	GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 0x8917,
	GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 0x8917,
	GL_GEOMETRY_OUTPUT_TYPE = 0x8918,
	GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 0x8918,
	GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 0x8918,
	GL_SAMPLER_BINDING = 0x8919,
	GL_CLAMP_VERTEX_COLOR = 0x891A,
	GL_CLAMP_VERTEX_COLOR_ARB = 0x891A,
	GL_CLAMP_FRAGMENT_COLOR = 0x891B,
	GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B,
	GL_CLAMP_READ_COLOR = 0x891C,
	GL_CLAMP_READ_COLOR_ARB = 0x891C,
	GL_FIXED_ONLY = 0x891D,
	GL_FIXED_ONLY_ARB = 0x891D,
	GL_TESS_CONTROL_PROGRAM_NV = 0x891E,
	GL_TESS_EVALUATION_PROGRAM_NV = 0x891F,
};
typedef enum {
	GL_FRAGMENT_SHADER_ATI = 0x8920,
	GL_REG_0_ATI = 0x8921,
	GL_REG_1_ATI = 0x8922,
	GL_REG_2_ATI = 0x8923,
	GL_REG_3_ATI = 0x8924,
	GL_REG_4_ATI = 0x8925,
	GL_REG_5_ATI = 0x8926,
	GL_REG_6_ATI = 0x8927,
	GL_REG_7_ATI = 0x8928,
	GL_REG_8_ATI = 0x8929,
	GL_REG_9_ATI = 0x892A,
	GL_REG_10_ATI = 0x892B,
	GL_REG_11_ATI = 0x892C,
	GL_REG_12_ATI = 0x892D,
	GL_REG_13_ATI = 0x892E,
	GL_REG_14_ATI = 0x892F,
	GL_REG_15_ATI = 0x8930,
	GL_REG_16_ATI = 0x8931,
	GL_REG_17_ATI = 0x8932,
	GL_REG_18_ATI = 0x8933,
	GL_REG_19_ATI = 0x8934,
	GL_REG_20_ATI = 0x8935,
	GL_REG_21_ATI = 0x8936,
	GL_REG_22_ATI = 0x8937,
	GL_REG_23_ATI = 0x8938,
	GL_REG_24_ATI = 0x8939,
	GL_REG_25_ATI = 0x893A,
	GL_REG_26_ATI = 0x893B,
	GL_REG_27_ATI = 0x893C,
	GL_REG_28_ATI = 0x893D,
	GL_REG_29_ATI = 0x893E,
	GL_REG_30_ATI = 0x893F,
	GL_REG_31_ATI = 0x8940,
	GL_CON_0_ATI = 0x8941,
	GL_CON_1_ATI = 0x8942,
	GL_CON_2_ATI = 0x8943,
	GL_CON_3_ATI = 0x8944,
	GL_CON_4_ATI = 0x8945,
	GL_CON_5_ATI = 0x8946,
	GL_CON_6_ATI = 0x8947,
	GL_CON_7_ATI = 0x8948,
	GL_CON_8_ATI = 0x8949,
	GL_CON_9_ATI = 0x894A,
	GL_CON_10_ATI = 0x894B,
	GL_CON_11_ATI = 0x894C,
	GL_CON_12_ATI = 0x894D,
	GL_CON_13_ATI = 0x894E,
	GL_CON_14_ATI = 0x894F,
	GL_CON_15_ATI = 0x8950,
	GL_CON_16_ATI = 0x8951,
	GL_CON_17_ATI = 0x8952,
	GL_CON_18_ATI = 0x8953,
	GL_CON_19_ATI = 0x8954,
	GL_CON_20_ATI = 0x8955,
	GL_CON_21_ATI = 0x8956,
	GL_CON_22_ATI = 0x8957,
	GL_CON_23_ATI = 0x8958,
	GL_CON_24_ATI = 0x8959,
	GL_CON_25_ATI = 0x895A,
	GL_CON_26_ATI = 0x895B,
	GL_CON_27_ATI = 0x895C,
	GL_CON_28_ATI = 0x895D,
	GL_CON_29_ATI = 0x895E,
	GL_CON_30_ATI = 0x895F,
	GL_CON_31_ATI = 0x8960,
	GL_MOV_ATI = 0x8961,
	GL_ADD_ATI = 0x8963,
	GL_MUL_ATI = 0x8964,
	GL_SUB_ATI = 0x8965,
	GL_DOT3_ATI = 0x8966,
	GL_DOT4_ATI = 0x8967,
	GL_MAD_ATI = 0x8968,
	GL_LERP_ATI = 0x8969,
	GL_CND_ATI = 0x896A,
	GL_CND0_ATI = 0x896B,
	GL_DOT2_ADD_ATI = 0x896C,
	GL_SECONDARY_INTERPOLATOR_ATI = 0x896D,
	GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E,
	GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F,
	GL_NUM_PASSES_ATI = 0x8970,
	GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971,
	GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972,
	GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973,
	GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974,
	GL_COLOR_ALPHA_PAIRING_ATI = 0x8975,
	GL_SWIZZLE_STR_ATI = 0x8976,
	GL_SWIZZLE_STQ_ATI = 0x8977,
	GL_SWIZZLE_STR_DR_ATI = 0x8978,
	GL_SWIZZLE_STQ_DQ_ATI = 0x8979,
	GL_SWIZZLE_STRQ_ATI = 0x897A,
	GL_SWIZZLE_STRQ_DQ_ATI = 0x897B,
};
typedef enum {
	GL_INTERLACE_OML = 0x8980,
	GL_INTERLACE_READ_OML = 0x8981,
	GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982,
	GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983,
	GL_PACK_RESAMPLE_OML = 0x8984,
	GL_UNPACK_RESAMPLE_OML = 0x8985,
	GL_RESAMPLE_REPLICATE_OML = 0x8986,
	GL_RESAMPLE_ZERO_FILL_OML = 0x8987,
	GL_RESAMPLE_AVERAGE_OML = 0x8988,
	GL_RESAMPLE_DECIMATE_OML = 0x8989,
	GL_POINT_SIZE_ARRAY_TYPE_OES = 0x898A,
	GL_POINT_SIZE_ARRAY_STRIDE_OES = 0x898B,
	GL_POINT_SIZE_ARRAY_POINTER_OES = 0x898C,
	GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898D,
	GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898E,
	GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898F,
};
typedef enum {
};
typedef enum {
};
typedef enum {
	GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00,
	GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01,
	GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02,
	GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03,
	GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04,
	GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05,
	GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06,
	GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07,
	GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08,
	GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09,
	GL_DRAW_PIXELS_APPLE = 0x8A0A,
	GL_FENCE_APPLE = 0x8A0B,
	GL_ELEMENT_ARRAY_APPLE = 0x8A0C,
	GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D,
	GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E,
	GL_COLOR_FLOAT_APPLE = 0x8A0F,
	GL_UNIFORM_BUFFER = 0x8A11,
	GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12,
	GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13,
	GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14,
	GL_PACK_ROW_BYTES_APPLE = 0x8A15,
	GL_UNPACK_ROW_BYTES_APPLE = 0x8A16,
	GL_RELEASED_APPLE = 0x8A19,
	GL_VOLATILE_APPLE = 0x8A1A,
	GL_RETAINED_APPLE = 0x8A1B,
	GL_UNDEFINED_APPLE = 0x8A1C,
	GL_PURGEABLE_APPLE = 0x8A1D,
	GL_RGB_422_APPLE = 0x8A1F,
	GL_UNIFORM_BUFFER_BINDING = 0x8A28,
	GL_UNIFORM_BUFFER_START = 0x8A29,
	GL_UNIFORM_BUFFER_SIZE = 0x8A2A,
	GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B,
	GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C,
	GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 0x8A2C,
	GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 0x8A2C,
	GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D,
	GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E,
	GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F,
	GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30,
	GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31,
	GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32,
	GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8A32,
	GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8A32,
	GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33,
	GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34,
	GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35,
	GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36,
	GL_UNIFORM_TYPE = 0x8A37,
	GL_UNIFORM_SIZE = 0x8A38,
	GL_UNIFORM_NAME_LENGTH = 0x8A39,
	GL_UNIFORM_BLOCK_INDEX = 0x8A3A,
	GL_UNIFORM_OFFSET = 0x8A3B,
	GL_UNIFORM_ARRAY_STRIDE = 0x8A3C,
	GL_UNIFORM_MATRIX_STRIDE = 0x8A3D,
	GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E,
	GL_UNIFORM_BLOCK_BINDING = 0x8A3F,
	GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40,
	GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41,
	GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42,
	GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43,
	GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44,
	GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45,
	GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46,
	GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48,
	GL_DECODE_EXT = 0x8A49,
	GL_SKIP_DECODE_EXT = 0x8A4A,
	GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F,
	GL_RGB_RAW_422_APPLE = 0x8A51,
	GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52,
	GL_SYNC_OBJECT_APPLE = 0x8A53,
	GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 0x8A54,
	GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 0x8A55,
	GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 0x8A56,
	GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 0x8A57,
};
typedef enum {
};
typedef enum {
}; // For Brian Paul
typedef enum {
	GL_FRAGMENT_SHADER = 0x8B30,
	GL_FRAGMENT_SHADER_ARB = 0x8B30,
	GL_VERTEX_SHADER = 0x8B31,
	GL_VERTEX_SHADER_ARB = 0x8B31,
} GL_ShaderType_t;
typedef enum {
	GL_PROGRAM_OBJECT_ARB = 0x8B40,
	GL_PROGRAM_OBJECT_EXT = 0x8B40,
} GL_ContainerType_t;
typedef enum {
	GL_SHADER_OBJECT_ARB = 0x8B48,
	GL_SHADER_OBJECT_EXT = 0x8B48,
	GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,
	GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49,
	GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A,
	GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A,
	GL_MAX_VARYING_FLOATS = 0x8B4B,
	GL_MAX_VARYING_COMPONENTS = 0x8B4B,
	GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B,
	GL_MAX_VARYING_FLOATS_ARB = 0x8B4B,
	GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
	GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C,
	GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
	GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D,
	GL_OBJECT_TYPE_ARB = 0x8B4E,
	GL_SHADER_TYPE = 0x8B4F,
	GL_OBJECT_SUBTYPE_ARB = 0x8B4F,
};
typedef enum {
	GL_FLOAT_VEC2 = 0x8B50,
	GL_FLOAT_VEC2_ARB = 0x8B50,
	GL_FLOAT_VEC3 = 0x8B51,
	GL_FLOAT_VEC3_ARB = 0x8B51,
	GL_FLOAT_VEC4 = 0x8B52,
	GL_FLOAT_VEC4_ARB = 0x8B52,
	GL_INT_VEC2 = 0x8B53,
	GL_INT_VEC2_ARB = 0x8B53,
	GL_INT_VEC3 = 0x8B54,
	GL_INT_VEC3_ARB = 0x8B54,
	GL_INT_VEC4 = 0x8B55,
	GL_INT_VEC4_ARB = 0x8B55,
	GL_BOOL = 0x8B56,
	GL_BOOL_ARB = 0x8B56,
	GL_BOOL_VEC2 = 0x8B57,
	GL_BOOL_VEC2_ARB = 0x8B57,
	GL_BOOL_VEC3 = 0x8B58,
	GL_BOOL_VEC3_ARB = 0x8B58,
	GL_BOOL_VEC4 = 0x8B59,
	GL_BOOL_VEC4_ARB = 0x8B59,
	GL_FLOAT_MAT2 = 0x8B5A,
	GL_FLOAT_MAT2_ARB = 0x8B5A,
	GL_FLOAT_MAT3 = 0x8B5B,
	GL_FLOAT_MAT3_ARB = 0x8B5B,
	GL_FLOAT_MAT4 = 0x8B5C,
	GL_FLOAT_MAT4_ARB = 0x8B5C,
	GL_SAMPLER_1D = 0x8B5D,
	GL_SAMPLER_1D_ARB = 0x8B5D,
	GL_SAMPLER_2D = 0x8B5E,
	GL_SAMPLER_2D_ARB = 0x8B5E,
	GL_SAMPLER_3D = 0x8B5F,
	GL_SAMPLER_3D_ARB = 0x8B5F,
	GL_SAMPLER_3D_OES = 0x8B5F,
	GL_SAMPLER_CUBE = 0x8B60,
	GL_SAMPLER_CUBE_ARB = 0x8B60,
	GL_SAMPLER_1D_SHADOW = 0x8B61,
	GL_SAMPLER_1D_SHADOW_ARB = 0x8B61,
	GL_SAMPLER_2D_SHADOW = 0x8B62,
	GL_SAMPLER_2D_SHADOW_ARB = 0x8B62,
	GL_SAMPLER_2D_SHADOW_EXT = 0x8B62,
	GL_SAMPLER_2D_RECT = 0x8B63,
	GL_SAMPLER_2D_RECT_ARB = 0x8B63,
	GL_SAMPLER_2D_RECT_SHADOW = 0x8B64,
	GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64,
	GL_FLOAT_MAT2x3 = 0x8B65,
	GL_FLOAT_MAT2x3_NV = 0x8B65,
	GL_FLOAT_MAT2x4 = 0x8B66,
	GL_FLOAT_MAT2x4_NV = 0x8B66,
	GL_FLOAT_MAT3x2 = 0x8B67,
	GL_FLOAT_MAT3x2_NV = 0x8B67,
	GL_FLOAT_MAT3x4 = 0x8B68,
	GL_FLOAT_MAT3x4_NV = 0x8B68,
	GL_FLOAT_MAT4x2 = 0x8B69,
	GL_FLOAT_MAT4x2_NV = 0x8B69,
	GL_FLOAT_MAT4x3 = 0x8B6A,
	GL_FLOAT_MAT4x3_NV = 0x8B6A,
} GL_AttributeType_t;
typedef enum {
	GL_DELETE_STATUS = 0x8B80,
	GL_OBJECT_DELETE_STATUS_ARB = 0x8B80,
	GL_COMPILE_STATUS = 0x8B81,
	GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81,
	GL_LINK_STATUS = 0x8B82,
	GL_OBJECT_LINK_STATUS_ARB = 0x8B82,
	GL_VALIDATE_STATUS = 0x8B83,
	GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83,
	GL_INFO_LOG_LENGTH = 0x8B84,
	GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84,
	GL_ATTACHED_SHADERS = 0x8B85,
	GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85,
	GL_ACTIVE_UNIFORMS = 0x8B86,
	GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86,
	GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87,
	GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87,
	GL_SHADER_SOURCE_LENGTH = 0x8B88,
	GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88,
	GL_ACTIVE_ATTRIBUTES = 0x8B89,
	GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89,
	GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A,
	GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A,
	GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,
	GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B,
	GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B,
	GL_SHADING_LANGUAGE_VERSION = 0x8B8C,
	GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C,
	GL_CURRENT_PROGRAM = 0x8B8D,
	GL_ACTIVE_PROGRAM_EXT = 0x8B8D, // For the OpenGL version of EXT_separate_shader_objects
};
typedef enum {
	GL_PALETTE4_RGB8_OES = 0x8B90,
	GL_PALETTE4_RGBA8_OES = 0x8B91,
	GL_PALETTE4_R5_G6_B5_OES = 0x8B92,
	GL_PALETTE4_RGBA4_OES = 0x8B93,
	GL_PALETTE4_RGB5_A1_OES = 0x8B94,
	GL_PALETTE8_RGB8_OES = 0x8B95,
	GL_PALETTE8_RGBA8_OES = 0x8B96,
	GL_PALETTE8_R5_G6_B5_OES = 0x8B97,
	GL_PALETTE8_RGBA4_OES = 0x8B98,
	GL_PALETTE8_RGB5_A1_OES = 0x8B99,
	GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A,
	GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A,
	GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B,
	GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B,
	GL_POINT_SIZE_ARRAY_OES = 0x8B9C,
	GL_TEXTURE_CROP_RECT_OES = 0x8B9D,
	GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9E,
	GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9F,
};
typedef enum {
};
typedef enum {
	GL_FRAGMENT_PROGRAM_POSITION_MESA = 0x8BB0,
	GL_FRAGMENT_PROGRAM_CALLBACK_MESA = 0x8BB1,
	GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB2,
	GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 0x8BB3,
	GL_VERTEX_PROGRAM_POSITION_MESA = 0x8BB4,
	GL_VERTEX_PROGRAM_CALLBACK_MESA = 0x8BB5,
	GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB6,
	GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = 0x8BB7,
	GL_TILE_RASTER_ORDER_FIXED_MESA = 0x8BB8,
	GL_TILE_RASTER_ORDER_INCREASING_X_MESA = 0x8BB9,
	GL_TILE_RASTER_ORDER_INCREASING_Y_MESA = 0x8BBA,
	GL_FRAMEBUFFER_FLIP_Y_MESA = 0x8BBB,
	GL_FRAMEBUFFER_FLIP_X_MESA = 0x8BBC,
	GL_FRAMEBUFFER_SWAP_XY_MESA = 0x8BBD,
};
typedef enum {
	GL_COUNTER_TYPE_AMD = 0x8BC0,
	GL_COUNTER_RANGE_AMD = 0x8BC1,
	GL_UNSIGNED_INT64_AMD = 0x8BC2,
	GL_PERCENTAGE_AMD = 0x8BC3,
	GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4,
	GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5,
	GL_PERFMON_RESULT_AMD = 0x8BC6,
	GL_TEXTURE_WIDTH_QCOM = 0x8BD2,
	GL_TEXTURE_HEIGHT_QCOM = 0x8BD3,
	GL_TEXTURE_DEPTH_QCOM = 0x8BD4,
	GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5,
	GL_TEXTURE_FORMAT_QCOM = 0x8BD6,
	GL_TEXTURE_TYPE_QCOM = 0x8BD7,
	GL_TEXTURE_IMAGE_VALID_QCOM = 0x8BD8,
	GL_TEXTURE_NUM_LEVELS_QCOM = 0x8BD9,
	GL_TEXTURE_TARGET_QCOM = 0x8BDA,
	GL_TEXTURE_OBJECT_VALID_QCOM = 0x8BDB,
	GL_STATE_RESTORE = 0x8BDC,
	GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = 0x8BE7,
	GL_TEXTURE_PROTECTED_EXT = 0x8BFA,
	GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = 0x8BFB,
	GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = 0x8BFC,
	GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = 0x8BFD,
	GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = 0x8BFE,
	GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = 0x8BFF,
}; // Reassigned from AMD to QCOM
typedef enum {
	GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00,
	GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01,
	GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02,
	GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03,
	GL_MODULATE_COLOR_IMG = 0x8C04,
	GL_RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05,
	GL_TEXTURE_ALPHA_MODULATE_IMG = 0x8C06,
	GL_FACTOR_ALPHA_MODULATE_IMG = 0x8C07,
	GL_FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08,
	GL_ADD_BLEND_IMG = 0x8C09,
	GL_SGX_BINARY_IMG = 0x8C0A,
};
typedef enum {
	GL_TEXTURE_RED_TYPE = 0x8C10,
	GL_TEXTURE_RED_TYPE_ARB = 0x8C10,
	GL_TEXTURE_GREEN_TYPE = 0x8C11,
	GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11,
	GL_TEXTURE_BLUE_TYPE = 0x8C12,
	GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12,
	GL_TEXTURE_ALPHA_TYPE = 0x8C13,
	GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13,
	GL_TEXTURE_LUMINANCE_TYPE = 0x8C14,
	GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14,
	GL_TEXTURE_INTENSITY_TYPE = 0x8C15,
	GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15,
	GL_TEXTURE_DEPTH_TYPE = 0x8C16,
	GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16,
	GL_UNSIGNED_NORMALIZED = 0x8C17,
	GL_UNSIGNED_NORMALIZED_ARB = 0x8C17,
	GL_UNSIGNED_NORMALIZED_EXT = 0x8C17,
	GL_TEXTURE_1D_ARRAY = 0x8C18,
	GL_TEXTURE_1D_ARRAY_EXT = 0x8C18,
	GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19,
	GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19,
	GL_TEXTURE_2D_ARRAY = 0x8C1A,
	GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A,
	GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B,
	GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B,
	GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C,
	GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C,
	GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D,
	GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D,
	GL_GEOMETRY_PROGRAM_NV = 0x8C26,
	GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27,
	GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28,
	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29,
	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29,
	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29,
	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 0x8C29,
	GL_TEXTURE_BUFFER = 0x8C2A,
	GL_TEXTURE_BUFFER_ARB = 0x8C2A,
	GL_TEXTURE_BUFFER_EXT = 0x8C2A,
	GL_TEXTURE_BUFFER_OES = 0x8C2A,
	GL_TEXTURE_BUFFER_BINDING = 0x8C2A, // Equivalent to GL_TEXTURE_BUFFER_ARB query, but named more consistently
	GL_TEXTURE_BUFFER_BINDING_EXT = 0x8C2A,
	GL_TEXTURE_BUFFER_BINDING_OES = 0x8C2A,
	GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B,
	GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B,
	GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B,
	GL_MAX_TEXTURE_BUFFER_SIZE_OES = 0x8C2B,
	GL_TEXTURE_BINDING_BUFFER = 0x8C2C,
	GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C,
	GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C,
	GL_TEXTURE_BINDING_BUFFER_OES = 0x8C2C,
	GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D,
	GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D,
	GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D,
	GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 0x8C2D,
	GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E,
	GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E,
	GL_ANY_SAMPLES_PASSED = 0x8C2F,
	GL_ANY_SAMPLES_PASSED_EXT = 0x8C2F,
	GL_SAMPLE_SHADING = 0x8C36,
	GL_SAMPLE_SHADING_ARB = 0x8C36,
	GL_SAMPLE_SHADING_OES = 0x8C36,
	GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37,
	GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37,
	GL_MIN_SAMPLE_SHADING_VALUE_OES = 0x8C37,
	GL_R11F_G11F_B10F = 0x8C3A,
	GL_R11F_G11F_B10F_APPLE = 0x8C3A,
	GL_R11F_G11F_B10F_EXT = 0x8C3A,
	GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
	GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 0x8C3B,
	GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B,
	GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C,
	GL_RGB9_E5 = 0x8C3D,
	GL_RGB9_E5_APPLE = 0x8C3D,
	GL_RGB9_E5_EXT = 0x8C3D,
	GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E,
	GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 0x8C3E,
	GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E,
	GL_TEXTURE_SHARED_SIZE = 0x8C3F,
	GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F,
	GL_SRGB = 0x8C40,
	GL_SRGB_EXT = 0x8C40,
	GL_SRGB8 = 0x8C41,
	GL_SRGB8_EXT = 0x8C41,
	GL_SRGB8_NV = 0x8C41,
	GL_SRGB_ALPHA = 0x8C42,
	GL_SRGB_ALPHA_EXT = 0x8C42,
	GL_SRGB8_ALPHA8 = 0x8C43,
	GL_SRGB8_ALPHA8_EXT = 0x8C43,
	GL_SLUMINANCE_ALPHA = 0x8C44,
	GL_SLUMINANCE_ALPHA_EXT = 0x8C44,
	GL_SLUMINANCE_ALPHA_NV = 0x8C44,
	GL_SLUMINANCE8_ALPHA8 = 0x8C45,
	GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45,
	GL_SLUMINANCE8_ALPHA8_NV = 0x8C45,
	GL_SLUMINANCE = 0x8C46,
	GL_SLUMINANCE_EXT = 0x8C46,
	GL_SLUMINANCE_NV = 0x8C46,
	GL_SLUMINANCE8 = 0x8C47,
	GL_SLUMINANCE8_EXT = 0x8C47,
	GL_SLUMINANCE8_NV = 0x8C47,
	GL_COMPRESSED_SRGB = 0x8C48,
	GL_COMPRESSED_SRGB_EXT = 0x8C48,
	GL_COMPRESSED_SRGB_ALPHA = 0x8C49,
	GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49,
	GL_COMPRESSED_SLUMINANCE = 0x8C4A,
	GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A,
	GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B,
	GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B,
	GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C,
	GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4C,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4D,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4E,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4F,
	GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70,
	GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71,
	GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72,
	GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73,
	GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74,
	GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75,
	GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76,
	GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76,
	GL_BACK_PRIMARY_COLOR_NV = 0x8C77,
	GL_BACK_SECONDARY_COLOR_NV = 0x8C78,
	GL_TEXTURE_COORD_NV = 0x8C79,
	GL_CLIP_DISTANCE_NV = 0x8C7A,
	GL_VERTEX_ID_NV = 0x8C7B,
	GL_PRIMITIVE_ID_NV = 0x8C7C,
	GL_GENERIC_ATTRIB_NV = 0x8C7D,
	GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E,
	GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F,
	GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F,
	GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80,
	GL_ACTIVE_VARYINGS_NV = 0x8C81,
	GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82,
	GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83,
	GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83,
	GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83,
	GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84,
	GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84,
	GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84,
	GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85,
	GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85,
	GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85,
	GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86,
	GL_PRIMITIVES_GENERATED = 0x8C87,
	GL_PRIMITIVES_GENERATED_EXT = 0x8C87,
	GL_PRIMITIVES_GENERATED_NV = 0x8C87,
	GL_PRIMITIVES_GENERATED_OES = 0x8C87,
	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88,
	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88,
	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88,
	GL_RASTERIZER_DISCARD = 0x8C89,
	GL_RASTERIZER_DISCARD_EXT = 0x8C89,
	GL_RASTERIZER_DISCARD_NV = 0x8C89,
	GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A,
	GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A,
	GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B,
	GL_INTERLEAVED_ATTRIBS = 0x8C8C,
	GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C,
	GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C,
	GL_SEPARATE_ATTRIBS = 0x8C8D,
	GL_SEPARATE_ATTRIBS_EXT = 0x8C8D,
	GL_SEPARATE_ATTRIBS_NV = 0x8C8D,
	GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E,
	GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E,
	GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E,
	GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F,
	GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F,
	GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F,
}; // For Pat Brown
typedef enum {
	GL_MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM = 0x8C90,
	GL_MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM = 0x8C91,
	GL_ATC_RGB_AMD = 0x8C92,
	GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93,
}; // For Affie Munshi. Reassigned from AMD to QCOM (bug 5874)
typedef enum {
	GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0,
	GL_LOWER_LEFT = 0x8CA1,
	GL_LOWER_LEFT_EXT = 0x8CA1,
	GL_UPPER_LEFT = 0x8CA2,
	GL_UPPER_LEFT_EXT = 0x8CA2,
	GL_STENCIL_BACK_REF = 0x8CA3,
	GL_STENCIL_BACK_VALUE_MASK = 0x8CA4,
	GL_STENCIL_BACK_WRITEMASK = 0x8CA5,
	GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6,
	GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6,
	GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6,
	GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6,
	GL_DRAW_FRAMEBUFFER_BINDING_NV = 0x8CA6,
	GL_FRAMEBUFFER_BINDING = 0x8CA6,
	GL_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6,
	GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6,
	GL_FRAMEBUFFER_BINDING_OES = 0x8CA6,
	GL_RENDERBUFFER_BINDING = 0x8CA7,
	GL_RENDERBUFFER_BINDING_ANGLE = 0x8CA7,
	GL_RENDERBUFFER_BINDING_EXT = 0x8CA7,
	GL_RENDERBUFFER_BINDING_OES = 0x8CA7,
	GL_READ_FRAMEBUFFER = 0x8CA8,
	GL_READ_FRAMEBUFFER_ANGLE = 0x8CA8,
	GL_READ_FRAMEBUFFER_APPLE = 0x8CA8,
	GL_READ_FRAMEBUFFER_EXT = 0x8CA8,
	GL_READ_FRAMEBUFFER_NV = 0x8CA8,
	GL_DRAW_FRAMEBUFFER = 0x8CA9,
	GL_DRAW_FRAMEBUFFER_ANGLE = 0x8CA9,
	GL_DRAW_FRAMEBUFFER_APPLE = 0x8CA9,
	GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9,
	GL_DRAW_FRAMEBUFFER_NV = 0x8CA9,
	GL_READ_FRAMEBUFFER_BINDING = 0x8CAA,
	GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x8CAA,
	GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAA,
	GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA,
	GL_READ_FRAMEBUFFER_BINDING_NV = 0x8CAA,
	GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB,
	GL_RENDERBUFFER_SAMPLES = 0x8CAB,
	GL_RENDERBUFFER_SAMPLES_ANGLE = 0x8CAB,
	GL_RENDERBUFFER_SAMPLES_APPLE = 0x8CAB,
	GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB,
	GL_RENDERBUFFER_SAMPLES_NV = 0x8CAB,
	GL_DEPTH_COMPONENT32F = 0x8CAC,
	GL_DEPTH32F_STENCIL8 = 0x8CAD,
};
typedef enum {
}; // For Barthold Lichtenbelt 2004/12/1
typedef enum {
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x8CD4,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4,
	GL_FRAMEBUFFER_COMPLETE = 0x8CD5,
	GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5,
	GL_FRAMEBUFFER_COMPLETE_OES = 0x8CD5,
	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6,
	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6,
	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 0x8CD6,
	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7,
	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7,
	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 0x8CD7,
	GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9,
	GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9,
	GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 0x8CD9,
	GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA,
	GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 0x8CDA,
	GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB,
	GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB,
	GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = 0x8CDB,
	GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC,
	GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC,
	GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = 0x8CDC,
	GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD,
	GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD,
	GL_FRAMEBUFFER_UNSUPPORTED_OES = 0x8CDD,
	GL_MAX_COLOR_ATTACHMENTS = 0x8CDF,
	GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF,
	GL_MAX_COLOR_ATTACHMENTS_NV = 0x8CDF,
	GL_COLOR_ATTACHMENT0 = 0x8CE0,
	GL_COLOR_ATTACHMENT0_EXT = 0x8CE0,
	GL_COLOR_ATTACHMENT0_NV = 0x8CE0,
	GL_COLOR_ATTACHMENT0_OES = 0x8CE0,
	GL_COLOR_ATTACHMENT1 = 0x8CE1,
	GL_COLOR_ATTACHMENT1_EXT = 0x8CE1,
	GL_COLOR_ATTACHMENT1_NV = 0x8CE1,
	GL_COLOR_ATTACHMENT2 = 0x8CE2,
	GL_COLOR_ATTACHMENT2_EXT = 0x8CE2,
	GL_COLOR_ATTACHMENT2_NV = 0x8CE2,
	GL_COLOR_ATTACHMENT3 = 0x8CE3,
	GL_COLOR_ATTACHMENT3_EXT = 0x8CE3,
	GL_COLOR_ATTACHMENT3_NV = 0x8CE3,
	GL_COLOR_ATTACHMENT4 = 0x8CE4,
	GL_COLOR_ATTACHMENT4_EXT = 0x8CE4,
	GL_COLOR_ATTACHMENT4_NV = 0x8CE4,
	GL_COLOR_ATTACHMENT5 = 0x8CE5,
	GL_COLOR_ATTACHMENT5_EXT = 0x8CE5,
	GL_COLOR_ATTACHMENT5_NV = 0x8CE5,
	GL_COLOR_ATTACHMENT6 = 0x8CE6,
	GL_COLOR_ATTACHMENT6_EXT = 0x8CE6,
	GL_COLOR_ATTACHMENT6_NV = 0x8CE6,
	GL_COLOR_ATTACHMENT7 = 0x8CE7,
	GL_COLOR_ATTACHMENT7_EXT = 0x8CE7,
	GL_COLOR_ATTACHMENT7_NV = 0x8CE7,
	GL_COLOR_ATTACHMENT8 = 0x8CE8,
	GL_COLOR_ATTACHMENT8_EXT = 0x8CE8,
	GL_COLOR_ATTACHMENT8_NV = 0x8CE8,
	GL_COLOR_ATTACHMENT9 = 0x8CE9,
	GL_COLOR_ATTACHMENT9_EXT = 0x8CE9,
	GL_COLOR_ATTACHMENT9_NV = 0x8CE9,
	GL_COLOR_ATTACHMENT10 = 0x8CEA,
	GL_COLOR_ATTACHMENT10_EXT = 0x8CEA,
	GL_COLOR_ATTACHMENT10_NV = 0x8CEA,
	GL_COLOR_ATTACHMENT11 = 0x8CEB,
	GL_COLOR_ATTACHMENT11_EXT = 0x8CEB,
	GL_COLOR_ATTACHMENT11_NV = 0x8CEB,
	GL_COLOR_ATTACHMENT12 = 0x8CEC,
	GL_COLOR_ATTACHMENT12_EXT = 0x8CEC,
	GL_COLOR_ATTACHMENT12_NV = 0x8CEC,
	GL_COLOR_ATTACHMENT13 = 0x8CED,
	GL_COLOR_ATTACHMENT13_EXT = 0x8CED,
	GL_COLOR_ATTACHMENT13_NV = 0x8CED,
	GL_COLOR_ATTACHMENT14 = 0x8CEE,
	GL_COLOR_ATTACHMENT14_EXT = 0x8CEE,
	GL_COLOR_ATTACHMENT14_NV = 0x8CEE,
	GL_COLOR_ATTACHMENT15 = 0x8CEF,
	GL_COLOR_ATTACHMENT15_EXT = 0x8CEF,
	GL_COLOR_ATTACHMENT15_NV = 0x8CEF,
	GL_COLOR_ATTACHMENT16 = 0x8CF0,
	GL_COLOR_ATTACHMENT17 = 0x8CF1,
	GL_COLOR_ATTACHMENT18 = 0x8CF2,
	GL_COLOR_ATTACHMENT19 = 0x8CF3,
	GL_COLOR_ATTACHMENT20 = 0x8CF4,
	GL_COLOR_ATTACHMENT21 = 0x8CF5,
	GL_COLOR_ATTACHMENT22 = 0x8CF6,
	GL_COLOR_ATTACHMENT23 = 0x8CF7,
	GL_COLOR_ATTACHMENT24 = 0x8CF8,
	GL_COLOR_ATTACHMENT25 = 0x8CF9,
	GL_COLOR_ATTACHMENT26 = 0x8CFA,
	GL_COLOR_ATTACHMENT27 = 0x8CFB,
	GL_COLOR_ATTACHMENT28 = 0x8CFC,
	GL_COLOR_ATTACHMENT29 = 0x8CFD,
	GL_COLOR_ATTACHMENT30 = 0x8CFE,
	GL_COLOR_ATTACHMENT31 = 0x8CFF,
	GL_DEPTH_ATTACHMENT = 0x8D00,
	GL_DEPTH_ATTACHMENT_EXT = 0x8D00,
	GL_DEPTH_ATTACHMENT_OES = 0x8D00,
	GL_STENCIL_ATTACHMENT = 0x8D20,
	GL_STENCIL_ATTACHMENT_EXT = 0x8D20,
	GL_STENCIL_ATTACHMENT_OES = 0x8D20,
	GL_FRAMEBUFFER = 0x8D40,
	GL_FRAMEBUFFER_EXT = 0x8D40,
	GL_FRAMEBUFFER_OES = 0x8D40,
	GL_RENDERBUFFER = 0x8D41,
	GL_RENDERBUFFER_EXT = 0x8D41,
	GL_RENDERBUFFER_OES = 0x8D41,
	GL_RENDERBUFFER_WIDTH = 0x8D42,
	GL_RENDERBUFFER_WIDTH_EXT = 0x8D42,
	GL_RENDERBUFFER_WIDTH_OES = 0x8D42,
	GL_RENDERBUFFER_HEIGHT = 0x8D43,
	GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43,
	GL_RENDERBUFFER_HEIGHT_OES = 0x8D43,
	GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44,
	GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44,
	GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44,
	GL_STENCIL_INDEX1 = 0x8D46,
	GL_STENCIL_INDEX1_EXT = 0x8D46,
	GL_STENCIL_INDEX1_OES = 0x8D46,
	GL_STENCIL_INDEX4 = 0x8D47,
	GL_STENCIL_INDEX4_EXT = 0x8D47,
	GL_STENCIL_INDEX4_OES = 0x8D47,
	GL_STENCIL_INDEX8 = 0x8D48,
	GL_STENCIL_INDEX8_EXT = 0x8D48,
	GL_STENCIL_INDEX8_OES = 0x8D48,
	GL_STENCIL_INDEX16 = 0x8D49,
	GL_STENCIL_INDEX16_EXT = 0x8D49,
	GL_RENDERBUFFER_RED_SIZE = 0x8D50,
	GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50,
	GL_RENDERBUFFER_RED_SIZE_OES = 0x8D50,
	GL_RENDERBUFFER_GREEN_SIZE = 0x8D51,
	GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51,
	GL_RENDERBUFFER_GREEN_SIZE_OES = 0x8D51,
	GL_RENDERBUFFER_BLUE_SIZE = 0x8D52,
	GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52,
	GL_RENDERBUFFER_BLUE_SIZE_OES = 0x8D52,
	GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53,
	GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53,
	GL_RENDERBUFFER_ALPHA_SIZE_OES = 0x8D53,
	GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54,
	GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54,
	GL_RENDERBUFFER_DEPTH_SIZE_OES = 0x8D54,
	GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55,
	GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55,
	GL_RENDERBUFFER_STENCIL_SIZE_OES = 0x8D55,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x8D56,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 0x8D56,
	GL_MAX_SAMPLES = 0x8D57,
	GL_MAX_SAMPLES_ANGLE = 0x8D57,
	GL_MAX_SAMPLES_APPLE = 0x8D57,
	GL_MAX_SAMPLES_EXT = 0x8D57,
	GL_MAX_SAMPLES_NV = 0x8D57,
}; // Framebuffer object specification + headroom
typedef enum {
	GL_TEXTURE_GEN_STR_OES = 0x8D60,
	GL_HALF_FLOAT_OES = 0x8D61,
	GL_RGB565_OES = 0x8D62,
	GL_RGB565 = 0x8D62,
	GL_ETC1_RGB8_OES = 0x8D64,
	GL_TEXTURE_EXTERNAL_OES = 0x8D65,
	GL_SAMPLER_EXTERNAL_OES = 0x8D66,
	GL_TEXTURE_BINDING_EXTERNAL_OES = 0x8D67,
	GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68,
	GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69,
	GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A,
	GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 0x8D6A,
	GL_MAX_ELEMENT_INDEX = 0x8D6B,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C,
};
typedef enum {
	GL_RGBA32UI = 0x8D70,
	GL_RGBA32UI_EXT = 0x8D70,
	GL_RGB32UI = 0x8D71,
	GL_RGB32UI_EXT = 0x8D71,
	GL_ALPHA32UI_EXT = 0x8D72,
	GL_INTENSITY32UI_EXT = 0x8D73,
	GL_LUMINANCE32UI_EXT = 0x8D74,
	GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75,
	GL_RGBA16UI = 0x8D76,
	GL_RGBA16UI_EXT = 0x8D76,
	GL_RGB16UI = 0x8D77,
	GL_RGB16UI_EXT = 0x8D77,
	GL_ALPHA16UI_EXT = 0x8D78,
	GL_INTENSITY16UI_EXT = 0x8D79,
	GL_LUMINANCE16UI_EXT = 0x8D7A,
	GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B,
	GL_RGBA8UI = 0x8D7C,
	GL_RGBA8UI_EXT = 0x8D7C,
	GL_RGB8UI = 0x8D7D,
	GL_RGB8UI_EXT = 0x8D7D,
	GL_ALPHA8UI_EXT = 0x8D7E,
	GL_INTENSITY8UI_EXT = 0x8D7F,
	GL_LUMINANCE8UI_EXT = 0x8D80,
	GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81,
	GL_RGBA32I = 0x8D82,
	GL_RGBA32I_EXT = 0x8D82,
	GL_RGB32I = 0x8D83,
	GL_RGB32I_EXT = 0x8D83,
	GL_ALPHA32I_EXT = 0x8D84,
	GL_INTENSITY32I_EXT = 0x8D85,
	GL_LUMINANCE32I_EXT = 0x8D86,
	GL_LUMINANCE_ALPHA32I_EXT = 0x8D87,
	GL_RGBA16I = 0x8D88,
	GL_RGBA16I_EXT = 0x8D88,
	GL_RGB16I = 0x8D89,
	GL_RGB16I_EXT = 0x8D89,
	GL_ALPHA16I_EXT = 0x8D8A,
	GL_INTENSITY16I_EXT = 0x8D8B,
	GL_LUMINANCE16I_EXT = 0x8D8C,
	GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D,
	GL_RGBA8I = 0x8D8E,
	GL_RGBA8I_EXT = 0x8D8E,
	GL_RGB8I = 0x8D8F,
	GL_RGB8I_EXT = 0x8D8F,
	GL_ALPHA8I_EXT = 0x8D90,
	GL_INTENSITY8I_EXT = 0x8D91,
	GL_LUMINANCE8I_EXT = 0x8D92,
	GL_LUMINANCE_ALPHA8I_EXT = 0x8D93,
	GL_RED_INTEGER = 0x8D94,
	GL_RED_INTEGER_EXT = 0x8D94,
	GL_GREEN_INTEGER = 0x8D95,
	GL_GREEN_INTEGER_EXT = 0x8D95,
	GL_BLUE_INTEGER = 0x8D96,
	GL_BLUE_INTEGER_EXT = 0x8D96,
	GL_ALPHA_INTEGER = 0x8D97,
	GL_ALPHA_INTEGER_EXT = 0x8D97,
	GL_RGB_INTEGER = 0x8D98,
	GL_RGB_INTEGER_EXT = 0x8D98,
	GL_RGBA_INTEGER = 0x8D99,
	GL_RGBA_INTEGER_EXT = 0x8D99,
	GL_BGR_INTEGER = 0x8D9A,
	GL_BGR_INTEGER_EXT = 0x8D9A,
	GL_BGRA_INTEGER = 0x8D9B,
	GL_BGRA_INTEGER_EXT = 0x8D9B,
	GL_LUMINANCE_INTEGER_EXT = 0x8D9C,
	GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D,
	GL_RGBA_INTEGER_MODE_EXT = 0x8D9E,
	GL_INT_2_10_10_10_REV = 0x8D9F,
	GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0,
	GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1,
	GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2,
	GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3,
	GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4,
	GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5,
	GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6,
	GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7,
	GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7,
	GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7,
	GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 0x8DA7,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 0x8DA8,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9,
	GL_LAYER_NV = 0x8DAA,
	GL_DEPTH_COMPONENT32F_NV = 0x8DAB,
	GL_DEPTH32F_STENCIL8_NV = 0x8DAC,
	GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,
	GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD,
	GL_SHADER_INCLUDE_ARB = 0x8DAE,
	GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF,
	GL_FRAMEBUFFER_SRGB = 0x8DB9,
	GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9,
	GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA,
	GL_COMPRESSED_RED_RGTC1 = 0x8DBB,
	GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB,
	GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC,
	GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC,
	GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD,
	GL_COMPRESSED_RG_RGTC2 = 0x8DBD,
	GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE,
	GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE,
	GL_SAMPLER_1D_ARRAY = 0x8DC0,
	GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0,
	GL_SAMPLER_2D_ARRAY = 0x8DC1,
	GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1,
	GL_SAMPLER_BUFFER = 0x8DC2,
	GL_SAMPLER_BUFFER_EXT = 0x8DC2,
	GL_SAMPLER_BUFFER_OES = 0x8DC2,
	GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3,
	GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3,
	GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4,
	GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4,
	GL_SAMPLER_2D_ARRAY_SHADOW_NV = 0x8DC4,
	GL_SAMPLER_CUBE_SHADOW = 0x8DC5,
	GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5,
	GL_SAMPLER_CUBE_SHADOW_NV = 0x8DC5,
	GL_UNSIGNED_INT_VEC2 = 0x8DC6,
	GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6,
	GL_UNSIGNED_INT_VEC3 = 0x8DC7,
	GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7,
	GL_UNSIGNED_INT_VEC4 = 0x8DC8,
	GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8,
	GL_INT_SAMPLER_1D = 0x8DC9,
	GL_INT_SAMPLER_1D_EXT = 0x8DC9,
	GL_INT_SAMPLER_2D = 0x8DCA,
	GL_INT_SAMPLER_2D_EXT = 0x8DCA,
	GL_INT_SAMPLER_3D = 0x8DCB,
	GL_INT_SAMPLER_3D_EXT = 0x8DCB,
	GL_INT_SAMPLER_CUBE = 0x8DCC,
	GL_INT_SAMPLER_CUBE_EXT = 0x8DCC,
	GL_INT_SAMPLER_2D_RECT = 0x8DCD,
	GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD,
	GL_INT_SAMPLER_1D_ARRAY = 0x8DCE,
	GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE,
	GL_INT_SAMPLER_2D_ARRAY = 0x8DCF,
	GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF,
	GL_INT_SAMPLER_BUFFER = 0x8DD0,
	GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0,
	GL_INT_SAMPLER_BUFFER_OES = 0x8DD0,
	GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1,
	GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1,
	GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2,
	GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2,
	GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3,
	GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3,
	GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4,
	GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4,
	GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5,
	GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5,
	GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6,
	GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6,
	GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7,
	GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7,
	GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8,
	GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8,
	GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 0x8DD8,
	GL_GEOMETRY_SHADER = 0x8DD9,
	GL_GEOMETRY_SHADER_ARB = 0x8DD9,
	GL_GEOMETRY_SHADER_EXT = 0x8DD9,
	GL_GEOMETRY_SHADER_OES = 0x8DD9,
	GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA,
	GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA,
	GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB,
	GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB,
	GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC,
	GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC,
	GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD,
	GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD,
	GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE,
	GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE,
	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF,
	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF,
	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF,
	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8DDF,
	GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0,
	GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0,
	GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0,
	GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 0x8DE0,
	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1,
	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1,
	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1,
	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 0x8DE1,
	GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2,
	GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3,
	GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4,
	GL_ACTIVE_SUBROUTINES = 0x8DE5,
	GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6,
	GL_MAX_SUBROUTINES = 0x8DE7,
	GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8,
	GL_NAMED_STRING_LENGTH_ARB = 0x8DE9,
	GL_NAMED_STRING_TYPE_ARB = 0x8DEA,
	GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED,
	GL_UNIFORM_BUFFER_EXT = 0x8DEE,
	GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF,
}; // For Pat Brown 2005/10/13
typedef enum {
	GL_LOW_FLOAT = 0x8DF0,
	GL_MEDIUM_FLOAT = 0x8DF1,
	GL_HIGH_FLOAT = 0x8DF2,
	GL_LOW_INT = 0x8DF3,
	GL_MEDIUM_INT = 0x8DF4,
	GL_HIGH_INT = 0x8DF5,
	GL_UNSIGNED_INT_10_10_10_2_OES = 0x8DF6,
	GL_INT_10_10_10_2_OES = 0x8DF7,
	GL_SHADER_BINARY_FORMATS = 0x8DF8,
	GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9,
	GL_SHADER_COMPILER = 0x8DFA,
	GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB,
	GL_MAX_VARYING_VECTORS = 0x8DFC,
	GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD,
};
typedef enum {
	GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10,
	GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11,
	GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12,
	GL_QUERY_WAIT = 0x8E13,
	GL_QUERY_WAIT_NV = 0x8E13,
	GL_QUERY_NO_WAIT = 0x8E14,
	GL_QUERY_NO_WAIT_NV = 0x8E14,
	GL_QUERY_BY_REGION_WAIT = 0x8E15,
	GL_QUERY_BY_REGION_WAIT_NV = 0x8E15,
	GL_QUERY_BY_REGION_NO_WAIT = 0x8E16,
	GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16,
	GL_QUERY_WAIT_INVERTED = 0x8E17,
	GL_QUERY_NO_WAIT_INVERTED = 0x8E18,
	GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19,
	GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A,
	GL_POLYGON_OFFSET_CLAMP = 0x8E1B,
	GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B,
	GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E,
	GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E1E,
	GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E1E,
	GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F,
	GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E1F,
	GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E1F,
	GL_COLOR_SAMPLES_NV = 0x8E20,
	GL_TRANSFORM_FEEDBACK = 0x8E22,
	GL_TRANSFORM_FEEDBACK_NV = 0x8E22,
	GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23,
	GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23,
	GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23,
	GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24,
	GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24,
	GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24,
	GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25,
	GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25,
	GL_FRAME_NV = 0x8E26,
	GL_FIELDS_NV = 0x8E27,
	GL_CURRENT_TIME_NV = 0x8E28,
	GL_TIMESTAMP = 0x8E28,
	GL_TIMESTAMP_EXT = 0x8E28,
	GL_NUM_FILL_STREAMS_NV = 0x8E29,
	GL_PRESENT_TIME_NV = 0x8E2A,
	GL_PRESENT_DURATION_NV = 0x8E2B,
	GL_DEPTH_COMPONENT16_NONLINEAR_NV = 0x8E2C,
	GL_PROGRAM_MATRIX_EXT = 0x8E2D,
	GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E,
	GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F,
	GL_TEXTURE_SWIZZLE_R = 0x8E42,
	GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42,
	GL_TEXTURE_SWIZZLE_G = 0x8E43,
	GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43,
	GL_TEXTURE_SWIZZLE_B = 0x8E44,
	GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44,
	GL_TEXTURE_SWIZZLE_A = 0x8E45,
	GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45,
	GL_TEXTURE_SWIZZLE_RGBA = 0x8E46,
	GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46,
	GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47,
	GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48,
	GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49,
	GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A,
	GL_COMPATIBLE_SUBROUTINES = 0x8E4B,
	GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C,
	GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C,
	GL_FIRST_VERTEX_CONVENTION = 0x8E4D,
	GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D,
	GL_FIRST_VERTEX_CONVENTION_OES = 0x8E4D,
	GL_LAST_VERTEX_CONVENTION = 0x8E4E,
	GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E,
	GL_LAST_VERTEX_CONVENTION_OES = 0x8E4E,
	GL_PROVOKING_VERTEX = 0x8E4F,
	GL_PROVOKING_VERTEX_EXT = 0x8E4F,
	GL_SAMPLE_POSITION = 0x8E50,
	GL_SAMPLE_POSITION_NV = 0x8E50,
	GL_SAMPLE_LOCATION_ARB = 0x8E50,
	GL_SAMPLE_LOCATION_NV = 0x8E50,
	GL_SAMPLE_MASK = 0x8E51,
	GL_SAMPLE_MASK_NV = 0x8E51,
	GL_SAMPLE_MASK_VALUE = 0x8E52,
	GL_SAMPLE_MASK_VALUE_NV = 0x8E52,
	GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53,
	GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54,
	GL_TEXTURE_RENDERBUFFER_NV = 0x8E55,
	GL_SAMPLER_RENDERBUFFER_NV = 0x8E56,
	GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57,
	GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58,
	GL_MAX_SAMPLE_MASK_WORDS = 0x8E59,
	GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59,
	GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A,
	GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A,
	GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x8E5A,
	GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 0x8E5A,
	GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B,
	GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5B,
	GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B,
	GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C,
	GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5C,
	GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C,
	GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D,
	GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 0x8E5D,
	GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D,
	GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E,
	GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E,
	GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E,
	GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F,
	GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F,
	GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F,
	GL_MAX_MESH_UNIFORM_BLOCKS_NV = 0x8E60,
	GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 0x8E61,
	GL_MAX_MESH_IMAGE_UNIFORMS_NV = 0x8E62,
	GL_MAX_MESH_UNIFORM_COMPONENTS_NV = 0x8E63,
	GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 0x8E64,
	GL_MAX_MESH_ATOMIC_COUNTERS_NV = 0x8E65,
	GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 0x8E66,
	GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 0x8E67,
	GL_MAX_TASK_UNIFORM_BLOCKS_NV = 0x8E68,
	GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 0x8E69,
	GL_MAX_TASK_IMAGE_UNIFORMS_NV = 0x8E6A,
	GL_MAX_TASK_UNIFORM_COMPONENTS_NV = 0x8E6B,
	GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 0x8E6C,
	GL_MAX_TASK_ATOMIC_COUNTERS_NV = 0x8E6D,
	GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 0x8E6E,
	GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 0x8E6F,
	GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70,
	GL_MAX_VERTEX_STREAMS = 0x8E71,
	GL_PATCH_VERTICES = 0x8E72,
	GL_PATCH_VERTICES_EXT = 0x8E72,
	GL_PATCH_VERTICES_OES = 0x8E72,
	GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73,
	GL_PATCH_DEFAULT_INNER_LEVEL_EXT = 0x8E73,
	GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74,
	GL_PATCH_DEFAULT_OUTER_LEVEL_EXT = 0x8E74,
	GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75,
	GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 0x8E75,
	GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 0x8E75,
	GL_TESS_GEN_MODE = 0x8E76,
	GL_TESS_GEN_MODE_EXT = 0x8E76,
	GL_TESS_GEN_MODE_OES = 0x8E76,
	GL_TESS_GEN_SPACING = 0x8E77,
	GL_TESS_GEN_SPACING_EXT = 0x8E77,
	GL_TESS_GEN_SPACING_OES = 0x8E77,
	GL_TESS_GEN_VERTEX_ORDER = 0x8E78,
	GL_TESS_GEN_VERTEX_ORDER_EXT = 0x8E78,
	GL_TESS_GEN_VERTEX_ORDER_OES = 0x8E78,
	GL_TESS_GEN_POINT_MODE = 0x8E79,
	GL_TESS_GEN_POINT_MODE_EXT = 0x8E79,
	GL_TESS_GEN_POINT_MODE_OES = 0x8E79,
	GL_ISOLINES = 0x8E7A,
	GL_ISOLINES_EXT = 0x8E7A,
	GL_ISOLINES_OES = 0x8E7A,
	GL_FRACTIONAL_ODD = 0x8E7B,
	GL_FRACTIONAL_ODD_EXT = 0x8E7B,
	GL_FRACTIONAL_ODD_OES = 0x8E7B,
	GL_FRACTIONAL_EVEN = 0x8E7C,
	GL_FRACTIONAL_EVEN_EXT = 0x8E7C,
	GL_FRACTIONAL_EVEN_OES = 0x8E7C,
	GL_MAX_PATCH_VERTICES = 0x8E7D,
	GL_MAX_PATCH_VERTICES_EXT = 0x8E7D,
	GL_MAX_PATCH_VERTICES_OES = 0x8E7D,
	GL_MAX_TESS_GEN_LEVEL = 0x8E7E,
	GL_MAX_TESS_GEN_LEVEL_EXT = 0x8E7E,
	GL_MAX_TESS_GEN_LEVEL_OES = 0x8E7E,
	GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F,
	GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E7F,
	GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E7F,
	GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80,
	GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E80,
	GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E80,
	GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81,
	GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 0x8E81,
	GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 0x8E81,
	GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82,
	GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 0x8E82,
	GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 0x8E82,
	GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83,
	GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 0x8E83,
	GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 0x8E83,
	GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84,
	GL_MAX_TESS_PATCH_COMPONENTS_EXT = 0x8E84,
	GL_MAX_TESS_PATCH_COMPONENTS_OES = 0x8E84,
	GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85,
	GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8E85,
	GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 0x8E85,
	GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86,
	GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 0x8E86,
	GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 0x8E86,
	GL_TESS_EVALUATION_SHADER = 0x8E87,
	GL_TESS_EVALUATION_SHADER_EXT = 0x8E87,
	GL_TESS_EVALUATION_SHADER_OES = 0x8E87,
	GL_TESS_CONTROL_SHADER = 0x8E88,
	GL_TESS_CONTROL_SHADER_EXT = 0x8E88,
	GL_TESS_CONTROL_SHADER_OES = 0x8E88,
	GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89,
	GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 0x8E89,
	GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 0x8E89,
	GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A,
	GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 0x8E8A,
	GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 0x8E8A,
	GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C,
	GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C,
	GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C,
	GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D,
	GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D,
	GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D,
	GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E,
	GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E,
	GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E,
	GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F,
	GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F,
	GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F,
}; // For Michael Gold 2006/08/07
typedef enum {
}; // For QNX_texture_tiling, QNX_complex_polygon, QNX_stippled_lines (Khronos bug 696)
typedef enum {
};
typedef enum {
}; // For Affie Munshi 2007/07/20
typedef enum {
};
typedef enum {
	GL_COVERAGE_COMPONENT_NV = 0x8ED0,
	GL_COVERAGE_COMPONENT4_NV = 0x8ED1,
	GL_COVERAGE_ATTACHMENT_NV = 0x8ED2,
	GL_COVERAGE_BUFFERS_NV = 0x8ED3,
	GL_COVERAGE_SAMPLES_NV = 0x8ED4,
	GL_COVERAGE_ALL_FRAGMENTS_NV = 0x8ED5,
	GL_COVERAGE_EDGE_FRAGMENTS_NV = 0x8ED6,
	GL_COVERAGE_AUTOMATIC_NV = 0x8ED7,
	GL_INCLUSIVE_EXT = 0x8F10,
	GL_EXCLUSIVE_EXT = 0x8F11,
	GL_WINDOW_RECTANGLE_EXT = 0x8F12,
	GL_WINDOW_RECTANGLE_MODE_EXT = 0x8F13,
	GL_MAX_WINDOW_RECTANGLES_EXT = 0x8F14,
	GL_NUM_WINDOW_RECTANGLES_EXT = 0x8F15,
	GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D,
	GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E,
	GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F,
	GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20,
	GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21,
	GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22,
	GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23,
	GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24,
	GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25,
	GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26,
	GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27,
	GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28,
	GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29,
	GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A,
	GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B,
	GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C,
	GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D,
	GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E,
	GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F,
	GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30,
	GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31,
	GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32,
	GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33,
	GL_GPU_ADDRESS_NV = 0x8F34,
	GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35,
	GL_COPY_READ_BUFFER = 0x8F36,
	GL_COPY_READ_BUFFER_NV = 0x8F36,
	GL_COPY_READ_BUFFER_BINDING = 0x8F36,
	GL_COPY_WRITE_BUFFER = 0x8F37,
	GL_COPY_WRITE_BUFFER_NV = 0x8F37,
	GL_COPY_WRITE_BUFFER_BINDING = 0x8F37,
	GL_MAX_IMAGE_UNITS = 0x8F38,
	GL_MAX_IMAGE_UNITS_EXT = 0x8F38,
	GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39,
	GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39,
	GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39,
	GL_IMAGE_BINDING_NAME = 0x8F3A,
	GL_IMAGE_BINDING_NAME_EXT = 0x8F3A,
	GL_IMAGE_BINDING_LEVEL = 0x8F3B,
	GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B,
	GL_IMAGE_BINDING_LAYERED = 0x8F3C,
	GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C,
	GL_IMAGE_BINDING_LAYER = 0x8F3D,
	GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D,
	GL_IMAGE_BINDING_ACCESS = 0x8F3E,
	GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E,
	GL_DRAW_INDIRECT_BUFFER = 0x8F3F,
	GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40,
	GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41,
	GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42,
	GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43,
	GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44,
	GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45,
	GL_DOUBLE_MAT2 = 0x8F46,
	GL_DOUBLE_MAT2_EXT = 0x8F46,
	GL_DOUBLE_MAT3 = 0x8F47,
	GL_DOUBLE_MAT3_EXT = 0x8F47,
	GL_DOUBLE_MAT4 = 0x8F48,
	GL_DOUBLE_MAT4_EXT = 0x8F48,
	GL_DOUBLE_MAT2x3 = 0x8F49,
	GL_DOUBLE_MAT2x3_EXT = 0x8F49,
	GL_DOUBLE_MAT2x4 = 0x8F4A,
	GL_DOUBLE_MAT2x4_EXT = 0x8F4A,
	GL_DOUBLE_MAT3x2 = 0x8F4B,
	GL_DOUBLE_MAT3x2_EXT = 0x8F4B,
	GL_DOUBLE_MAT3x4 = 0x8F4C,
	GL_DOUBLE_MAT3x4_EXT = 0x8F4C,
	GL_DOUBLE_MAT4x2 = 0x8F4D,
	GL_DOUBLE_MAT4x2_EXT = 0x8F4D,
	GL_DOUBLE_MAT4x3 = 0x8F4E,
	GL_DOUBLE_MAT4x3_EXT = 0x8F4E,
	GL_VERTEX_BINDING_BUFFER = 0x8F4F,
}; // For Pat Brown, Khronos bug 3191
typedef enum {
}; // For Jon Kennedy, Khronos public bug 75
typedef enum {
	GL_MALI_SHADER_BINARY_ARM = 0x8F60,
	GL_MALI_PROGRAM_BINARY_ARM = 0x8F61,
	GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 0x8F63,
	GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 0x8F64,
	GL_FETCH_PER_SAMPLE_ARM = 0x8F65,
	GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8F66,
	GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 0x8F67,
	GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = 0x8F69,
	GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x8F6A,
}; // For Remi Pedersen, Khronos bug 3745
typedef enum {
}; // For Mark Callow, Khronos bug 4055. Shared with EGL.
typedef enum {
}; // For Mike Weiblen, public bug 910
typedef enum {
	GL_RED_SNORM = 0x8F90,
	GL_RG_SNORM = 0x8F91,
	GL_RGB_SNORM = 0x8F92,
	GL_RGBA_SNORM = 0x8F93,
	GL_R8_SNORM = 0x8F94,
	GL_RG8_SNORM = 0x8F95,
	GL_RGB8_SNORM = 0x8F96,
	GL_RGBA8_SNORM = 0x8F97,
	GL_R16_SNORM = 0x8F98,
	GL_R16_SNORM_EXT = 0x8F98,
	GL_RG16_SNORM = 0x8F99,
	GL_RG16_SNORM_EXT = 0x8F99,
	GL_RGB16_SNORM = 0x8F9A,
	GL_RGB16_SNORM_EXT = 0x8F9A,
	GL_RGBA16_SNORM = 0x8F9B,
	GL_RGBA16_SNORM_EXT = 0x8F9B,
	GL_SIGNED_NORMALIZED = 0x8F9C,
	GL_PRIMITIVE_RESTART = 0x8F9D,
	GL_PRIMITIVE_RESTART_INDEX = 0x8F9E,
	GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F,
};
typedef enum {
	GL_PERFMON_GLOBAL_MODE_QCOM = 0x8FA0,
	GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = 0x8FA1,
	GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0,
	GL_CPU_OPTIMIZED_QCOM = 0x8FB1,
	GL_GPU_OPTIMIZED_QCOM = 0x8FB2,
	GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 0x8FB3,
	GL_GPU_DISJOINT_EXT = 0x8FBB,
	GL_SR8_EXT = 0x8FBD,
	GL_SRG8_EXT = 0x8FBE,
	GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = 0x8FBF,
}; // For Maurice Ribble, bug 4512
typedef enum {
	GL_SHADER_BINARY_VIV = 0x8FC4,
}; // For Frido Garritsen, bug 4526
typedef enum {
	GL_INT8_NV = 0x8FE0,
	GL_INT8_VEC2_NV = 0x8FE1,
	GL_INT8_VEC3_NV = 0x8FE2,
	GL_INT8_VEC4_NV = 0x8FE3,
	GL_INT16_NV = 0x8FE4,
	GL_INT16_VEC2_NV = 0x8FE5,
	GL_INT16_VEC3_NV = 0x8FE6,
	GL_INT16_VEC4_NV = 0x8FE7,
	GL_INT64_VEC2_ARB = 0x8FE9,
	GL_INT64_VEC2_NV = 0x8FE9,
	GL_INT64_VEC3_ARB = 0x8FEA,
	GL_INT64_VEC3_NV = 0x8FEA,
	GL_INT64_VEC4_ARB = 0x8FEB,
	GL_INT64_VEC4_NV = 0x8FEB,
	GL_UNSIGNED_INT8_NV = 0x8FEC,
	GL_UNSIGNED_INT8_VEC2_NV = 0x8FED,
	GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE,
	GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF,
	GL_UNSIGNED_INT16_NV = 0x8FF0,
	GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1,
	GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2,
	GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3,
	GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5,
	GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5,
	GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6,
	GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6,
	GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7,
	GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7,
	GL_FLOAT16_NV = 0x8FF8,
	GL_FLOAT16_VEC2_NV = 0x8FF9,
	GL_FLOAT16_VEC3_NV = 0x8FFA,
	GL_FLOAT16_VEC4_NV = 0x8FFB,
	GL_DOUBLE_VEC2 = 0x8FFC,
	GL_DOUBLE_VEC2_EXT = 0x8FFC,
	GL_DOUBLE_VEC3 = 0x8FFD,
	GL_DOUBLE_VEC3_EXT = 0x8FFD,
	GL_DOUBLE_VEC4 = 0x8FFE,
	GL_DOUBLE_VEC4_EXT = 0x8FFE,
}; // For Pat Brown, bug 4935
typedef enum {
	GL_SAMPLER_BUFFER_AMD = 0x9001,
	GL_INT_SAMPLER_BUFFER_AMD = 0x9002,
	GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003,
	GL_TESSELLATION_MODE_AMD = 0x9004,
	GL_TESSELLATION_FACTOR_AMD = 0x9005,
	GL_DISCRETE_AMD = 0x9006,
	GL_CONTINUOUS_AMD = 0x9007,
	GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009,
	GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009,
	GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009,
	GL_TEXTURE_CUBE_MAP_ARRAY_OES = 0x9009,
	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A,
	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A,
	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 0x900A,
	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 0x900A,
	GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B,
	GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B,
	GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C,
	GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C,
	GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900C,
	GL_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900C,
	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D,
	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D,
	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 0x900D,
	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 0x900D,
	GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E,
	GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E,
	GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900E,
	GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900E,
	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F,
	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F,
	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900F,
	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900F,
	GL_ALPHA_SNORM = 0x9010,
	GL_LUMINANCE_SNORM = 0x9011,
	GL_LUMINANCE_ALPHA_SNORM = 0x9012,
	GL_INTENSITY_SNORM = 0x9013,
	GL_ALPHA8_SNORM = 0x9014,
	GL_LUMINANCE8_SNORM = 0x9015,
	GL_LUMINANCE8_ALPHA8_SNORM = 0x9016,
	GL_INTENSITY8_SNORM = 0x9017,
	GL_ALPHA16_SNORM = 0x9018,
	GL_LUMINANCE16_SNORM = 0x9019,
	GL_LUMINANCE16_ALPHA16_SNORM = 0x901A,
	GL_INTENSITY16_SNORM = 0x901B,
	GL_FACTOR_MIN_AMD = 0x901C,
	GL_FACTOR_MAX_AMD = 0x901D,
	GL_DEPTH_CLAMP_NEAR_AMD = 0x901E,
	GL_DEPTH_CLAMP_FAR_AMD = 0x901F,
}; // For Bill Licea-Kane
typedef enum {
	GL_VIDEO_BUFFER_NV = 0x9020,
	GL_VIDEO_BUFFER_BINDING_NV = 0x9021,
	GL_FIELD_UPPER_NV = 0x9022,
	GL_FIELD_LOWER_NV = 0x9023,
	GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024,
	GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025,
	GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026,
	GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027,
	GL_VIDEO_BUFFER_PITCH_NV = 0x9028,
	GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029,
	GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A,
	GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B,
	GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C,
	GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D,
	GL_PARTIAL_SUCCESS_NV = 0x902E,
	GL_SUCCESS_NV = 0x902F,
	GL_FAILURE_NV = 0x9030,
	GL_YCBYCR8_422_NV = 0x9031,
	GL_YCBAYCR8A_4224_NV = 0x9032,
	GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033,
	GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034,
	GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035,
	GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036,
	GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037,
	GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038,
	GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039,
	GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A,
	GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B,
	GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C,
	GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045,
	GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046,
	GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047,
	GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048,
	GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049,
	GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A,
	GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B,
	GL_IMAGE_1D = 0x904C,
	GL_IMAGE_1D_EXT = 0x904C,
	GL_IMAGE_2D = 0x904D,
	GL_IMAGE_2D_EXT = 0x904D,
	GL_IMAGE_3D = 0x904E,
	GL_IMAGE_3D_EXT = 0x904E,
	GL_IMAGE_2D_RECT = 0x904F,
	GL_IMAGE_2D_RECT_EXT = 0x904F,
	GL_IMAGE_CUBE = 0x9050,
	GL_IMAGE_CUBE_EXT = 0x9050,
	GL_IMAGE_BUFFER = 0x9051,
	GL_IMAGE_BUFFER_EXT = 0x9051,
	GL_IMAGE_BUFFER_OES = 0x9051,
	GL_IMAGE_1D_ARRAY = 0x9052,
	GL_IMAGE_1D_ARRAY_EXT = 0x9052,
	GL_IMAGE_2D_ARRAY = 0x9053,
	GL_IMAGE_2D_ARRAY_EXT = 0x9053,
	GL_IMAGE_CUBE_MAP_ARRAY = 0x9054,
	GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054,
	GL_IMAGE_CUBE_MAP_ARRAY_OES = 0x9054,
	GL_IMAGE_2D_MULTISAMPLE = 0x9055,
	GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055,
	GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056,
	GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056,
	GL_INT_IMAGE_1D = 0x9057,
	GL_INT_IMAGE_1D_EXT = 0x9057,
	GL_INT_IMAGE_2D = 0x9058,
	GL_INT_IMAGE_2D_EXT = 0x9058,
	GL_INT_IMAGE_3D = 0x9059,
	GL_INT_IMAGE_3D_EXT = 0x9059,
	GL_INT_IMAGE_2D_RECT = 0x905A,
	GL_INT_IMAGE_2D_RECT_EXT = 0x905A,
	GL_INT_IMAGE_CUBE = 0x905B,
	GL_INT_IMAGE_CUBE_EXT = 0x905B,
	GL_INT_IMAGE_BUFFER = 0x905C,
	GL_INT_IMAGE_BUFFER_EXT = 0x905C,
	GL_INT_IMAGE_BUFFER_OES = 0x905C,
	GL_INT_IMAGE_1D_ARRAY = 0x905D,
	GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D,
	GL_INT_IMAGE_2D_ARRAY = 0x905E,
	GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E,
	GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F,
	GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F,
	GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x905F,
	GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060,
	GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060,
	GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061,
	GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061,
	GL_UNSIGNED_INT_IMAGE_1D = 0x9062,
	GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062,
	GL_UNSIGNED_INT_IMAGE_2D = 0x9063,
	GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063,
	GL_UNSIGNED_INT_IMAGE_3D = 0x9064,
	GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064,
	GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065,
	GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065,
	GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066,
	GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066,
	GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067,
	GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067,
	GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 0x9067,
	GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068,
	GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068,
	GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069,
	GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069,
	GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A,
	GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A,
	GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x906A,
	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B,
	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B,
	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C,
	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C,
	GL_MAX_IMAGE_SAMPLES = 0x906D,
	GL_MAX_IMAGE_SAMPLES_EXT = 0x906D,
	GL_IMAGE_BINDING_FORMAT = 0x906E,
	GL_IMAGE_BINDING_FORMAT_EXT = 0x906E,
	GL_RGB10_A2UI = 0x906F,
	GL_PATH_FORMAT_SVG_NV = 0x9070,
	GL_PATH_FORMAT_PS_NV = 0x9071,
	GL_STANDARD_FONT_NAME_NV = 0x9072,
	GL_SYSTEM_FONT_NAME_NV = 0x9073,
	GL_FILE_NAME_NV = 0x9074,
	GL_PATH_STROKE_WIDTH_NV = 0x9075,
	GL_PATH_END_CAPS_NV = 0x9076,
	GL_PATH_INITIAL_END_CAP_NV = 0x9077,
	GL_PATH_TERMINAL_END_CAP_NV = 0x9078,
	GL_PATH_JOIN_STYLE_NV = 0x9079,
	GL_PATH_MITER_LIMIT_NV = 0x907A,
	GL_PATH_DASH_CAPS_NV = 0x907B,
	GL_PATH_INITIAL_DASH_CAP_NV = 0x907C,
	GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D,
	GL_PATH_DASH_OFFSET_NV = 0x907E,
	GL_PATH_CLIENT_LENGTH_NV = 0x907F,
	GL_PATH_FILL_MODE_NV = 0x9080,
	GL_PATH_FILL_MASK_NV = 0x9081,
	GL_PATH_FILL_COVER_MODE_NV = 0x9082,
	GL_PATH_STROKE_COVER_MODE_NV = 0x9083,
	GL_PATH_STROKE_MASK_NV = 0x9084,
	GL_COUNT_UP_NV = 0x9088,
	GL_COUNT_DOWN_NV = 0x9089,
	GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A,
	GL_CONVEX_HULL_NV = 0x908B,
	GL_BOUNDING_BOX_NV = 0x908D,
	GL_TRANSLATE_X_NV = 0x908E,
	GL_TRANSLATE_Y_NV = 0x908F,
	GL_TRANSLATE_2D_NV = 0x9090,
	GL_TRANSLATE_3D_NV = 0x9091,
	GL_AFFINE_2D_NV = 0x9092,
	GL_AFFINE_3D_NV = 0x9094,
	GL_TRANSPOSE_AFFINE_2D_NV = 0x9096,
	GL_TRANSPOSE_AFFINE_3D_NV = 0x9098,
	GL_UTF8_NV = 0x909A,
	GL_UTF16_NV = 0x909B,
	GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C,
	GL_PATH_COMMAND_COUNT_NV = 0x909D,
	GL_PATH_COORD_COUNT_NV = 0x909E,
	GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F,
	GL_PATH_COMPUTED_LENGTH_NV = 0x90A0,
	GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1,
	GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2,
	GL_SQUARE_NV = 0x90A3,
	GL_ROUND_NV = 0x90A4,
	GL_TRIANGULAR_NV = 0x90A5,
	GL_BEVEL_NV = 0x90A6,
	GL_MITER_REVERT_NV = 0x90A7,
	GL_MITER_TRUNCATE_NV = 0x90A8,
	GL_SKIP_MISSING_GLYPH_NV = 0x90A9,
	GL_USE_MISSING_GLYPH_NV = 0x90AA,
	GL_PATH_ERROR_POSITION_NV = 0x90AB,
	GL_PATH_FOG_GEN_MODE_NV = 0x90AC,
	GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD,
	GL_ADJACENT_PAIRS_NV = 0x90AE,
	GL_FIRST_TO_REST_NV = 0x90AF,
	GL_PATH_GEN_MODE_NV = 0x90B0,
	GL_PATH_GEN_COEFF_NV = 0x90B1,
	GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2,
	GL_PATH_GEN_COMPONENTS_NV = 0x90B3,
	GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4,
	GL_MOVE_TO_RESETS_NV = 0x90B5,
	GL_MOVE_TO_CONTINUES_NV = 0x90B6,
	GL_PATH_STENCIL_FUNC_NV = 0x90B7,
	GL_PATH_STENCIL_REF_NV = 0x90B8,
	GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9,
	GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA,
	GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB,
	GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC,
	GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD,
	GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE,
	GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF,
	GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7,
	GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8,
	GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9,
	GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA,
	GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB,
	GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 0x90CB,
	GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 0x90CB,
	GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC,
	GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 0x90CC,
	GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 0x90CC,
	GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD,
	GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 0x90CD,
	GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 0x90CD,
	GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE,
	GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF,
	GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0,
	GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1,
	GL_SHADER_STORAGE_BUFFER = 0x90D2,
	GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3,
	GL_SHADER_STORAGE_BUFFER_START = 0x90D4,
	GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5,
	GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6,
	GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7,
	GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 0x90D7,
	GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 0x90D7,
	GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8,
	GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 0x90D8,
	GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 0x90D8,
	GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9,
	GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 0x90D9,
	GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 0x90D9,
	GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA,
	GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB,
	GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC,
	GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD,
	GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE,
	GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF,
	GL_SYNC_X11_FENCE_EXT = 0x90E1,
	GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA,
	GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB,
	GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB,
	GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED,
	GL_DISPATCH_INDIRECT_BUFFER = 0x90EE,
	GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF,
	GL_COLOR_ATTACHMENT_EXT = 0x90F0,
	GL_MULTIVIEW_EXT = 0x90F1,
	GL_MAX_MULTIVIEW_BUFFERS_EXT = 0x90F2,
	GL_CONTEXT_ROBUST_ACCESS = 0x90F3,
	GL_CONTEXT_ROBUST_ACCESS_EXT = 0x90F3,
	GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3,
	GL_COMPUTE_PROGRAM_NV = 0x90FB,
	GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC,
}; // For Pat Brown, bug 4935
typedef enum {
	GL_TEXTURE_2D_MULTISAMPLE = 0x9100,
	GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101,
	GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102,
	GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 0x9102,
	GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103,
	GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104,
	GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105,
	GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 0x9105,
	GL_TEXTURE_SAMPLES = 0x9106,
	GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107,
	GL_SAMPLER_2D_MULTISAMPLE = 0x9108,
	GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109,
	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A,
	GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B,
	GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910B,
	GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C,
	GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910C,
	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D,
	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910D,
	GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E,
	GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F,
	GL_MAX_INTEGER_SAMPLES = 0x9110,
	GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111,
	GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 0x9111,
	GL_OBJECT_TYPE = 0x9112,
	GL_OBJECT_TYPE_APPLE = 0x9112,
	GL_SYNC_CONDITION = 0x9113,
	GL_SYNC_CONDITION_APPLE = 0x9113,
	GL_SYNC_STATUS = 0x9114,
	GL_SYNC_STATUS_APPLE = 0x9114,
	GL_SYNC_FLAGS = 0x9115,
	GL_SYNC_FLAGS_APPLE = 0x9115,
	GL_SYNC_FENCE = 0x9116,
	GL_SYNC_FENCE_APPLE = 0x9116,
	GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117,
	GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 0x9117,
	GL_UNSIGNALED = 0x9118,
	GL_UNSIGNALED_APPLE = 0x9118,
	GL_SIGNALED = 0x9119,
	GL_SIGNALED_APPLE = 0x9119,
	GL_ALREADY_SIGNALED = 0x911A,
	GL_ALREADY_SIGNALED_APPLE = 0x911A,
	GL_TIMEOUT_EXPIRED = 0x911B,
	GL_TIMEOUT_EXPIRED_APPLE = 0x911B,
	GL_CONDITION_SATISFIED = 0x911C,
	GL_CONDITION_SATISFIED_APPLE = 0x911C,
	GL_WAIT_FAILED = 0x911D,
	GL_WAIT_FAILED_APPLE = 0x911D,
	GL_BUFFER_ACCESS_FLAGS = 0x911F,
	GL_BUFFER_MAP_LENGTH = 0x9120,
	GL_BUFFER_MAP_OFFSET = 0x9121,
	GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,
	GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123,
	GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 0x9123,
	GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 0x9123,
	GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124,
	GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 0x9124,
	GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 0x9124,
	GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,
	GL_CONTEXT_PROFILE_MASK = 0x9126,
	GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127,
	GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128,
	GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129,
	GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A,
	GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B,
	GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C,
	GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D,
	GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E,
	GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F,
	GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 0x912F,
};
typedef enum {
	GL_SGX_PROGRAM_BINARY_IMG = 0x9130,
	GL_RENDERBUFFER_SAMPLES_IMG = 0x9133,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134,
	GL_MAX_SAMPLES_IMG = 0x9135,
	GL_TEXTURE_SAMPLES_IMG = 0x9136,
	GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x9137,
	GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x9138,
	GL_CUBIC_IMG = 0x9139,
	GL_CUBIC_MIPMAP_NEAREST_IMG = 0x913A,
	GL_CUBIC_MIPMAP_LINEAR_IMG = 0x913B,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 0x913C,
	GL_NUM_DOWNSAMPLE_SCALES_IMG = 0x913D,
	GL_DOWNSAMPLE_SCALES_IMG = 0x913E,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 0x913F,
}; // Khronos bug 882
typedef enum {
	GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143,
	GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143,
	GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143,
	GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143,
	GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144,
	GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144,
	GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144,
	GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144,
	GL_DEBUG_LOGGED_MESSAGES = 0x9145,
	GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145,
	GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145,
	GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145,
	GL_DEBUG_SEVERITY_HIGH = 0x9146,
	GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146,
	GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146,
	GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146,
	GL_DEBUG_SEVERITY_MEDIUM = 0x9147,
	GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147,
	GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147,
	GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147,
	GL_DEBUG_SEVERITY_LOW = 0x9148,
	GL_DEBUG_SEVERITY_LOW_AMD = 0x9148,
	GL_DEBUG_SEVERITY_LOW_ARB = 0x9148,
	GL_DEBUG_SEVERITY_LOW_KHR = 0x9148,
	GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149,
	GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A,
	GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B,
	GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C,
	GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D,
	GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E,
	GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F,
	GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150,
	GL_BUFFER_OBJECT_EXT = 0x9151,
	GL_DATA_BUFFER_AMD = 0x9151,
	GL_PERFORMANCE_MONITOR_AMD = 0x9152,
	GL_QUERY_OBJECT_AMD = 0x9153,
	GL_QUERY_OBJECT_EXT = 0x9153,
	GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154,
	GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154,
	GL_SAMPLER_OBJECT_AMD = 0x9155,
	GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160,
	GL_QUERY_BUFFER = 0x9192,
	GL_QUERY_BUFFER_AMD = 0x9192,
	GL_QUERY_BUFFER_BINDING = 0x9193,
	GL_QUERY_BUFFER_BINDING_AMD = 0x9193,
	GL_QUERY_RESULT_NO_WAIT = 0x9194,
	GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194,
	GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195,
	GL_VIRTUAL_PAGE_SIZE_X_EXT = 0x9195,
	GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195,
	GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196,
	GL_VIRTUAL_PAGE_SIZE_Y_EXT = 0x9196,
	GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196,
	GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197,
	GL_VIRTUAL_PAGE_SIZE_Z_EXT = 0x9197,
	GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197,
	GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198,
	GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 0x9198,
	GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198,
	GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199,
	GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 0x9199,
	GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199,
	GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A,
	GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A,
	GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 0x919A,
	GL_MIN_SPARSE_LEVEL_AMD = 0x919B,
	GL_MIN_LOD_WARNING_AMD = 0x919C,
	GL_TEXTURE_BUFFER_OFFSET = 0x919D,
	GL_TEXTURE_BUFFER_OFFSET_EXT = 0x919D,
	GL_TEXTURE_BUFFER_OFFSET_OES = 0x919D,
	GL_TEXTURE_BUFFER_SIZE = 0x919E,
	GL_TEXTURE_BUFFER_SIZE_EXT = 0x919E,
	GL_TEXTURE_BUFFER_SIZE_OES = 0x919E,
	GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F,
	GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 0x919F,
	GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 0x919F,
	GL_STREAM_RASTERIZATION_AMD = 0x91A0,
	GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4,
	GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5,
	GL_TEXTURE_SPARSE_ARB = 0x91A6,
	GL_TEXTURE_SPARSE_EXT = 0x91A6,
	GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7,
	GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 0x91A7,
	GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8,
	GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 0x91A8,
	GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9,
	GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 0x91A9,
	GL_NUM_SPARSE_LEVELS_ARB = 0x91AA,
	GL_NUM_SPARSE_LEVELS_EXT = 0x91AA,
	GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = 0x91AE,
	GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 0x91AF,
	GL_MAX_SHADER_COMPILER_THREADS_KHR = 0x91B0,
	GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0,
	GL_COMPLETION_STATUS_KHR = 0x91B1,
	GL_COMPLETION_STATUS_ARB = 0x91B1,
	GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = 0x91B2,
	GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 0x91B3,
	GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 0x91B4,
	GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 0x91B5,
	GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B6,
	GL_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B7,
	GL_COMPUTE_SHADER = 0x91B9,
	GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB,
	GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC,
	GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD,
	GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE,
	GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF,
	GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF,
	GL_FLOAT16_MAT2_AMD = 0x91C5,
	GL_FLOAT16_MAT3_AMD = 0x91C6,
	GL_FLOAT16_MAT4_AMD = 0x91C7,
	GL_FLOAT16_MAT2x3_AMD = 0x91C8,
	GL_FLOAT16_MAT2x4_AMD = 0x91C9,
	GL_FLOAT16_MAT3x2_AMD = 0x91CA,
	GL_FLOAT16_MAT3x4_AMD = 0x91CB,
	GL_FLOAT16_MAT4x2_AMD = 0x91CC,
	GL_FLOAT16_MAT4x3_AMD = 0x91CD,
}; // Khronos bugs 5899, 6004
typedef enum {
	GL_UNPACK_FLIP_Y_WEBGL = 0x9240,
	GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241,
	GL_CONTEXT_LOST_WEBGL = 0x9242,
	GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243,
	GL_BROWSER_DEFAULT_WEBGL = 0x9244,
}; // Khronos bug 6473,6884
typedef enum {
	GL_SHADER_BINARY_DMP = 0x9250,
	GL_SMAPHS30_PROGRAM_BINARY_DMP = 0x9251,
	GL_SMAPHS_PROGRAM_BINARY_DMP = 0x9252,
	GL_DMP_PROGRAM_BINARY_DMP = 0x9253,
}; // For Eisaku Ohbuchi via email
typedef enum {
	GL_GCCSO_SHADER_BINARY_FJ = 0x9260,
}; // Khronos bug 7486
typedef enum {
	GL_COMPRESSED_R11_EAC = 0x9270,
	GL_COMPRESSED_R11_EAC_OES = 0x9270,
	GL_COMPRESSED_SIGNED_R11_EAC = 0x9271,
	GL_COMPRESSED_SIGNED_R11_EAC_OES = 0x9271,
	GL_COMPRESSED_RG11_EAC = 0x9272,
	GL_COMPRESSED_RG11_EAC_OES = 0x9272,
	GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273,
	GL_COMPRESSED_SIGNED_RG11_EAC_OES = 0x9273,
	GL_COMPRESSED_RGB8_ETC2 = 0x9274,
	GL_COMPRESSED_RGB8_ETC2_OES = 0x9274,
	GL_COMPRESSED_SRGB8_ETC2 = 0x9275,
	GL_COMPRESSED_SRGB8_ETC2_OES = 0x9275,
	GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
	GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9276,
	GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
	GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9277,
	GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278,
	GL_COMPRESSED_RGBA8_ETC2_EAC_OES = 0x9278,
	GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
	GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = 0x9279,
}; // Khronos bug 7625
typedef enum {
	GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280,
	GL_BLEND_OVERLAP_NV = 0x9281,
	GL_UNCORRELATED_NV = 0x9282,
	GL_DISJOINT_NV = 0x9283,
	GL_CONJOINT_NV = 0x9284,
	GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285,
	GL_BLEND_ADVANCED_COHERENT_NV = 0x9285,
	GL_SRC_NV = 0x9286,
	GL_DST_NV = 0x9287,
	GL_SRC_OVER_NV = 0x9288,
	GL_DST_OVER_NV = 0x9289,
	GL_SRC_IN_NV = 0x928A,
	GL_DST_IN_NV = 0x928B,
	GL_SRC_OUT_NV = 0x928C,
	GL_DST_OUT_NV = 0x928D,
	GL_SRC_ATOP_NV = 0x928E,
	GL_DST_ATOP_NV = 0x928F,
	GL_PLUS_NV = 0x9291,
	GL_PLUS_DARKER_NV = 0x9292,
	GL_MULTIPLY = 0x9294,
	GL_MULTIPLY_KHR = 0x9294,
	GL_MULTIPLY_NV = 0x9294,
	GL_SCREEN = 0x9295,
	GL_SCREEN_KHR = 0x9295,
	GL_SCREEN_NV = 0x9295,
	GL_OVERLAY = 0x9296,
	GL_OVERLAY_KHR = 0x9296,
	GL_OVERLAY_NV = 0x9296,
	GL_DARKEN = 0x9297,
	GL_DARKEN_KHR = 0x9297,
	GL_DARKEN_NV = 0x9297,
	GL_LIGHTEN = 0x9298,
	GL_LIGHTEN_KHR = 0x9298,
	GL_LIGHTEN_NV = 0x9298,
	GL_COLORDODGE = 0x9299,
	GL_COLORDODGE_KHR = 0x9299,
	GL_COLORDODGE_NV = 0x9299,
	GL_COLORBURN = 0x929A,
	GL_COLORBURN_KHR = 0x929A,
	GL_COLORBURN_NV = 0x929A,
	GL_HARDLIGHT = 0x929B,
	GL_HARDLIGHT_KHR = 0x929B,
	GL_HARDLIGHT_NV = 0x929B,
	GL_SOFTLIGHT = 0x929C,
	GL_SOFTLIGHT_KHR = 0x929C,
	GL_SOFTLIGHT_NV = 0x929C,
	GL_DIFFERENCE = 0x929E,
	GL_DIFFERENCE_KHR = 0x929E,
	GL_DIFFERENCE_NV = 0x929E,
	GL_MINUS_NV = 0x929F,
	GL_EXCLUSION = 0x92A0,
	GL_EXCLUSION_KHR = 0x92A0,
	GL_EXCLUSION_NV = 0x92A0,
	GL_CONTRAST_NV = 0x92A1,
	GL_INVERT_RGB_NV = 0x92A3,
	GL_LINEARDODGE_NV = 0x92A4,
	GL_LINEARBURN_NV = 0x92A5,
	GL_VIVIDLIGHT_NV = 0x92A6,
	GL_LINEARLIGHT_NV = 0x92A7,
	GL_PINLIGHT_NV = 0x92A8,
	GL_HARDMIX_NV = 0x92A9,
	GL_HSL_HUE = 0x92AD,
	GL_HSL_HUE_KHR = 0x92AD,
	GL_HSL_HUE_NV = 0x92AD,
	GL_HSL_SATURATION = 0x92AE,
	GL_HSL_SATURATION_KHR = 0x92AE,
	GL_HSL_SATURATION_NV = 0x92AE,
	GL_HSL_COLOR = 0x92AF,
	GL_HSL_COLOR_KHR = 0x92AF,
	GL_HSL_COLOR_NV = 0x92AF,
	GL_HSL_LUMINOSITY = 0x92B0,
	GL_HSL_LUMINOSITY_KHR = 0x92B0,
	GL_HSL_LUMINOSITY_NV = 0x92B0,
	GL_PLUS_CLAMPED_NV = 0x92B1,
	GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2,
	GL_MINUS_CLAMPED_NV = 0x92B3,
	GL_INVERT_OVG_NV = 0x92B4,
	GL_MAX_LGPU_GPUS_NVX = 0x92BA,
	GL_MULTICAST_GPUS_NV = 0x92BA,
	GL_PURGED_CONTEXT_RESET_NV = 0x92BB,
	GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE,
	GL_PRIMITIVE_BOUNDING_BOX = 0x92BE,
	GL_PRIMITIVE_BOUNDING_BOX_EXT = 0x92BE,
	GL_PRIMITIVE_BOUNDING_BOX_OES = 0x92BE,
	GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = 0x92BF,
	GL_ATOMIC_COUNTER_BUFFER = 0x92C0,
	GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1,
	GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2,
	GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3,
	GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4,
	GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5,
	GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB,
	GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CD,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 0x92CD,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CE,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 0x92CE,
	GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF,
	GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CF,
	GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 0x92CF,
	GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0,
	GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1,
	GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 0x92D3,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 0x92D3,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 0x92D4,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 0x92D4,
	GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5,
	GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 0x92D5,
	GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 0x92D5,
	GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6,
	GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7,
	GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8,
	GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9,
	GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA,
	GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB,
	GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC,
	GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD,
	GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE,
	GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 0x92DF,
	GL_DEBUG_OUTPUT = 0x92E0,
	GL_DEBUG_OUTPUT_KHR = 0x92E0,
	GL_UNIFORM = 0x92E1,
	GL_UNIFORM_BLOCK = 0x92E2,
	GL_PROGRAM_INPUT = 0x92E3,
	GL_PROGRAM_OUTPUT = 0x92E4,
	GL_BUFFER_VARIABLE = 0x92E5,
	GL_SHADER_STORAGE_BLOCK = 0x92E6,
	GL_IS_PER_PATCH = 0x92E7,
	GL_IS_PER_PATCH_EXT = 0x92E7,
	GL_IS_PER_PATCH_OES = 0x92E7,
	GL_VERTEX_SUBROUTINE = 0x92E8,
	GL_TESS_CONTROL_SUBROUTINE = 0x92E9,
	GL_TESS_EVALUATION_SUBROUTINE = 0x92EA,
	GL_GEOMETRY_SUBROUTINE = 0x92EB,
	GL_FRAGMENT_SUBROUTINE = 0x92EC,
	GL_COMPUTE_SUBROUTINE = 0x92ED,
	GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE,
	GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF,
	GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0,
	GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1,
	GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2,
	GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3,
	GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4,
	GL_ACTIVE_RESOURCES = 0x92F5,
	GL_MAX_NAME_LENGTH = 0x92F6,
	GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7,
	GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8,
	GL_NAME_LENGTH = 0x92F9,
	GL_TYPE = 0x92FA,
	GL_ARRAY_SIZE = 0x92FB,
	GL_OFFSET = 0x92FC,
	GL_BLOCK_INDEX = 0x92FD,
	GL_ARRAY_STRIDE = 0x92FE,
	GL_MATRIX_STRIDE = 0x92FF,
	GL_IS_ROW_MAJOR = 0x9300,
	GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301,
	GL_BUFFER_BINDING = 0x9302,
	GL_BUFFER_DATA_SIZE = 0x9303,
	GL_NUM_ACTIVE_VARIABLES = 0x9304,
	GL_ACTIVE_VARIABLES = 0x9305,
	GL_REFERENCED_BY_VERTEX_SHADER = 0x9306,
	GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307,
	GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 0x9307,
	GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 0x9307,
	GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308,
	GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 0x9308,
	GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 0x9308,
	GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309,
	GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 0x9309,
	GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 0x9309,
	GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A,
	GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B,
	GL_TOP_LEVEL_ARRAY_SIZE = 0x930C,
	GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D,
	GL_LOCATION = 0x930E,
	GL_LOCATION_INDEX = 0x930F,
	GL_LOCATION_INDEX_EXT = 0x930F,
	GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310,
	GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311,
	GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312,
	GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 0x9312,
	GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 0x9312,
	GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313,
	GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314,
	GL_MAX_FRAMEBUFFER_WIDTH = 0x9315,
	GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316,
	GL_MAX_FRAMEBUFFER_LAYERS = 0x9317,
	GL_MAX_FRAMEBUFFER_LAYERS_EXT = 0x9317,
	GL_MAX_FRAMEBUFFER_LAYERS_OES = 0x9317,
	GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318,
	GL_RASTER_MULTISAMPLE_EXT = 0x9327,
	GL_RASTER_SAMPLES_EXT = 0x9328,
	GL_MAX_RASTER_SAMPLES_EXT = 0x9329,
	GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A,
	GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B,
	GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C,
	GL_DEPTH_SAMPLES_NV = 0x932D,
	GL_STENCIL_SAMPLES_NV = 0x932E,
	GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F,
	GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330,
	GL_COVERAGE_MODULATION_TABLE_NV = 0x9331,
	GL_COVERAGE_MODULATION_NV = 0x9332,
	GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333,
	GL_WARP_SIZE_NV = 0x9339,
	GL_WARPS_PER_SM_NV = 0x933A,
	GL_SM_COUNT_NV = 0x933B,
	GL_FILL_RECTANGLE_NV = 0x933C,
	GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D,
	GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D,
	GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E,
	GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E,
	GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F,
	GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F,
	GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340,
	GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340,
	GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341,
	GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341,
	GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342,
	GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342,
	GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343,
	GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343,
	GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344,
	GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345,
	GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346,
	GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347,
	GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348,
	GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349,
	GL_LOCATION_COMPONENT = 0x934A,
	GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B,
	GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C,
	GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 0x934D,
	GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 0x934E,
	GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 0x934F,
	GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 0x9350,
	GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 0x9351,
	GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 0x9352,
	GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 0x9353,
	GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 0x9354,
	GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 0x9355,
	GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 0x9356,
	GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 0x9357,
	GL_VIEWPORT_SWIZZLE_X_NV = 0x9358,
	GL_VIEWPORT_SWIZZLE_Y_NV = 0x9359,
	GL_VIEWPORT_SWIZZLE_Z_NV = 0x935A,
	GL_VIEWPORT_SWIZZLE_W_NV = 0x935B,
	GL_CLIP_ORIGIN = 0x935C,
	GL_CLIP_ORIGIN_EXT = 0x935C,
	GL_CLIP_DEPTH_MODE = 0x935D,
	GL_CLIP_DEPTH_MODE_EXT = 0x935D,
	GL_NEGATIVE_ONE_TO_ONE = 0x935E,
	GL_NEGATIVE_ONE_TO_ONE_EXT = 0x935E,
	GL_ZERO_TO_ONE = 0x935F,
	GL_ZERO_TO_ONE_EXT = 0x935F,
	GL_CLEAR_TEXTURE = 0x9365,
	GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366,
	GL_TEXTURE_REDUCTION_MODE_EXT = 0x9366,
	GL_WEIGHTED_AVERAGE_ARB = 0x9367,
	GL_WEIGHTED_AVERAGE_EXT = 0x9367,
	GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368,
	GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369,
	GL_FONT_UNAVAILABLE_NV = 0x936A,
	GL_FONT_UNINTELLIGIBLE_NV = 0x936B,
	GL_STANDARD_FONT_FORMAT_NV = 0x936C,
	GL_FRAGMENT_INPUT_NV = 0x936D,
	GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E,
	GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F,
	GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370,
	GL_MULTISAMPLES_NV = 0x9371,
	GL_SUPERSAMPLE_SCALE_X_NV = 0x9372,
	GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373,
	GL_CONFORMANT_NV = 0x9374,
	GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379,
	GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A,
	GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B,
	GL_VIEWPORT_POSITION_W_SCALE_NV = 0x937C,
	GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 0x937D,
	GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 0x937E,
	GL_REPRESENTATIVE_FRAGMENT_TEST_NV = 0x937F,
}; // Khronos bug 7658
typedef enum {
	GL_NUM_SAMPLE_COUNTS = 0x9380,
	GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381,
	GL_MULTISAMPLE_LINE_WIDTH_RANGE = 0x9381,
	GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382,
	GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 0x9382,
	GL_VIEW_CLASS_EAC_R11 = 0x9383,
	GL_VIEW_CLASS_EAC_RG11 = 0x9384,
	GL_VIEW_CLASS_ETC2_RGB = 0x9385,
	GL_VIEW_CLASS_ETC2_RGBA = 0x9386,
	GL_VIEW_CLASS_ETC2_EAC_RGBA = 0x9387,
	GL_VIEW_CLASS_ASTC_4x4_RGBA = 0x9388,
	GL_VIEW_CLASS_ASTC_5x4_RGBA = 0x9389,
	GL_VIEW_CLASS_ASTC_5x5_RGBA = 0x938A,
	GL_VIEW_CLASS_ASTC_6x5_RGBA = 0x938B,
	GL_VIEW_CLASS_ASTC_6x6_RGBA = 0x938C,
	GL_VIEW_CLASS_ASTC_8x5_RGBA = 0x938D,
	GL_VIEW_CLASS_ASTC_8x6_RGBA = 0x938E,
	GL_VIEW_CLASS_ASTC_8x8_RGBA = 0x938F,
	GL_VIEW_CLASS_ASTC_10x5_RGBA = 0x9390,
	GL_VIEW_CLASS_ASTC_10x6_RGBA = 0x9391,
	GL_VIEW_CLASS_ASTC_10x8_RGBA = 0x9392,
	GL_VIEW_CLASS_ASTC_10x10_RGBA = 0x9393,
	GL_VIEW_CLASS_ASTC_12x10_RGBA = 0x9394,
	GL_VIEW_CLASS_ASTC_12x12_RGBA = 0x9395,
};
typedef enum {
	GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x93A0,
	GL_BGRA8_EXT = 0x93A1,
	GL_TEXTURE_USAGE_ANGLE = 0x93A2,
	GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 0x93A3,
	GL_PACK_REVERSE_ROW_ORDER_ANGLE = 0x93A4,
	GL_PROGRAM_BINARY_ANGLE = 0x93A6,
}; // Khronos bug 8100
typedef enum {
	GL_COMPRESSED_RGBA_ASTC_4x4 = 0x93B0,
	GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,
	GL_COMPRESSED_RGBA_ASTC_5x4 = 0x93B1,
	GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1,
	GL_COMPRESSED_RGBA_ASTC_5x5 = 0x93B2,
	GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2,
	GL_COMPRESSED_RGBA_ASTC_6x5 = 0x93B3,
	GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3,
	GL_COMPRESSED_RGBA_ASTC_6x6 = 0x93B4,
	GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4,
	GL_COMPRESSED_RGBA_ASTC_8x5 = 0x93B5,
	GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5,
	GL_COMPRESSED_RGBA_ASTC_8x6 = 0x93B6,
	GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6,
	GL_COMPRESSED_RGBA_ASTC_8x8 = 0x93B7,
	GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7,
	GL_COMPRESSED_RGBA_ASTC_10x5 = 0x93B8,
	GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8,
	GL_COMPRESSED_RGBA_ASTC_10x6 = 0x93B9,
	GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9,
	GL_COMPRESSED_RGBA_ASTC_10x8 = 0x93BA,
	GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA,
	GL_COMPRESSED_RGBA_ASTC_10x10 = 0x93BB,
	GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB,
	GL_COMPRESSED_RGBA_ASTC_12x10 = 0x93BC,
	GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC,
	GL_COMPRESSED_RGBA_ASTC_12x12 = 0x93BD,
	GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD,
	GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93C0,
	GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93C1,
	GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93C2,
	GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93C3,
	GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93C4,
	GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93C5,
	GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93C6,
	GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93C7,
	GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93C8,
	GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93C9,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93E0,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93E1,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93E2,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93E3,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93E4,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93E5,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93E6,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93E7,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93E8,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93E9,
}; // Khronos bug 8853
typedef enum {
	GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 0x93F0,
	GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 0x93F1,
}; // Khronos bug 10233
typedef enum {
	GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0,
	GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1,
	GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2,
	GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3,
	GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4,
	GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5,
	GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8,
	GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9,
	GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA,
	GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB,
	GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC,
	GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD,
	GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE,
	GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF,
	GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500,
}; // Khronos bug 11345
typedef enum {
}; // Khronos bug 12203
typedef enum {
	GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 0x9530,
	GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 0x9531,
	GL_SUBGROUP_SIZE_KHR = 0x9532,
	GL_SUBGROUP_SUPPORTED_STAGES_KHR = 0x9533,
	GL_SUBGROUP_SUPPORTED_FEATURES_KHR = 0x9534,
	GL_SUBGROUP_QUAD_ALL_STAGES_KHR = 0x9535,
	GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = 0x9536,
	GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = 0x9537,
	GL_MAX_MESH_OUTPUT_VERTICES_NV = 0x9538,
	GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = 0x9539,
	GL_MAX_TASK_OUTPUT_COUNT_NV = 0x953A,
	GL_MAX_MESH_WORK_GROUP_SIZE_NV = 0x953B,
	GL_MAX_TASK_WORK_GROUP_SIZE_NV = 0x953C,
	GL_MAX_DRAW_MESH_TASKS_COUNT_NV = 0x953D,
	GL_MESH_WORK_GROUP_SIZE_NV = 0x953E,
	GL_TASK_WORK_GROUP_SIZE_NV = 0x953F,
	GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 0x9540,
	GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 0x9542,
	GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 0x9543,
	GL_QUERY_RESOURCE_SYS_RESERVED_NV = 0x9544,
	GL_QUERY_RESOURCE_TEXTURE_NV = 0x9545,
	GL_QUERY_RESOURCE_RENDERBUFFER_NV = 0x9546,
	GL_QUERY_RESOURCE_BUFFEROBJECT_NV = 0x9547,
	GL_PER_GPU_STORAGE_NV = 0x9548,
	GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9549,
	GL_UPLOAD_GPU_MASK_NVX = 0x954A,
	GL_CONSERVATIVE_RASTER_MODE_NV = 0x954D,
	GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 0x954E,
	GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 0x954F,
	GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 0x9550,
	GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551,
	GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 0x9551,
	GL_SPIR_V_BINARY = 0x9552,
	GL_SPIR_V_BINARY_ARB = 0x9552,
	GL_SPIR_V_EXTENSIONS = 0x9553,
	GL_NUM_SPIR_V_EXTENSIONS = 0x9554,
	GL_SCISSOR_TEST_EXCLUSIVE_NV = 0x9555,
	GL_SCISSOR_BOX_EXCLUSIVE_NV = 0x9556,
	GL_MAX_MESH_VIEWS_NV = 0x9557,
	GL_RENDER_GPU_MASK_NV = 0x9558,
	GL_MESH_SHADER_NV = 0x9559,
	GL_TASK_SHADER_NV = 0x955A,
	GL_SHADING_RATE_IMAGE_BINDING_NV = 0x955B,
	GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 0x955C,
	GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 0x955D,
	GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 0x955E,
	GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = 0x955F,
	GL_SHADING_RATE_IMAGE_NV = 0x9563,
	GL_SHADING_RATE_NO_INVOCATIONS_NV = 0x9564,
	GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0x9565,
	GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 0x9566,
	GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 0x9567,
	GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 0x9568,
	GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 0x9569,
	GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 0x956A,
	GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 0x956B,
	GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 0x956C,
	GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 0x956D,
	GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 0x956E,
	GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 0x956F,
	GL_MESH_VERTICES_OUT_NV = 0x9579,
	GL_MESH_PRIMITIVES_OUT_NV = 0x957A,
	GL_MESH_OUTPUT_TYPE_NV = 0x957B,
	GL_MESH_SUBROUTINE_NV = 0x957C,
	GL_TASK_SUBROUTINE_NV = 0x957D,
	GL_MESH_SUBROUTINE_UNIFORM_NV = 0x957E,
	GL_TASK_SUBROUTINE_UNIFORM_NV = 0x957F,
	GL_TEXTURE_TILING_EXT = 0x9580,
	GL_DEDICATED_MEMORY_OBJECT_EXT = 0x9581,
	GL_NUM_TILING_TYPES_EXT = 0x9582,
	GL_TILING_TYPES_EXT = 0x9583,
	GL_OPTIMAL_TILING_EXT = 0x9584,
	GL_LINEAR_TILING_EXT = 0x9585,
	GL_HANDLE_TYPE_OPAQUE_FD_EXT = 0x9586,
	GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 0x9587,
	GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 0x9588,
	GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 0x9589,
	GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 0x958A,
	GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 0x958B,
	GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 0x958C,
	GL_LAYOUT_GENERAL_EXT = 0x958D,
	GL_LAYOUT_COLOR_ATTACHMENT_EXT = 0x958E,
	GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 0x958F,
	GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 0x9590,
	GL_LAYOUT_SHADER_READ_ONLY_EXT = 0x9591,
	GL_LAYOUT_TRANSFER_SRC_EXT = 0x9592,
	GL_LAYOUT_TRANSFER_DST_EXT = 0x9593,
	GL_HANDLE_TYPE_D3D12_FENCE_EXT = 0x9594,
	GL_D3D12_FENCE_VALUE_EXT = 0x9595,
	GL_TIMELINE_SEMAPHORE_VALUE_NV = 0x9595,
	GL_NUM_DEVICE_UUIDS_EXT = 0x9596,
	GL_DEVICE_UUID_EXT = 0x9597,
	GL_DRIVER_UUID_EXT = 0x9598,
	GL_DEVICE_LUID_EXT = 0x9599,
	GL_DEVICE_NODE_MASK_EXT = 0x959A,
	GL_PROTECTED_MEMORY_OBJECT_EXT = 0x959B,
	GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 0x959C,
	GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 0x959D,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 0x959E,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 0x959F,
	GL_REFERENCED_BY_MESH_SHADER_NV = 0x95A0,
	GL_REFERENCED_BY_TASK_SHADER_NV = 0x95A1,
	GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 0x95A2,
	GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 0x95A3,
	GL_ATTACHED_MEMORY_OBJECT_NV = 0x95A4,
	GL_ATTACHED_MEMORY_OFFSET_NV = 0x95A5,
	GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = 0x95A6,
	GL_MEMORY_ATTACHABLE_SIZE_NV = 0x95A7,
	GL_MEMORY_ATTACHABLE_NV = 0x95A8,
	GL_DETACHED_MEMORY_INCARNATION_NV = 0x95A9,
	GL_DETACHED_TEXTURES_NV = 0x95AA,
	GL_DETACHED_BUFFERS_NV = 0x95AB,
	GL_MAX_DETACHED_TEXTURES_NV = 0x95AC,
	GL_MAX_DETACHED_BUFFERS_NV = 0x95AD,
	GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 0x95AE,
	GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 0x95AF,
	GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 0x95B0,
	GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV = 0x95B1,
	GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV = 0x95B2,
	GL_SEMAPHORE_TYPE_NV = 0x95B3,
	GL_SEMAPHORE_TYPE_BINARY_NV = 0x95B4,
	GL_SEMAPHORE_TYPE_TIMELINE_NV = 0x95B5,
	GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = 0x95B6,
}; // Khronos bug 12977
typedef enum {
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630,
	GL_MAX_VIEWS_OVR = 0x9631,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632,
	GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633,
}; // Email from Cass Everitt
typedef enum {
	GL_GS_SHADER_BINARY_MTK = 0x9640,
	GL_GS_PROGRAM_BINARY_MTK = 0x9641,
}; // Khronos bug 14294
typedef enum {
	GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 0x9650,
	GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 0x9651,
	GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 0x9652,
}; // Khronos bug 14977
typedef enum {
}; // Khronos bug 15423
typedef enum {
	GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM = 0x96A0,
	GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x96A2,
	GL_VALIDATE_SHADER_BINARY_QCOM = 0x96A3,
	GL_SHADING_RATE_QCOM = 0x96A4,
	GL_SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM = 0x96A5,
	GL_SHADING_RATE_1X1_PIXELS_QCOM = 0x96A6,
	GL_SHADING_RATE_1X2_PIXELS_QCOM = 0x96A7,
	GL_SHADING_RATE_2X1_PIXELS_QCOM = 0x96A8,
	GL_SHADING_RATE_2X2_PIXELS_QCOM = 0x96A9,
	GL_SHADING_RATE_1X4_PIXELS_QCOM = 0x96AA,
	GL_SHADING_RATE_4X1_PIXELS_QCOM = 0x96AB,
	GL_SHADING_RATE_4X2_PIXELS_QCOM = 0x96AC,
	GL_SHADING_RATE_2X4_PIXELS_QCOM = 0x96AD,
	GL_SHADING_RATE_4X4_PIXELS_QCOM = 0x96AE,
}; // contact Jeff Leger
typedef enum {
}; // github pull request
typedef enum {
}; // Contact Jan-Harald Fredriksen
typedef enum {
}; // RESERVED FOR FUTURE ALLOCATIONS BY KHRONOS
typedef enum {
}; // GLU enums
typedef enum {
}; // Conformance test enums
typedef enum {
}; // Unused, unlikely to ever be used
typedef enum {
	GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262,
	GL_CULL_VERTEX_IBM = 103050,
	GL_ALL_STATIC_DATA_IBM = 103060,
	GL_STATIC_VERTEX_ARRAY_IBM = 103061,
	GL_VERTEX_ARRAY_LIST_IBM = 103070,
	GL_NORMAL_ARRAY_LIST_IBM = 103071,
	GL_COLOR_ARRAY_LIST_IBM = 103072,
	GL_INDEX_ARRAY_LIST_IBM = 103073,
	GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074,
	GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075,
	GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076,
	GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077,
	GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080,
	GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081,
	GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082,
	GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083,
	GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084,
	GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085,
	GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086,
	GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087,
}; // IBM is out of the graphics hardware business. Most of this range will remain unused.
typedef enum {
}; // NEC may be out of the graphics hardware business?
typedef enum {
}; // Compaq was acquired by HP
typedef enum {
}; // Kubota Pacific is out of business
typedef enum {
	GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8,
	GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD,
	GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE,
	GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202,
	GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203,
	GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204,
	GL_ALWAYS_FAST_HINT_PGI = 0x1A20C,
	GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D,
	GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E,
	GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F,
	GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210,
	GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211,
	GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216,
	GL_STRICT_LIGHTING_HINT_PGI = 0x1A217,
	GL_STRICT_SCISSOR_HINT_PGI = 0x1A218,
	GL_FULL_STIPPLE_HINT_PGI = 0x1A219,
	GL_CLIP_NEAR_HINT_PGI = 0x1A220,
	GL_CLIP_FAR_HINT_PGI = 0x1A221,
	GL_WIDE_LINE_HINT_PGI = 0x1A222,
	GL_BACK_NORMALS_HINT_PGI = 0x1A223,
	GL_VERTEX_DATA_HINT_PGI = 0x1A22A,
	GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B,
	GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C,
	GL_MAX_VERTEX_HINT_PGI = 0x1A22D,
}; // Portland Graphics was acquired by Template Graphics, which is out of business
typedef enum {
}; // Evans and Sutherland is out of the graphics hardware business
typedef struct {
	void (*Accum) (GL_AccumOp_t op, GLfloat value, );
	void (*AccumxOES) (GLenum op, GLfixed value, );
	void (*ActiveProgramEXT) (GLuint program, );
	void (*ActiveShaderProgram) (GLuint pipeline, GLuint program, );
	void (*ActiveShaderProgramEXT) (GLuint pipeline, GLuint program, );
	void (*ActiveStencilFaceEXT) (GL_StencilFaceDirection_t face, );
	void (*ActiveTexture) (GL_TextureUnit_t texture, );
	void (*ActiveTextureARB) (GL_TextureUnit_t texture, );
	void (*ActiveVaryingNV) (GLuint program, GLchar *name, );
	void (*AlphaFragmentOp1ATI) (GL_FragmentOpATI_t op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, );
	void (*AlphaFragmentOp2ATI) (GL_FragmentOpATI_t op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, );
	void (*AlphaFragmentOp3ATI) (GL_FragmentOpATI_t op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod, );
	void (*AlphaFunc) (GL_AlphaFunction_t func, GLfloat ref, );
	void (*AlphaFuncQCOM) (GLenum func, GLclampf ref, );
	void (*AlphaFuncx) (GL_AlphaFunction_t func, GLfixed ref, );
	void (*AlphaFuncxOES) (GL_AlphaFunction_t func, GLfixed ref, );
	void (*AlphaToCoverageDitherControlNV) (GLenum mode, );
	void (*ApplyFramebufferAttachmentCMAAINTEL) ();
	void (*ApplyTextureEXT) (GL_LightTextureModeEXT_t mode, );
	GLboolean (*AcquireKeyedMutexWin32EXT) (GLuint memory, GLuint64 key, GLuint timeout, );
	GLboolean (*AreProgramsResidentNV) (GLsizei n, GLuint *programs, GLboolean *residences, );
	GLboolean (*AreTexturesResident) (GLsizei n, GLuint *textures, GLboolean *residences, );
	GLboolean (*AreTexturesResidentEXT) (GLsizei n, GLuint *textures, GLboolean *residences, );
	void (*ArrayElement) (GLint i, );
	void (*ArrayElementEXT) (GLint i, );
	void (*ArrayObjectATI) (GL_EnableCap_t array, GLint size, GL_ScalarType_t type, GLsizei stride, GLuint buffer, GLuint offset, );
	GLuint (*AsyncCopyBufferSubDataNVX) (GLsizei waitSemaphoreCount, GLuint *waitSemaphoreArray, GLuint64 *fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, GLuint *signalSemaphoreArray, GLuint64 *signalValueArray, );
	GLuint (*AsyncCopyImageSubDataNVX) (GLsizei waitSemaphoreCount, GLuint *waitSemaphoreArray, GLuint64 *waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, GLuint *signalSemaphoreArray, GLuint64 *signalValueArray, );
	void (*AsyncMarkerSGIX) (GLuint marker, );
	void (*AttachObjectARB) (GLhandleARB containerObj, GLhandleARB obj, );
	void (*AttachShader) (GLuint program, GLuint shader, );
	void (*Begin) (GL_PrimitiveType_t mode, );
	void (*BeginConditionalRender) (GLuint id, GL_ConditionalRenderMode_t mode, );
	void (*BeginConditionalRenderNV) (GLuint id, GL_ConditionalRenderMode_t mode, );
	void (*BeginConditionalRenderNVX) (GLuint id, );
	void (*BeginFragmentShaderATI) ();
	void (*BeginOcclusionQueryNV) (GLuint id, );
	void (*BeginPerfMonitorAMD) (GLuint monitor, );
	void (*BeginPerfQueryINTEL) (GLuint queryHandle, );
	void (*BeginQuery) (GL_QueryTarget_t target, GLuint id, );
	void (*BeginQueryARB) (GL_QueryTarget_t target, GLuint id, );
	void (*BeginQueryEXT) (GL_QueryTarget_t target, GLuint id, );
	void (*BeginQueryIndexed) (GL_QueryTarget_t target, GLuint index, GLuint id, );
	void (*BeginTransformFeedback) (GL_PrimitiveType_t primitiveMode, );
	void (*BeginTransformFeedbackEXT) (GL_PrimitiveType_t primitiveMode, );
	void (*BeginTransformFeedbackNV) (GL_PrimitiveType_t primitiveMode, );
	void (*BeginVertexShaderEXT) ();
	void (*BeginVideoCaptureNV) (GLuint video_capture_slot, );
	void (*BindAttribLocation) (GLuint program, GLuint index, GLchar *name, );
	void (*BindAttribLocationARB) (GLhandleARB programObj, GLuint index, GLcharARB *name, );
	void (*BindBuffer) (GL_BufferTargetARB_t target, GLuint buffer, );
	void (*BindBufferARB) (GL_BufferTargetARB_t target, GLuint buffer, );
	void (*BindBufferBase) (GL_BufferTargetARB_t target, GLuint index, GLuint buffer, );
	void (*BindBufferBaseEXT) (GL_BufferTargetARB_t target, GLuint index, GLuint buffer, );
	void (*BindBufferBaseNV) (GL_BufferTargetARB_t target, GLuint index, GLuint buffer, );
	void (*BindBufferOffsetEXT) (GL_BufferTargetARB_t target, GLuint index, GLuint buffer, GLintptr offset, );
	void (*BindBufferOffsetNV) (GL_BufferTargetARB_t target, GLuint index, GLuint buffer, GLintptr offset, );
	void (*BindBufferRange) (GL_BufferTargetARB_t target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, );
	void (*BindBufferRangeEXT) (GL_BufferTargetARB_t target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, );
	void (*BindBufferRangeNV) (GL_BufferTargetARB_t target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, );
	void (*BindBuffersBase) (GL_BufferTargetARB_t target, GLuint first, GLsizei count, GLuint *buffers, );
	void (*BindBuffersRange) (GL_BufferTargetARB_t target, GLuint first, GLsizei count, GLuint *buffers, GLintptr *offsets, GLsizeiptr *sizes, );
	void (*BindFragDataLocation) (GLuint program, GLuint color, GLchar *name, );
	void (*BindFragDataLocationEXT) (GLuint program, GLuint color, GLchar *name, );
	void (*BindFragDataLocationIndexed) (GLuint program, GLuint colorNumber, GLuint index, GLchar *name, );
	void (*BindFragDataLocationIndexedEXT) (GLuint program, GLuint colorNumber, GLuint index, GLchar *name, );
	void (*BindFragmentShaderATI) (GLuint id, );
	void (*BindFramebuffer) (GL_FramebufferTarget_t target, GLuint framebuffer, );
	void (*BindFramebufferEXT) (GL_FramebufferTarget_t target, GLuint framebuffer, );
	void (*BindFramebufferOES) (GL_FramebufferTarget_t target, GLuint framebuffer, );
	void (*BindImageTexture) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GL_BufferAccessARB_t access, GL_InternalFormat_t format, );
	void (*BindImageTextureEXT) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GL_BufferAccessARB_t access, GLint format, );
	void (*BindImageTextures) (GLuint first, GLsizei count, GLuint *textures, );
	GLuint (*BindLightParameterEXT) (GL_LightName_t light, GL_LightParameter_t value, );
	GLuint (*BindMaterialParameterEXT) (GL_MaterialFace_t face, GL_MaterialParameter_t value, );
	void (*BindMultiTextureEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLuint texture, );
	GLuint (*BindParameterEXT) (GL_VertexShaderParameterEXT_t value, );
	void (*BindProgramARB) (GL_ProgramTarget_t target, GLuint program, );
	void (*BindProgramNV) (GL_VertexAttribEnumNV_t target, GLuint id, );
	void (*BindProgramPipeline) (GLuint pipeline, );
	void (*BindProgramPipelineEXT) (GLuint pipeline, );
	void (*BindRenderbuffer) (GL_RenderbufferTarget_t target, GLuint renderbuffer, );
	void (*BindRenderbufferEXT) (GL_RenderbufferTarget_t target, GLuint renderbuffer, );
	void (*BindRenderbufferOES) (GL_RenderbufferTarget_t target, GLuint renderbuffer, );
	void (*BindSampler) (GLuint unit, GLuint sampler, );
	void (*BindSamplers) (GLuint first, GLsizei count, GLuint *samplers, );
	void (*BindShadingRateImageNV) (GLuint texture, );
	GLuint (*BindTexGenParameterEXT) (GL_TextureUnit_t unit, GL_TextureCoordName_t coord, GL_TextureGenParameter_t value, );
	void (*BindTexture) (GL_TextureTarget_t target, GLuint texture, );
	void (*BindTextureEXT) (GL_TextureTarget_t target, GLuint texture, );
	void (*BindTextureUnit) (GLuint unit, GLuint texture, );
	GLuint (*BindTextureUnitParameterEXT) (GL_TextureUnit_t unit, GL_VertexShaderTextureUnitParameter_t value, );
	void (*BindTextures) (GLuint first, GLsizei count, GLuint *textures, );
	void (*BindTransformFeedback) (GL_BindTransformFeedbackTarget_t target, GLuint id, );
	void (*BindTransformFeedbackNV) (GL_BufferTargetARB_t target, GLuint id, );
	void (*BindVertexArray) (GLuint array, );
	void (*BindVertexArrayAPPLE) (GLuint array, );
	void (*BindVertexArrayOES) (GLuint array, );
	void (*BindVertexBuffer) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, );
	void (*BindVertexBuffers) (GLuint first, GLsizei count, GLuint *buffers, GLintptr *offsets, GLsizei *strides, );
	void (*BindVertexShaderEXT) (GLuint id, );
	void (*BindVideoCaptureStreamBufferNV) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset, );
	void (*BindVideoCaptureStreamTextureNV) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture, );
	void (*Binormal3bEXT) (GLbyte bx, GLbyte by, GLbyte bz, );
	void (*Binormal3bvEXT) (GLbyte *v, );
	void (*Binormal3dEXT) (GLdouble bx, GLdouble by, GLdouble bz, );
	void (*Binormal3dvEXT) (GLdouble *v, );
	void (*Binormal3fEXT) (GLfloat bx, GLfloat by, GLfloat bz, );
	void (*Binormal3fvEXT) (GLfloat *v, );
	void (*Binormal3iEXT) (GLint bx, GLint by, GLint bz, );
	void (*Binormal3ivEXT) (GLint *v, );
	void (*Binormal3sEXT) (GLshort bx, GLshort by, GLshort bz, );
	void (*Binormal3svEXT) (GLshort *v, );
	void (*BinormalPointerEXT) (GL_BinormalPointerTypeEXT_t type, GLsizei stride, pointer, );
	void (*Bitmap) (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte *bitmap, );
	void (*BitmapxOES) (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, GLubyte *bitmap, );
	void (*BlendBarrier) ();
	void (*BlendBarrierKHR) ();
	void (*BlendBarrierNV) ();
	void (*BlendColor) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, );
	void (*BlendColorEXT) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, );
	void (*BlendColorxOES) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, );
	void (*BlendEquation) (GL_BlendEquationModeEXT_t mode, );
	void (*BlendEquationEXT) (GL_BlendEquationModeEXT_t mode, );
	void (*BlendEquationIndexedAMD) (GLuint buf, GL_BlendEquationModeEXT_t mode, );
	void (*BlendEquationOES) (GL_BlendEquationModeEXT_t mode, );
	void (*BlendEquationSeparate) (GL_BlendEquationModeEXT_t modeRGB, GL_BlendEquationModeEXT_t modeAlpha, );
	void (*BlendEquationSeparateEXT) (GL_BlendEquationModeEXT_t modeRGB, GL_BlendEquationModeEXT_t modeAlpha, );
	void (*BlendEquationSeparateIndexedAMD) (GLuint buf, GL_BlendEquationModeEXT_t modeRGB, GL_BlendEquationModeEXT_t modeAlpha, );
	void (*BlendEquationSeparateOES) (GL_BlendEquationModeEXT_t modeRGB, GL_BlendEquationModeEXT_t modeAlpha, );
	void (*BlendEquationSeparatei) (GLuint buf, GL_BlendEquationModeEXT_t modeRGB, GL_BlendEquationModeEXT_t modeAlpha, );
	void (*BlendEquationSeparateiARB) (GLuint buf, GL_BlendEquationModeEXT_t modeRGB, GL_BlendEquationModeEXT_t modeAlpha, );
	void (*BlendEquationSeparateiEXT) (GLuint buf, GL_BlendEquationModeEXT_t modeRGB, GL_BlendEquationModeEXT_t modeAlpha, );
	void (*BlendEquationSeparateiOES) (GLuint buf, GL_BlendEquationModeEXT_t modeRGB, GL_BlendEquationModeEXT_t modeAlpha, );
	void (*BlendEquationi) (GLuint buf, GL_BlendEquationModeEXT_t mode, );
	void (*BlendEquationiARB) (GLuint buf, GL_BlendEquationModeEXT_t mode, );
	void (*BlendEquationiEXT) (GLuint buf, GL_BlendEquationModeEXT_t mode, );
	void (*BlendEquationiOES) (GLuint buf, GL_BlendEquationModeEXT_t mode, );
	void (*BlendFunc) (GL_BlendingFactor_t sfactor, GL_BlendingFactor_t dfactor, );
	void (*BlendFuncIndexedAMD) (GLuint buf, GLenum src, GLenum dst, );
	void (*BlendFuncSeparate) (GL_BlendingFactor_t sfactorRGB, GL_BlendingFactor_t dfactorRGB, GL_BlendingFactor_t sfactorAlpha, GL_BlendingFactor_t dfactorAlpha, );
	void (*BlendFuncSeparateEXT) (GL_BlendingFactor_t sfactorRGB, GL_BlendingFactor_t dfactorRGB, GL_BlendingFactor_t sfactorAlpha, GL_BlendingFactor_t dfactorAlpha, );
	void (*BlendFuncSeparateINGR) (GL_BlendingFactor_t sfactorRGB, GL_BlendingFactor_t dfactorRGB, GL_BlendingFactor_t sfactorAlpha, GL_BlendingFactor_t dfactorAlpha, );
	void (*BlendFuncSeparateIndexedAMD) (GLuint buf, GL_BlendingFactor_t srcRGB, GL_BlendingFactor_t dstRGB, GL_BlendingFactor_t srcAlpha, GL_BlendingFactor_t dstAlpha, );
	void (*BlendFuncSeparateOES) (GL_BlendingFactor_t srcRGB, GL_BlendingFactor_t dstRGB, GL_BlendingFactor_t srcAlpha, GL_BlendingFactor_t dstAlpha, );
	void (*BlendFuncSeparatei) (GLuint buf, GL_BlendingFactor_t srcRGB, GL_BlendingFactor_t dstRGB, GL_BlendingFactor_t srcAlpha, GL_BlendingFactor_t dstAlpha, );
	void (*BlendFuncSeparateiARB) (GLuint buf, GL_BlendingFactor_t srcRGB, GL_BlendingFactor_t dstRGB, GL_BlendingFactor_t srcAlpha, GL_BlendingFactor_t dstAlpha, );
	void (*BlendFuncSeparateiEXT) (GLuint buf, GL_BlendingFactor_t srcRGB, GL_BlendingFactor_t dstRGB, GL_BlendingFactor_t srcAlpha, GL_BlendingFactor_t dstAlpha, );
	void (*BlendFuncSeparateiOES) (GLuint buf, GL_BlendingFactor_t srcRGB, GL_BlendingFactor_t dstRGB, GL_BlendingFactor_t srcAlpha, GL_BlendingFactor_t dstAlpha, );
	void (*BlendFunci) (GLuint buf, GL_BlendingFactor_t src, GL_BlendingFactor_t dst, );
	void (*BlendFunciARB) (GLuint buf, GL_BlendingFactor_t src, GL_BlendingFactor_t dst, );
	void (*BlendFunciEXT) (GLuint buf, GL_BlendingFactor_t src, GL_BlendingFactor_t dst, );
	void (*BlendFunciOES) (GLuint buf, GL_BlendingFactor_t src, GL_BlendingFactor_t dst, );
	void (*BlendParameteriNV) (GLenum pname, GLint value, );
	void (*BlitFramebuffer) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GL_BlitFramebufferFilter_t filter, );
	void (*BlitFramebufferANGLE) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GL_BlitFramebufferFilter_t filter, );
	void (*BlitFramebufferEXT) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GL_BlitFramebufferFilter_t filter, );
	void (*BlitFramebufferNV) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GL_BlitFramebufferFilter_t filter, );
	void (*BlitNamedFramebuffer) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GL_BlitFramebufferFilter_t filter, );
	void (*BufferAddressRangeNV) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length, );
	void (*BufferAttachMemoryNV) (GL_BufferTargetARB_t target, GLuint memory, GLuint64 offset, );
	void (*BufferData) (GL_BufferTargetARB_t target, GLsizeiptr size, data, GL_BufferUsageARB_t usage, );
	void (*BufferDataARB) (GL_BufferTargetARB_t target, GLsizeiptrARB size, data, GL_BufferUsageARB_t usage, );
	void (*BufferPageCommitmentARB) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit, );
	void (*BufferPageCommitmentMemNV) (GL_BufferStorageTarget_t target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit, );
	void (*BufferParameteriAPPLE) (GLenum target, GLenum pname, GLint param, );
	void (*BufferStorage) (GL_BufferStorageTarget_t target, GLsizeiptr size, data, GLbitfield flags, );
	void (*BufferStorageEXT) (GL_BufferStorageTarget_t target, GLsizeiptr size, data, GLbitfield flags, );
	void (*BufferStorageExternalEXT) (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags, );
	void (*BufferStorageMemEXT) (GL_BufferTargetARB_t target, GLsizeiptr size, GLuint memory, GLuint64 offset, );
	void (*BufferSubData) (GL_BufferTargetARB_t target, GLintptr offset, GLsizeiptr size, data, );
	void (*BufferSubDataARB) (GL_BufferTargetARB_t target, GLintptrARB offset, GLsizeiptrARB size, data, );
	void (*CallCommandListNV) (GLuint list, );
	void (*CallList) (GLuint list, );
	void (*CallLists) (GLsizei n, GL_ListNameType_t type, lists, );
	GLenum (*CheckFramebufferStatus) (GL_FramebufferTarget_t target, );
	GLenum (*CheckFramebufferStatusEXT) (GL_FramebufferTarget_t target, );
	GLenum (*CheckFramebufferStatusOES) (GL_FramebufferTarget_t target, );
	GLenum (*CheckNamedFramebufferStatus) (GLuint framebuffer, GL_FramebufferTarget_t target, );
	GLenum (*CheckNamedFramebufferStatusEXT) (GLuint framebuffer, GL_FramebufferTarget_t target, );
	void (*ClampColor) (GL_ClampColorTargetARB_t target, GL_ClampColorModeARB_t clamp, );
	void (*ClampColorARB) (GL_ClampColorTargetARB_t target, GL_ClampColorModeARB_t clamp, );
	void (*Clear) (GLbitfield mask, );
	void (*ClearAccum) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, );
	void (*ClearAccumxOES) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, );
	void (*ClearBufferData) (GL_BufferStorageTarget_t target, GL_SizedInternalFormat_t internalformat, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ClearBufferSubData) (GL_BufferTargetARB_t target, GL_SizedInternalFormat_t internalformat, GLintptr offset, GLsizeiptr size, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ClearBufferfi) (GL_Buffer_t buffer, GLint drawbuffer, GLfloat depth, GLint stencil, );
	void (*ClearBufferfv) (GL_Buffer_t buffer, GLint drawbuffer, GLfloat *value, );
	void (*ClearBufferiv) (GL_Buffer_t buffer, GLint drawbuffer, GLint *value, );
	void (*ClearBufferuiv) (GL_Buffer_t buffer, GLint drawbuffer, GLuint *value, );
	void (*ClearColor) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, );
	void (*ClearColorIiEXT) (GLint red, GLint green, GLint blue, GLint alpha, );
	void (*ClearColorIuiEXT) (GLuint red, GLuint green, GLuint blue, GLuint alpha, );
	void (*ClearColorx) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, );
	void (*ClearColorxOES) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, );
	void (*ClearDepth) (GLdouble depth, );
	void (*ClearDepthdNV) (GLdouble depth, );
	void (*ClearDepthf) (GLfloat d, );
	void (*ClearDepthfOES) (GLclampf depth, );
	void (*ClearDepthx) (GLfixed depth, );
	void (*ClearDepthxOES) (GLfixed depth, );
	void (*ClearIndex) (GLfloat c, );
	void (*ClearNamedBufferData) (GLuint buffer, GL_SizedInternalFormat_t internalformat, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ClearNamedBufferDataEXT) (GLuint buffer, GL_SizedInternalFormat_t internalformat, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ClearNamedBufferSubData) (GLuint buffer, GL_SizedInternalFormat_t internalformat, GLintptr offset, GLsizeiptr size, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ClearNamedBufferSubDataEXT) (GLuint buffer, GL_SizedInternalFormat_t internalformat, GLsizeiptr offset, GLsizeiptr size, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ClearNamedFramebufferfi) (GLuint framebuffer, GL_Buffer_t buffer, GLint drawbuffer, GLfloat depth, GLint stencil, );
	void (*ClearNamedFramebufferfv) (GLuint framebuffer, GL_Buffer_t buffer, GLint drawbuffer, GLfloat *value, );
	void (*ClearNamedFramebufferiv) (GLuint framebuffer, GL_Buffer_t buffer, GLint drawbuffer, GLint *value, );
	void (*ClearNamedFramebufferuiv) (GLuint framebuffer, GL_Buffer_t buffer, GLint drawbuffer, GLuint *value, );
	void (*ClearPixelLocalStorageuiEXT) (GLsizei offset, GLsizei n, GLuint *values, );
	void (*ClearStencil) (GLint s, );
	void (*ClearTexImage) (GLuint texture, GLint level, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ClearTexImageEXT) (GLuint texture, GLint level, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ClearTexSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ClearTexSubImageEXT) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ClientActiveTexture) (GL_TextureUnit_t texture, );
	void (*ClientActiveTextureARB) (GL_TextureUnit_t texture, );
	void (*ClientActiveVertexStreamATI) (GL_VertexStreamATI_t stream, );
	void (*ClientAttribDefaultEXT) (GLbitfield mask, );
	void (*ClientWaitSemaphoreui64NVX) (GLsizei fenceObjectCount, GLuint *semaphoreArray, GLuint64 *fenceValueArray, );
	GLenum (*ClientWaitSync) (GLsync sync, GLbitfield flags, GLuint64 timeout, );
	GLenum (*ClientWaitSyncAPPLE) (GLsync sync, GLbitfield flags, GLuint64 timeout, );
	void (*ClipControl) (GL_ClipControlOrigin_t origin, GL_ClipControlDepth_t depth, );
	void (*ClipControlEXT) (GLenum origin, GLenum depth, );
	void (*ClipPlane) (GL_ClipPlaneName_t plane, GLdouble *equation, );
	void (*ClipPlanef) (GL_ClipPlaneName_t p, GLfloat *eqn, );
	void (*ClipPlanefIMG) (GL_ClipPlaneName_t p, GLfloat *eqn, );
	void (*ClipPlanefOES) (GL_ClipPlaneName_t plane, GLfloat *equation, );
	void (*ClipPlanex) (GL_ClipPlaneName_t plane, GLfixed *equation, );
	void (*ClipPlanexIMG) (GL_ClipPlaneName_t p, GLfixed *eqn, );
	void (*ClipPlanexOES) (GL_ClipPlaneName_t plane, GLfixed *equation, );
	void (*Color3b) (GLbyte red, GLbyte green, GLbyte blue, );
	void (*Color3bv) (GLbyte *v, );
	void (*Color3d) (GLdouble red, GLdouble green, GLdouble blue, );
	void (*Color3dv) (GLdouble *v, );
	void (*Color3f) (GLfloat red, GLfloat green, GLfloat blue, );
	void (*Color3fVertex3fSUN) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z, );
	void (*Color3fVertex3fvSUN) (GLfloat *c, GLfloat *v, );
	void (*Color3fv) (GLfloat *v, );
	void (*Color3hNV) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, );
	void (*Color3hvNV) (GLhalfNV *v, );
	void (*Color3i) (GLint red, GLint green, GLint blue, );
	void (*Color3iv) (GLint *v, );
	void (*Color3s) (GLshort red, GLshort green, GLshort blue, );
	void (*Color3sv) (GLshort *v, );
	void (*Color3ub) (GLubyte red, GLubyte green, GLubyte blue, );
	void (*Color3ubv) (GLubyte *v, );
	void (*Color3ui) (GLuint red, GLuint green, GLuint blue, );
	void (*Color3uiv) (GLuint *v, );
	void (*Color3us) (GLushort red, GLushort green, GLushort blue, );
	void (*Color3usv) (GLushort *v, );
	void (*Color3xOES) (GLfixed red, GLfixed green, GLfixed blue, );
	void (*Color3xvOES) (GLfixed *components, );
	void (*Color4b) (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha, );
	void (*Color4bv) (GLbyte *v, );
	void (*Color4d) (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha, );
	void (*Color4dv) (GLdouble *v, );
	void (*Color4f) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, );
	void (*Color4fNormal3fVertex3fSUN) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, );
	void (*Color4fNormal3fVertex3fvSUN) (GLfloat *c, GLfloat *n, GLfloat *v, );
	void (*Color4fv) (GLfloat *v, );
	void (*Color4hNV) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha, );
	void (*Color4hvNV) (GLhalfNV *v, );
	void (*Color4i) (GLint red, GLint green, GLint blue, GLint alpha, );
	void (*Color4iv) (GLint *v, );
	void (*Color4s) (GLshort red, GLshort green, GLshort blue, GLshort alpha, );
	void (*Color4sv) (GLshort *v, );
	void (*Color4ub) (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha, );
	void (*Color4ubVertex2fSUN) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, );
	void (*Color4ubVertex2fvSUN) (GLubyte *c, GLfloat *v, );
	void (*Color4ubVertex3fSUN) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z, );
	void (*Color4ubVertex3fvSUN) (GLubyte *c, GLfloat *v, );
	void (*Color4ubv) (GLubyte *v, );
	void (*Color4ui) (GLuint red, GLuint green, GLuint blue, GLuint alpha, );
	void (*Color4uiv) (GLuint *v, );
	void (*Color4us) (GLushort red, GLushort green, GLushort blue, GLushort alpha, );
	void (*Color4usv) (GLushort *v, );
	void (*Color4x) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, );
	void (*Color4xOES) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, );
	void (*Color4xvOES) (GLfixed *components, );
	void (*ColorFormatNV) (GLint size, GLenum type, GLsizei stride, );
	void (*ColorFragmentOp1ATI) (GL_FragmentOpATI_t op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, );
	void (*ColorFragmentOp2ATI) (GL_FragmentOpATI_t op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, );
	void (*ColorFragmentOp3ATI) (GL_FragmentOpATI_t op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod, );
	void (*ColorMask) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, );
	void (*ColorMaskIndexedEXT) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, );
	void (*ColorMaski) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, );
	void (*ColorMaskiEXT) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, );
	void (*ColorMaskiOES) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, );
	void (*ColorMaterial) (GL_MaterialFace_t face, GL_ColorMaterialParameter_t mode, );
	void (*ColorP3ui) (GL_ColorPointerType_t type, GLuint color, );
	void (*ColorP3uiv) (GL_ColorPointerType_t type, GLuint *color, );
	void (*ColorP4ui) (GL_ColorPointerType_t type, GLuint color, );
	void (*ColorP4uiv) (GL_ColorPointerType_t type, GLuint *color, );
	void (*ColorPointer) (GLint size, GL_ColorPointerType_t type, GLsizei stride, pointer, );
	void (*ColorPointerEXT) (GLint size, GL_ColorPointerType_t type, GLsizei stride, GLsizei count, pointer, );
	void (*ColorPointerListIBM) (GLint size, GL_ColorPointerType_t type, GLint stride, pointer, GLint ptrstride, );
	void (*ColorPointervINTEL) (GLint size, GL_VertexPointerType_t type, pointer, );
	void (*ColorSubTable) (GL_ColorTableTarget_t target, GLsizei start, GLsizei count, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ColorSubTableEXT) (GL_ColorTableTarget_t target, GLsizei start, GLsizei count, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*ColorTable) (GL_ColorTableTarget_t target, GL_InternalFormat_t internalformat, GLsizei width, GL_PixelFormat_t format, GL_PixelType_t type, table, );
	void (*ColorTableEXT) (GL_ColorTableTarget_t target, GL_InternalFormat_t internalFormat, GLsizei width, GL_PixelFormat_t format, GL_PixelType_t type, table, );
	void (*ColorTableParameterfv) (GL_ColorTableTarget_t target, GL_ColorTableParameterPNameSGI_t pname, GLfloat *params, );
	void (*ColorTableParameterfvSGI) (GL_ColorTableTargetSGI_t target, GL_ColorTableParameterPNameSGI_t pname, GLfloat *params, );
	void (*ColorTableParameteriv) (GL_ColorTableTarget_t target, GL_ColorTableParameterPNameSGI_t pname, GLint *params, );
	void (*ColorTableParameterivSGI) (GL_ColorTableTargetSGI_t target, GL_ColorTableParameterPNameSGI_t pname, GLint *params, );
	void (*ColorTableSGI) (GL_ColorTableTargetSGI_t target, GL_InternalFormat_t internalformat, GLsizei width, GL_PixelFormat_t format, GL_PixelType_t type, table, );
	void (*CombinerInputNV) (GL_CombinerStageNV_t stage, GL_CombinerPortionNV_t portion, GL_CombinerVariableNV_t variable, GL_CombinerRegisterNV_t input, GL_CombinerMappingNV_t mapping, GL_CombinerComponentUsageNV_t componentUsage, );
	void (*CombinerOutputNV) (GL_CombinerStageNV_t stage, GL_CombinerPortionNV_t portion, GL_CombinerRegisterNV_t abOutput, GL_CombinerRegisterNV_t cdOutput, GL_CombinerRegisterNV_t sumOutput, GL_CombinerScaleNV_t scale, GL_CombinerBiasNV_t bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum, );
	void (*CombinerParameterfNV) (GL_CombinerParameterNV_t pname, GLfloat param, );
	void (*CombinerParameterfvNV) (GL_CombinerParameterNV_t pname, GLfloat *params, );
	void (*CombinerParameteriNV) (GL_CombinerParameterNV_t pname, GLint param, );
	void (*CombinerParameterivNV) (GL_CombinerParameterNV_t pname, GLint *params, );
	void (*CombinerStageParameterfvNV) (GL_CombinerStageNV_t stage, GL_CombinerParameterNV_t pname, GLfloat *params, );
	void (*CommandListSegmentsNV) (GLuint list, GLuint segments, );
	void (*CompileCommandListNV) (GLuint list, );
	void (*CompileShader) (GLuint shader, );
	void (*CompileShaderARB) (GLhandleARB shaderObj, );
	void (*CompileShaderIncludeARB) (GLuint shader, GLsizei count, GLchar *const*path, GLint *length, );
	void (*CompressedMultiTexImage1DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLint border, GLsizei imageSize, bits, );
	void (*CompressedMultiTexImage2DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, bits, );
	void (*CompressedMultiTexImage3DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, bits, );
	void (*CompressedMultiTexSubImage1DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint xoffset, GLsizei width, GL_InternalFormat_t format, GLsizei imageSize, bits, );
	void (*CompressedMultiTexSubImage2DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL_InternalFormat_t format, GLsizei imageSize, bits, );
	void (*CompressedMultiTexSubImage3DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_InternalFormat_t format, GLsizei imageSize, bits, );
	void (*CompressedTexImage1D) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLint border, GLsizei imageSize, data, );
	void (*CompressedTexImage1DARB) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLint border, GLsizei imageSize, data, );
	void (*CompressedTexImage2D) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, data, );
	void (*CompressedTexImage2DARB) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, data, );
	void (*CompressedTexImage3D) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, data, );
	void (*CompressedTexImage3DARB) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, data, );
	void (*CompressedTexImage3DOES) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, data, );
	void (*CompressedTexSubImage1D) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLsizei width, GL_InternalFormat_t format, GLsizei imageSize, data, );
	void (*CompressedTexSubImage1DARB) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLsizei width, GL_InternalFormat_t format, GLsizei imageSize, data, );
	void (*CompressedTexSubImage2D) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL_InternalFormat_t format, GLsizei imageSize, data, );
	void (*CompressedTexSubImage2DARB) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL_InternalFormat_t format, GLsizei imageSize, data, );
	void (*CompressedTexSubImage3D) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_InternalFormat_t format, GLsizei imageSize, data, );
	void (*CompressedTexSubImage3DARB) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_InternalFormat_t format, GLsizei imageSize, data, );
	void (*CompressedTexSubImage3DOES) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_InternalFormat_t format, GLsizei imageSize, data, );
	void (*CompressedTextureImage1DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLint border, GLsizei imageSize, bits, );
	void (*CompressedTextureImage2DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, bits, );
	void (*CompressedTextureImage3DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, bits, );
	void (*CompressedTextureSubImage1D) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GL_InternalFormat_t format, GLsizei imageSize, data, );
	void (*CompressedTextureSubImage1DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint xoffset, GLsizei width, GL_InternalFormat_t format, GLsizei imageSize, bits, );
	void (*CompressedTextureSubImage2D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL_InternalFormat_t format, GLsizei imageSize, data, );
	void (*CompressedTextureSubImage2DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL_InternalFormat_t format, GLsizei imageSize, bits, );
	void (*CompressedTextureSubImage3D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_InternalFormat_t format, GLsizei imageSize, data, );
	void (*CompressedTextureSubImage3DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_InternalFormat_t format, GLsizei imageSize, bits, );
	void (*ConservativeRasterParameterfNV) (GLenum pname, GLfloat value, );
	void (*ConservativeRasterParameteriNV) (GLenum pname, GLint param, );
	void (*ConvolutionFilter1D) (GL_ConvolutionTarget_t target, GL_InternalFormat_t internalformat, GLsizei width, GL_PixelFormat_t format, GL_PixelType_t type, image, );
	void (*ConvolutionFilter1DEXT) (GL_ConvolutionTargetEXT_t target, GL_InternalFormat_t internalformat, GLsizei width, GL_PixelFormat_t format, GL_PixelType_t type, image, );
	void (*ConvolutionFilter2D) (GL_ConvolutionTarget_t target, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, image, );
	void (*ConvolutionFilter2DEXT) (GL_ConvolutionTargetEXT_t target, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, image, );
	void (*ConvolutionParameterf) (GL_ConvolutionTarget_t target, GL_ConvolutionParameterEXT_t pname, GLfloat params, );
	void (*ConvolutionParameterfEXT) (GL_ConvolutionTargetEXT_t target, GL_ConvolutionParameterEXT_t pname, GLfloat params, );
	void (*ConvolutionParameterfv) (GL_ConvolutionTarget_t target, GL_ConvolutionParameterEXT_t pname, GLfloat *params, );
	void (*ConvolutionParameterfvEXT) (GL_ConvolutionTargetEXT_t target, GL_ConvolutionParameterEXT_t pname, GLfloat *params, );
	void (*ConvolutionParameteri) (GL_ConvolutionTarget_t target, GL_ConvolutionParameterEXT_t pname, GLint params, );
	void (*ConvolutionParameteriEXT) (GL_ConvolutionTargetEXT_t target, GL_ConvolutionParameterEXT_t pname, GLint params, );
	void (*ConvolutionParameteriv) (GL_ConvolutionTarget_t target, GL_ConvolutionParameterEXT_t pname, GLint *params, );
	void (*ConvolutionParameterivEXT) (GL_ConvolutionTargetEXT_t target, GL_ConvolutionParameterEXT_t pname, GLint *params, );
	void (*ConvolutionParameterxOES) (GL_ConvolutionTargetEXT_t target, GL_ConvolutionParameterEXT_t pname, GLfixed param, );
	void (*ConvolutionParameterxvOES) (GL_ConvolutionTargetEXT_t target, GL_ConvolutionParameterEXT_t pname, GLfixed *params, );
	void (*CopyBufferSubData) (GL_CopyBufferSubDataTarget_t readTarget, GL_CopyBufferSubDataTarget_t writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, );
	void (*CopyBufferSubDataNV) (GL_CopyBufferSubDataTarget_t readTarget, GL_CopyBufferSubDataTarget_t writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, );
	void (*CopyColorSubTable) (GL_ColorTableTarget_t target, GLsizei start, GLint x, GLint y, GLsizei width, );
	void (*CopyColorSubTableEXT) (GL_ColorTableTarget_t target, GLsizei start, GLint x, GLint y, GLsizei width, );
	void (*CopyColorTable) (GL_ColorTableTarget_t target, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, );
	void (*CopyColorTableSGI) (GL_ColorTableTargetSGI_t target, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, );
	void (*CopyConvolutionFilter1D) (GL_ConvolutionTarget_t target, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, );
	void (*CopyConvolutionFilter1DEXT) (GL_ConvolutionTargetEXT_t target, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, );
	void (*CopyConvolutionFilter2D) (GL_ConvolutionTarget_t target, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyConvolutionFilter2DEXT) (GL_ConvolutionTargetEXT_t target, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyImageSubData) (GLuint srcName, GL_CopyImageSubDataTarget_t srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GL_CopyImageSubDataTarget_t dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, );
	void (*CopyImageSubDataEXT) (GLuint srcName, GL_CopyBufferSubDataTarget_t srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GL_CopyBufferSubDataTarget_t dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, );
	void (*CopyImageSubDataNV) (GLuint srcName, GL_CopyBufferSubDataTarget_t srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GL_CopyBufferSubDataTarget_t dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth, );
	void (*CopyImageSubDataOES) (GLuint srcName, GL_CopyBufferSubDataTarget_t srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GL_CopyBufferSubDataTarget_t dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, );
	void (*CopyMultiTexImage1DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, GLint border, );
	void (*CopyMultiTexImage2DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, );
	void (*CopyMultiTexSubImage1DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, );
	void (*CopyMultiTexSubImage2DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyMultiTexSubImage3DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyNamedBufferSubData) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, );
	void (*CopyPathNV) (GLuint resultPath, GLuint srcPath, );
	void (*CopyPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GL_PixelCopyType_t type, );
	void (*CopyTexImage1D) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, GLint border, );
	void (*CopyTexImage1DEXT) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, GLint border, );
	void (*CopyTexImage2D) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, );
	void (*CopyTexImage2DEXT) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, );
	void (*CopyTexSubImage1D) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, );
	void (*CopyTexSubImage1DEXT) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, );
	void (*CopyTexSubImage2D) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyTexSubImage2DEXT) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyTexSubImage3D) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyTexSubImage3DEXT) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyTexSubImage3DOES) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyTextureImage1DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, GLint border, );
	void (*CopyTextureImage2DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, );
	void (*CopyTextureLevelsAPPLE) (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount, );
	void (*CopyTextureSubImage1D) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, );
	void (*CopyTextureSubImage1DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, );
	void (*CopyTextureSubImage2D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyTextureSubImage2DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyTextureSubImage3D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CopyTextureSubImage3DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*CoverFillPathInstancedNV) (GLsizei numPaths, GL_PathElementType_t pathNameType, paths, GLuint pathBase, GL_PathCoverMode_t coverMode, GL_PathTransformType_t transformType, GLfloat *transformValues, );
	void (*CoverFillPathNV) (GLuint path, GL_PathCoverMode_t coverMode, );
	void (*CoverStrokePathInstancedNV) (GLsizei numPaths, GL_PathElementType_t pathNameType, paths, GLuint pathBase, GL_PathCoverMode_t coverMode, GL_PathTransformType_t transformType, GLfloat *transformValues, );
	void (*CoverStrokePathNV) (GLuint path, GL_PathCoverMode_t coverMode, );
	void (*CoverageMaskNV) (GLboolean mask, );
	void (*CoverageModulationNV) (GLenum components, );
	void (*CoverageModulationTableNV) (GLsizei n, GLfloat *v, );
	void (*CoverageOperationNV) (GLenum operation, );
	void (*CreateBuffers) (GLsizei n, GLuint *buffers, );
	void (*CreateCommandListsNV) (GLsizei n, GLuint *lists, );
	void (*CreateFramebuffers) (GLsizei n, GLuint *framebuffers, );
	void (*CreateMemoryObjectsEXT) (GLsizei n, GLuint *memoryObjects, );
	void (*CreatePerfQueryINTEL) (GLuint queryId, GLuint *queryHandle, );
	GLuint (*CreateProgram) ();
	GLhandleARB (*CreateProgramObjectARB) ();
	void (*CreateProgramPipelines) (GLsizei n, GLuint *pipelines, );
	GLuint (*CreateProgressFenceNVX) ();
	void (*CreateQueries) (GL_QueryTarget_t target, GLsizei n, GLuint *ids, );
	void (*CreateRenderbuffers) (GLsizei n, GLuint *renderbuffers, );
	void (*CreateSamplers) (GLsizei n, GLuint *samplers, );
	void (*CreateSemaphoresNV) (GLsizei n, GLuint *semaphores, );
	GLuint (*CreateShader) (GL_ShaderType_t type, );
	GLhandleARB (*CreateShaderObjectARB) (GL_ShaderType_t shaderType, );
	GLuint (*CreateShaderProgramEXT) (GL_ShaderType_t type, GLchar *string, );
	GLuint (*CreateShaderProgramv) (GL_ShaderType_t type, GLsizei count, GLchar *const*strings, );
	GLuint (*CreateShaderProgramvEXT) (GL_ShaderType_t type, GLsizei count, GLchar **strings, );
	void (*CreateStatesNV) (GLsizei n, GLuint *states, );
	GLsync (*CreateSyncFromCLeventARB) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags, );
	void (*CreateTextures) (GL_TextureTarget_t target, GLsizei n, GLuint *textures, );
	void (*CreateTransformFeedbacks) (GLsizei n, GLuint *ids, );
	void (*CreateVertexArrays) (GLsizei n, GLuint *arrays, );
	void (*CullFace) (GL_CullFaceMode_t mode, );
	void (*CullParameterdvEXT) (GL_CullParameterEXT_t pname, GLdouble *params, );
	void (*CullParameterfvEXT) (GL_CullParameterEXT_t pname, GLfloat *params, );
	void (*CurrentPaletteMatrixARB) (GLint index, );
	void (*CurrentPaletteMatrixOES) (GLuint matrixpaletteindex, );
	void (*DebugMessageCallback) (GLDEBUGPROC callback, userParam, );
	void (*DebugMessageCallbackAMD) (GLDEBUGPROCAMD callback, userParam, );
	void (*DebugMessageCallbackARB) (GLDEBUGPROCARB callback, userParam, );
	void (*DebugMessageCallbackKHR) (GLDEBUGPROCKHR callback, userParam, );
	void (*DebugMessageControl) (GL_DebugSource_t source, GL_DebugType_t type, GL_DebugSeverity_t severity, GLsizei count, GLuint *ids, GLboolean enabled, );
	void (*DebugMessageControlARB) (GL_DebugSource_t source, GL_DebugType_t type, GL_DebugSeverity_t severity, GLsizei count, GLuint *ids, GLboolean enabled, );
	void (*DebugMessageControlKHR) (GL_DebugSource_t source, GL_DebugType_t type, GL_DebugSeverity_t severity, GLsizei count, GLuint *ids, GLboolean enabled, );
	void (*DebugMessageEnableAMD) (GLenum category, GL_DebugSeverity_t severity, GLsizei count, GLuint *ids, GLboolean enabled, );
	void (*DebugMessageInsert) (GL_DebugSource_t source, GL_DebugType_t type, GLuint id, GL_DebugSeverity_t severity, GLsizei length, GLchar *buf, );
	void (*DebugMessageInsertAMD) (GLenum category, GL_DebugSeverity_t severity, GLuint id, GLsizei length, GLchar *buf, );
	void (*DebugMessageInsertARB) (GL_DebugSource_t source, GL_DebugType_t type, GLuint id, GL_DebugSeverity_t severity, GLsizei length, GLchar *buf, );
	void (*DebugMessageInsertKHR) (GL_DebugSource_t source, GL_DebugType_t type, GLuint id, GL_DebugSeverity_t severity, GLsizei length, GLchar *buf, );
	void (*DeformSGIX) (GLbitfield mask, );
	void (*DeformationMap3dSGIX) (GL_FfdTargetSGIX_t target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble *points, );
	void (*DeformationMap3fSGIX) (GL_FfdTargetSGIX_t target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat *points, );
	void (*DeleteAsyncMarkersSGIX) (GLuint marker, GLsizei range, );
	void (*DeleteBuffers) (GLsizei n, GLuint *buffers, );
	void (*DeleteBuffersARB) (GLsizei n, GLuint *buffers, );
	void (*DeleteCommandListsNV) (GLsizei n, GLuint *lists, );
	void (*DeleteFencesAPPLE) (GLsizei n, GLuint *fences, );
	void (*DeleteFencesNV) (GLsizei n, GLuint *fences, );
	void (*DeleteFragmentShaderATI) (GLuint id, );
	void (*DeleteFramebuffers) (GLsizei n, GLuint *framebuffers, );
	void (*DeleteFramebuffersEXT) (GLsizei n, GLuint *framebuffers, );
	void (*DeleteFramebuffersOES) (GLsizei n, GLuint *framebuffers, );
	void (*DeleteLists) (GLuint list, GLsizei range, );
	void (*DeleteMemoryObjectsEXT) (GLsizei n, GLuint *memoryObjects, );
	void (*DeleteNamedStringARB) (GLint namelen, GLchar *name, );
	void (*DeleteNamesAMD) (GLenum identifier, GLuint num, GLuint *names, );
	void (*DeleteObjectARB) (GLhandleARB obj, );
	void (*DeleteOcclusionQueriesNV) (GLsizei n, GLuint *ids, );
	void (*DeletePathsNV) (GLuint path, GLsizei range, );
	void (*DeletePerfMonitorsAMD) (GLsizei n, GLuint *monitors, );
	void (*DeletePerfQueryINTEL) (GLuint queryHandle, );
	void (*DeleteProgram) (GLuint program, );
	void (*DeleteProgramPipelines) (GLsizei n, GLuint *pipelines, );
	void (*DeleteProgramPipelinesEXT) (GLsizei n, GLuint *pipelines, );
	void (*DeleteProgramsARB) (GLsizei n, GLuint *programs, );
	void (*DeleteProgramsNV) (GLsizei n, GLuint *programs, );
	void (*DeleteQueries) (GLsizei n, GLuint *ids, );
	void (*DeleteQueriesARB) (GLsizei n, GLuint *ids, );
	void (*DeleteQueriesEXT) (GLsizei n, GLuint *ids, );
	void (*DeleteQueryResourceTagNV) (GLsizei n, GLint *tagIds, );
	void (*DeleteRenderbuffers) (GLsizei n, GLuint *renderbuffers, );
	void (*DeleteRenderbuffersEXT) (GLsizei n, GLuint *renderbuffers, );
	void (*DeleteRenderbuffersOES) (GLsizei n, GLuint *renderbuffers, );
	void (*DeleteSamplers) (GLsizei count, GLuint *samplers, );
	void (*DeleteSemaphoresEXT) (GLsizei n, GLuint *semaphores, );
	void (*DeleteShader) (GLuint shader, );
	void (*DeleteStatesNV) (GLsizei n, GLuint *states, );
	void (*DeleteSync) (GLsync sync, );
	void (*DeleteSyncAPPLE) (GLsync sync, );
	void (*DeleteTextures) (GLsizei n, GLuint *textures, );
	void (*DeleteTexturesEXT) (GLsizei n, GLuint *textures, );
	void (*DeleteTransformFeedbacks) (GLsizei n, GLuint *ids, );
	void (*DeleteTransformFeedbacksNV) (GLsizei n, GLuint *ids, );
	void (*DeleteVertexArrays) (GLsizei n, GLuint *arrays, );
	void (*DeleteVertexArraysAPPLE) (GLsizei n, GLuint *arrays, );
	void (*DeleteVertexArraysOES) (GLsizei n, GLuint *arrays, );
	void (*DeleteVertexShaderEXT) (GLuint id, );
	void (*DepthBoundsEXT) (GLclampd zmin, GLclampd zmax, );
	void (*DepthBoundsdNV) (GLdouble zmin, GLdouble zmax, );
	void (*DepthFunc) (GL_DepthFunction_t func, );
	void (*DepthMask) (GLboolean flag, );
	void (*DepthRange) (GLdouble n, GLdouble f, );
	void (*DepthRangeArraydvNV) (GLuint first, GLsizei count, GLdouble *v, );
	void (*DepthRangeArrayfvNV) (GLuint first, GLsizei count, GLfloat *v, );
	void (*DepthRangeArrayfvOES) (GLuint first, GLsizei count, GLfloat *v, );
	void (*DepthRangeArrayv) (GLuint first, GLsizei count, GLdouble *v, );
	void (*DepthRangeIndexed) (GLuint index, GLdouble n, GLdouble f, );
	void (*DepthRangeIndexeddNV) (GLuint index, GLdouble n, GLdouble f, );
	void (*DepthRangeIndexedfNV) (GLuint index, GLfloat n, GLfloat f, );
	void (*DepthRangeIndexedfOES) (GLuint index, GLfloat n, GLfloat f, );
	void (*DepthRangedNV) (GLdouble zNear, GLdouble zFar, );
	void (*DepthRangef) (GLfloat n, GLfloat f, );
	void (*DepthRangefOES) (GLclampf n, GLclampf f, );
	void (*DepthRangex) (GLfixed n, GLfixed f, );
	void (*DepthRangexOES) (GLfixed n, GLfixed f, );
	void (*DetachObjectARB) (GLhandleARB containerObj, GLhandleARB attachedObj, );
	void (*DetachShader) (GLuint program, GLuint shader, );
	void (*DetailTexFuncSGIS) (GL_TextureTarget_t target, GLsizei n, GLfloat *points, );
	void (*Disable) (GL_EnableCap_t cap, );
	void (*DisableClientState) (GL_EnableCap_t array, );
	void (*DisableClientStateIndexedEXT) (GL_EnableCap_t array, GLuint index, );
	void (*DisableClientStateiEXT) (GL_EnableCap_t array, GLuint index, );
	void (*DisableDriverControlQCOM) (GLuint driverControl, );
	void (*DisableIndexedEXT) (GL_EnableCap_t target, GLuint index, );
	void (*DisableVariantClientStateEXT) (GLuint id, );
	void (*DisableVertexArrayAttrib) (GLuint vaobj, GLuint index, );
	void (*DisableVertexArrayAttribEXT) (GLuint vaobj, GLuint index, );
	void (*DisableVertexArrayEXT) (GLuint vaobj, GL_EnableCap_t array, );
	void (*DisableVertexAttribAPPLE) (GLuint index, GLenum pname, );
	void (*DisableVertexAttribArray) (GLuint index, );
	void (*DisableVertexAttribArrayARB) (GLuint index, );
	void (*Disablei) (GL_EnableCap_t target, GLuint index, );
	void (*DisableiEXT) (GL_EnableCap_t target, GLuint index, );
	void (*DisableiNV) (GL_EnableCap_t target, GLuint index, );
	void (*DisableiOES) (GL_EnableCap_t target, GLuint index, );
	void (*DiscardFramebufferEXT) (GL_FramebufferTarget_t target, GLsizei numAttachments, GL_InvalidateFramebufferAttachment_t *attachments, );
	void (*DispatchCompute) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, );
	void (*DispatchComputeGroupSizeARB) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z, );
	void (*DispatchComputeIndirect) (GLintptr indirect, );
	void (*DrawArrays) (GL_PrimitiveType_t mode, GLint first, GLsizei count, );
	void (*DrawArraysEXT) (GL_PrimitiveType_t mode, GLint first, GLsizei count, );
	void (*DrawArraysIndirect) (GL_PrimitiveType_t mode, indirect, );
	void (*DrawArraysInstanced) (GL_PrimitiveType_t mode, GLint first, GLsizei count, GLsizei instancecount, );
	void (*DrawArraysInstancedANGLE) (GL_PrimitiveType_t mode, GLint first, GLsizei count, GLsizei primcount, );
	void (*DrawArraysInstancedARB) (GL_PrimitiveType_t mode, GLint first, GLsizei count, GLsizei primcount, );
	void (*DrawArraysInstancedBaseInstance) (GL_PrimitiveType_t mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, );
	void (*DrawArraysInstancedBaseInstanceEXT) (GL_PrimitiveType_t mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, );
	void (*DrawArraysInstancedEXT) (GL_PrimitiveType_t mode, GLint start, GLsizei count, GLsizei primcount, );
	void (*DrawArraysInstancedNV) (GL_PrimitiveType_t mode, GLint first, GLsizei count, GLsizei primcount, );
	void (*DrawBuffer) (GL_DrawBufferMode_t buf, );
	void (*DrawBuffers) (GLsizei n, GL_DrawBufferMode_t *bufs, );
	void (*DrawBuffersARB) (GLsizei n, GL_DrawBufferMode_t *bufs, );
	void (*DrawBuffersATI) (GLsizei n, GL_DrawBufferMode_t *bufs, );
	void (*DrawBuffersEXT) (GLsizei n, GLenum *bufs, );
	void (*DrawBuffersIndexedEXT) (GLint n, GLenum *location, GLint *indices, );
	void (*DrawBuffersNV) (GLsizei n, GLenum *bufs, );
	void (*DrawCommandsAddressNV) (GLenum primitiveMode, GLuint64 *indirects, GLsizei *sizes, GLuint count, );
	void (*DrawCommandsNV) (GLenum primitiveMode, GLuint buffer, GLintptr *indirects, GLsizei *sizes, GLuint count, );
	void (*DrawCommandsStatesAddressNV) (GLuint64 *indirects, GLsizei *sizes, GLuint *states, GLuint *fbos, GLuint count, );
	void (*DrawCommandsStatesNV) (GLuint buffer, GLintptr *indirects, GLsizei *sizes, GLuint *states, GLuint *fbos, GLuint count, );
	void (*DrawElementArrayAPPLE) (GL_PrimitiveType_t mode, GLint first, GLsizei count, );
	void (*DrawElementArrayATI) (GL_PrimitiveType_t mode, GLsizei count, );
	void (*DrawElements) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, );
	void (*DrawElementsBaseVertex) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLint basevertex, );
	void (*DrawElementsBaseVertexEXT) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLint basevertex, );
	void (*DrawElementsBaseVertexOES) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLint basevertex, );
	void (*DrawElementsIndirect) (GL_PrimitiveType_t mode, GL_DrawElementsType_t type, indirect, );
	void (*DrawElementsInstanced) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLsizei instancecount, );
	void (*DrawElementsInstancedANGLE) (GL_PrimitiveType_t mode, GLsizei count, GL_PrimitiveType_t type, indices, GLsizei primcount, );
	void (*DrawElementsInstancedARB) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLsizei primcount, );
	void (*DrawElementsInstancedBaseInstance) (GL_PrimitiveType_t mode, GLsizei count, GL_PrimitiveType_t type, indices, GLsizei instancecount, GLuint baseinstance, );
	void (*DrawElementsInstancedBaseInstanceEXT) (GL_PrimitiveType_t mode, GLsizei count, GL_PrimitiveType_t type, indices, GLsizei instancecount, GLuint baseinstance, );
	void (*DrawElementsInstancedBaseVertex) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLsizei instancecount, GLint basevertex, );
	void (*DrawElementsInstancedBaseVertexBaseInstance) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, );
	void (*DrawElementsInstancedBaseVertexBaseInstanceEXT) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, );
	void (*DrawElementsInstancedBaseVertexEXT) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLsizei instancecount, GLint basevertex, );
	void (*DrawElementsInstancedBaseVertexOES) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLsizei instancecount, GLint basevertex, );
	void (*DrawElementsInstancedEXT) (GL_PrimitiveType_t mode, GLsizei count, GL_DrawElementsType_t type, indices, GLsizei primcount, );
	void (*DrawElementsInstancedNV) (GL_PrimitiveType_t mode, GLsizei count, GL_PrimitiveType_t type, indices, GLsizei primcount, );
	void (*DrawMeshArraysSUN) (GL_PrimitiveType_t mode, GLint first, GLsizei count, GLsizei width, );
	void (*DrawMeshTasksNV) (GLuint first, GLuint count, );
	void (*DrawMeshTasksIndirectNV) (GLintptr indirect, );
	void (*DrawPixels) (GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*DrawRangeElementArrayAPPLE) (GL_PrimitiveType_t mode, GLuint start, GLuint end, GLint first, GLsizei count, );
	void (*DrawRangeElementArrayATI) (GL_PrimitiveType_t mode, GLuint start, GLuint end, GLsizei count, );
	void (*DrawRangeElements) (GL_PrimitiveType_t mode, GLuint start, GLuint end, GLsizei count, GL_DrawElementsType_t type, indices, );
	void (*DrawRangeElementsBaseVertex) (GL_PrimitiveType_t mode, GLuint start, GLuint end, GLsizei count, GL_DrawElementsType_t type, indices, GLint basevertex, );
	void (*DrawRangeElementsBaseVertexEXT) (GL_PrimitiveType_t mode, GLuint start, GLuint end, GLsizei count, GL_DrawElementsType_t type, indices, GLint basevertex, );
	void (*DrawRangeElementsBaseVertexOES) (GL_PrimitiveType_t mode, GLuint start, GLuint end, GLsizei count, GL_DrawElementsType_t type, indices, GLint basevertex, );
	void (*DrawRangeElementsEXT) (GL_PrimitiveType_t mode, GLuint start, GLuint end, GLsizei count, GL_DrawElementsType_t type, indices, );
	void (*DrawTexfOES) (GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height, );
	void (*DrawTexfvOES) (GLfloat *coords, );
	void (*DrawTexiOES) (GLint x, GLint y, GLint z, GLint width, GLint height, );
	void (*DrawTexivOES) (GLint *coords, );
	void (*DrawTexsOES) (GLshort x, GLshort y, GLshort z, GLshort width, GLshort height, );
	void (*DrawTexsvOES) (GLshort *coords, );
	void (*DrawTextureNV) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1, );
	void (*DrawTexxOES) (GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height, );
	void (*DrawTexxvOES) (GLfixed *coords, );
	void (*DrawTransformFeedback) (GL_PrimitiveType_t mode, GLuint id, );
	void (*DrawTransformFeedbackEXT) (GL_PrimitiveType_t mode, GLuint id, );
	void (*DrawTransformFeedbackInstanced) (GL_PrimitiveType_t mode, GLuint id, GLsizei instancecount, );
	void (*DrawTransformFeedbackInstancedEXT) (GL_PrimitiveType_t mode, GLuint id, GLsizei instancecount, );
	void (*DrawTransformFeedbackNV) (GL_PrimitiveType_t mode, GLuint id, );
	void (*DrawTransformFeedbackStream) (GL_PrimitiveType_t mode, GLuint id, GLuint stream, );
	void (*DrawTransformFeedbackStreamInstanced) (GL_PrimitiveType_t mode, GLuint id, GLuint stream, GLsizei instancecount, );
	void (*EGLImageTargetRenderbufferStorageOES) (GLenum target, GLeglImageOES image, );
	void (*EGLImageTargetTexStorageEXT) (GLenum target, GLeglImageOES image, GLint* attrib_list, );
	void (*EGLImageTargetTexture2DOES) (GLenum target, GLeglImageOES image, );
	void (*EGLImageTargetTextureStorageEXT) (GLuint texture, GLeglImageOES image, GLint* attrib_list, );
	void (*EdgeFlag) (GLboolean flag, );
	void (*EdgeFlagFormatNV) (GLsizei stride, );
	void (*EdgeFlagPointer) (GLsizei stride, pointer, );
	void (*EdgeFlagPointerEXT) (GLsizei stride, GLsizei count, GLboolean *pointer, );
	void (*EdgeFlagPointerListIBM) (GLint stride, GLboolean **pointer, GLint ptrstride, );
	void (*EdgeFlagv) (GLboolean *flag, );
	void (*ElementPointerAPPLE) (GL_ElementPointerTypeATI_t type, pointer, );
	void (*ElementPointerATI) (GL_ElementPointerTypeATI_t type, pointer, );
	void (*Enable) (GL_EnableCap_t cap, );
	void (*EnableClientState) (GL_EnableCap_t array, );
	void (*EnableClientStateIndexedEXT) (GL_EnableCap_t array, GLuint index, );
	void (*EnableClientStateiEXT) (GL_EnableCap_t array, GLuint index, );
	void (*EnableDriverControlQCOM) (GLuint driverControl, );
	void (*EnableIndexedEXT) (GL_EnableCap_t target, GLuint index, );
	void (*EnableVariantClientStateEXT) (GLuint id, );
	void (*EnableVertexArrayAttrib) (GLuint vaobj, GLuint index, );
	void (*EnableVertexArrayAttribEXT) (GLuint vaobj, GLuint index, );
	void (*EnableVertexArrayEXT) (GLuint vaobj, GL_EnableCap_t array, );
	void (*EnableVertexAttribAPPLE) (GLuint index, GLenum pname, );
	void (*EnableVertexAttribArray) (GLuint index, );
	void (*EnableVertexAttribArrayARB) (GLuint index, );
	void (*Enablei) (GL_EnableCap_t target, GLuint index, );
	void (*EnableiEXT) (GL_EnableCap_t target, GLuint index, );
	void (*EnableiNV) (GL_EnableCap_t target, GLuint index, );
	void (*EnableiOES) (GL_EnableCap_t target, GLuint index, );
	void (*End) ();
	void (*EndConditionalRender) ();
	void (*EndConditionalRenderNV) ();
	void (*EndConditionalRenderNVX) ();
	void (*EndFragmentShaderATI) ();
	void (*EndList) ();
	void (*EndOcclusionQueryNV) ();
	void (*EndPerfMonitorAMD) (GLuint monitor, );
	void (*EndPerfQueryINTEL) (GLuint queryHandle, );
	void (*EndQuery) (GL_QueryTarget_t target, );
	void (*EndQueryARB) (GL_QueryTarget_t target, );
	void (*EndQueryEXT) (GL_QueryTarget_t target, );
	void (*EndQueryIndexed) (GL_QueryTarget_t target, GLuint index, );
	void (*EndTilingQCOM) (GLbitfield preserveMask, );
	void (*EndTransformFeedback) ();
	void (*EndTransformFeedbackEXT) ();
	void (*EndTransformFeedbackNV) ();
	void (*EndVertexShaderEXT) ();
	void (*EndVideoCaptureNV) (GLuint video_capture_slot, );
	void (*EvalCoord1d) (GLdouble u, );
	void (*EvalCoord1dv) (GLdouble *u, );
	void (*EvalCoord1f) (GLfloat u, );
	void (*EvalCoord1fv) (GLfloat *u, );
	void (*EvalCoord1xOES) (GLfixed u, );
	void (*EvalCoord1xvOES) (GLfixed *coords, );
	void (*EvalCoord2d) (GLdouble u, GLdouble v, );
	void (*EvalCoord2dv) (GLdouble *u, );
	void (*EvalCoord2f) (GLfloat u, GLfloat v, );
	void (*EvalCoord2fv) (GLfloat *u, );
	void (*EvalCoord2xOES) (GLfixed u, GLfixed v, );
	void (*EvalCoord2xvOES) (GLfixed *coords, );
	void (*EvalMapsNV) (GL_EvalTargetNV_t target, GL_EvalMapsModeNV_t mode, );
	void (*EvalMesh1) (GL_MeshMode1_t mode, GLint i1, GLint i2, );
	void (*EvalMesh2) (GL_MeshMode2_t mode, GLint i1, GLint i2, GLint j1, GLint j2, );
	void (*EvalPoint1) (GLint i, );
	void (*EvalPoint2) (GLint i, GLint j, );
	void (*EvaluateDepthValuesARB) ();
	void (*ExecuteProgramNV) (GL_VertexAttribEnumNV_t target, GLuint id, GLfloat *params, );
	void (*ExtGetBufferPointervQCOM) (GLenum target, params, );
	void (*ExtGetBuffersQCOM) (GLuint *buffers, GLint maxBuffers, GLint *numBuffers, );
	void (*ExtGetFramebuffersQCOM) (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers, );
	void (*ExtGetProgramBinarySourceQCOM) (GLuint program, GL_ShaderType_t shadertype, GLchar *source, GLint *length, );
	void (*ExtGetProgramsQCOM) (GLuint *programs, GLint maxPrograms, GLint *numPrograms, );
	void (*ExtGetRenderbuffersQCOM) (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers, );
	void (*ExtGetShadersQCOM) (GLuint *shaders, GLint maxShaders, GLint *numShaders, );
	void (*ExtGetTexLevelParameterivQCOM) (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params, );
	void (*ExtGetTexSubImageQCOM) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_PixelFormat_t format, GL_PixelType_t type, texels, );
	void (*ExtGetTexturesQCOM) (GLuint *textures, GLint maxTextures, GLint *numTextures, );
	GLboolean (*ExtIsProgramBinaryQCOM) (GLuint program, );
	void (*ExtTexObjectStateOverrideiQCOM) (GLenum target, GLenum pname, GLint param, );
	void (*ExtractComponentEXT) (GLuint res, GLuint src, GLuint num, );
	void (*FeedbackBuffer) (GLsizei size, GL_FeedbackType_t type, GLfloat *buffer, );
	void (*FeedbackBufferxOES) (GLsizei n, GLenum type, GLfixed *buffer, );
	GLsync (*FenceSync) (GL_SyncCondition_t condition, GLbitfield flags, );
	GLsync (*FenceSyncAPPLE) (GL_SyncCondition_t condition, GLbitfield flags, );
	void (*FinalCombinerInputNV) (GL_CombinerVariableNV_t variable, GL_CombinerRegisterNV_t input, GL_CombinerMappingNV_t mapping, GL_CombinerComponentUsageNV_t componentUsage, );
	void (*Finish) ();
	GLint (*FinishAsyncSGIX) (GLuint *markerp, );
	void (*FinishFenceAPPLE) (GLuint fence, );
	void (*FinishFenceNV) (GLuint fence, );
	void (*FinishObjectAPPLE) (GL_ObjectTypeAPPLE_t object, GLint name, );
	void (*FinishTextureSUNX) ();
	void (*Flush) ();
	void (*FlushMappedBufferRange) (GL_BufferTargetARB_t target, GLintptr offset, GLsizeiptr length, );
	void (*FlushMappedBufferRangeAPPLE) (GL_BufferTargetARB_t target, GLintptr offset, GLsizeiptr size, );
	void (*FlushMappedBufferRangeEXT) (GL_BufferTargetARB_t target, GLintptr offset, GLsizeiptr length, );
	void (*FlushMappedNamedBufferRange) (GLuint buffer, GLintptr offset, GLsizeiptr length, );
	void (*FlushMappedNamedBufferRangeEXT) (GLuint buffer, GLintptr offset, GLsizeiptr length, );
	void (*FlushPixelDataRangeNV) (GL_PixelDataRangeTargetNV_t target, );
	void (*FlushRasterSGIX) ();
	void (*FlushStaticDataIBM) (GLenum target, );
	void (*FlushVertexArrayRangeAPPLE) (GLsizei length, pointer, );
	void (*FlushVertexArrayRangeNV) ();
	void (*FogCoordFormatNV) (GLenum type, GLsizei stride, );
	void (*FogCoordPointer) (GL_FogPointerTypeEXT_t type, GLsizei stride, pointer, );
	void (*FogCoordPointerEXT) (GL_FogPointerTypeEXT_t type, GLsizei stride, pointer, );
	void (*FogCoordPointerListIBM) (GL_FogPointerTypeIBM_t type, GLint stride, pointer, GLint ptrstride, );
	void (*FogCoordd) (GLdouble coord, );
	void (*FogCoorddEXT) (GLdouble coord, );
	void (*FogCoorddv) (GLdouble *coord, );
	void (*FogCoorddvEXT) (GLdouble *coord, );
	void (*FogCoordf) (GLfloat coord, );
	void (*FogCoordfEXT) (GLfloat coord, );
	void (*FogCoordfv) (GLfloat *coord, );
	void (*FogCoordfvEXT) (GLfloat *coord, );
	void (*FogCoordhNV) (GLhalfNV fog, );
	void (*FogCoordhvNV) (GLhalfNV *fog, );
	void (*FogFuncSGIS) (GLsizei n, GLfloat *points, );
	void (*Fogf) (GL_FogParameter_t pname, GLfloat param, );
	void (*Fogfv) (GL_FogParameter_t pname, GLfloat *params, );
	void (*Fogi) (GL_FogParameter_t pname, GLint param, );
	void (*Fogiv) (GL_FogParameter_t pname, GLint *params, );
	void (*Fogx) (GL_FogPName_t pname, GLfixed param, );
	void (*FogxOES) (GL_FogPName_t pname, GLfixed param, );
	void (*Fogxv) (GL_FogPName_t pname, GLfixed *param, );
	void (*FogxvOES) (GL_FogPName_t pname, GLfixed *param, );
	void (*FragmentColorMaterialSGIX) (GL_MaterialFace_t face, GL_MaterialParameter_t mode, );
	void (*FragmentCoverageColorNV) (GLuint color, );
	void (*FragmentLightModelfSGIX) (GL_FragmentLightModelParameterSGIX_t pname, GLfloat param, );
	void (*FragmentLightModelfvSGIX) (GL_FragmentLightModelParameterSGIX_t pname, GLfloat *params, );
	void (*FragmentLightModeliSGIX) (GL_FragmentLightModelParameterSGIX_t pname, GLint param, );
	void (*FragmentLightModelivSGIX) (GL_FragmentLightModelParameterSGIX_t pname, GLint *params, );
	void (*FragmentLightfSGIX) (GL_FragmentLightNameSGIX_t light, GL_FragmentLightParameterSGIX_t pname, GLfloat param, );
	void (*FragmentLightfvSGIX) (GL_FragmentLightNameSGIX_t light, GL_FragmentLightParameterSGIX_t pname, GLfloat *params, );
	void (*FragmentLightiSGIX) (GL_FragmentLightNameSGIX_t light, GL_FragmentLightParameterSGIX_t pname, GLint param, );
	void (*FragmentLightivSGIX) (GL_FragmentLightNameSGIX_t light, GL_FragmentLightParameterSGIX_t pname, GLint *params, );
	void (*FragmentMaterialfSGIX) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfloat param, );
	void (*FragmentMaterialfvSGIX) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfloat *params, );
	void (*FragmentMaterialiSGIX) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLint param, );
	void (*FragmentMaterialivSGIX) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLint *params, );
	void (*FrameTerminatorGREMEDY) ();
	void (*FrameZoomSGIX) (GLint factor, );
	void (*FramebufferDrawBufferEXT) (GLuint framebuffer, GL_DrawBufferMode_t mode, );
	void (*FramebufferDrawBuffersEXT) (GLuint framebuffer, GLsizei n, GL_DrawBufferMode_t *bufs, );
	void (*FramebufferFetchBarrierEXT) ();
	void (*FramebufferFetchBarrierQCOM) ();
	void (*FramebufferFoveationConfigQCOM) (GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint *providedFeatures, );
	void (*FramebufferFoveationParametersQCOM) (GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea, );
	void (*FramebufferParameteri) (GL_FramebufferTarget_t target, GL_FramebufferParameterName_t pname, GLint param, );
	void (*FramebufferPixelLocalStorageSizeEXT) (GLuint target, GLsizei size, );
	void (*FramebufferReadBufferEXT) (GLuint framebuffer, GL_ReadBufferMode_t mode, );
	void (*FramebufferRenderbuffer) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_RenderbufferTarget_t renderbuffertarget, GLuint renderbuffer, );
	void (*FramebufferRenderbufferEXT) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_RenderbufferTarget_t renderbuffertarget, GLuint renderbuffer, );
	void (*FramebufferRenderbufferOES) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_RenderbufferTarget_t renderbuffertarget, GLuint renderbuffer, );
	void (*FramebufferSampleLocationsfvARB) (GL_FramebufferTarget_t target, GLuint start, GLsizei count, GLfloat *v, );
	void (*FramebufferSampleLocationsfvNV) (GL_FramebufferTarget_t target, GLuint start, GLsizei count, GLfloat *v, );
	void (*FramebufferSamplePositionsfvAMD) (GL_FramebufferTarget_t target, GLuint numsamples, GLuint pixelindex, GLfloat *values, );
	void (*FramebufferTexture) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, );
	void (*FramebufferTexture1D) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, );
	void (*FramebufferTexture1DEXT) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, );
	void (*FramebufferTexture2D) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, );
	void (*FramebufferTexture2DEXT) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, );
	void (*FramebufferTexture2DDownsampleIMG) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, GLint xscale, GLint yscale, );
	void (*FramebufferTexture2DMultisampleEXT) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, GLsizei samples, );
	void (*FramebufferTexture2DMultisampleIMG) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, GLsizei samples, );
	void (*FramebufferTexture2DOES) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, );
	void (*FramebufferTexture3D) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, GLint zoffset, );
	void (*FramebufferTexture3DEXT) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, GLint zoffset, );
	void (*FramebufferTexture3DOES) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, GLint zoffset, );
	void (*FramebufferTextureARB) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, );
	void (*FramebufferTextureEXT) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, );
	void (*FramebufferTextureFaceARB) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GL_TextureTarget_t face, );
	void (*FramebufferTextureFaceEXT) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GL_TextureTarget_t face, );
	void (*FramebufferTextureLayer) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GLint layer, );
	void (*FramebufferTextureLayerARB) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GLint layer, );
	void (*FramebufferTextureLayerEXT) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GLint layer, );
	void (*FramebufferTextureLayerDownsampleIMG) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale, );
	void (*FramebufferTextureMultisampleMultiviewOVR) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews, );
	void (*FramebufferTextureMultiviewOVR) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews, );
	void (*FramebufferTextureOES) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, );
	void (*FreeObjectBufferATI) (GLuint buffer, );
	void (*FrontFace) (GL_FrontFaceDirection_t mode, );
	void (*Frustum) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, );
	void (*Frustumf) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, );
	void (*FrustumfOES) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, );
	void (*Frustumx) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, );
	void (*FrustumxOES) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, );
	GLuint (*GenAsyncMarkersSGIX) (GLsizei range, );
	void (*GenBuffers) (GLsizei n, GLuint *buffers, );
	void (*GenBuffersARB) (GLsizei n, GLuint *buffers, );
	void (*GenFencesAPPLE) (GLsizei n, GLuint *fences, );
	void (*GenFencesNV) (GLsizei n, GLuint *fences, );
	GLuint (*GenFragmentShadersATI) (GLuint range, );
	void (*GenFramebuffers) (GLsizei n, GLuint *framebuffers, );
	void (*GenFramebuffersEXT) (GLsizei n, GLuint *framebuffers, );
	void (*GenFramebuffersOES) (GLsizei n, GLuint *framebuffers, );
	GLuint (*GenLists) (GLsizei range, );
	void (*GenNamesAMD) (GLenum identifier, GLuint num, GLuint *names, );
	void (*GenOcclusionQueriesNV) (GLsizei n, GLuint *ids, );
	GLuint (*GenPathsNV) (GLsizei range, );
	void (*GenPerfMonitorsAMD) (GLsizei n, GLuint *monitors, );
	void (*GenProgramPipelines) (GLsizei n, GLuint *pipelines, );
	void (*GenProgramPipelinesEXT) (GLsizei n, GLuint *pipelines, );
	void (*GenProgramsARB) (GLsizei n, GLuint *programs, );
	void (*GenProgramsNV) (GLsizei n, GLuint *programs, );
	void (*GenQueries) (GLsizei n, GLuint *ids, );
	void (*GenQueriesARB) (GLsizei n, GLuint *ids, );
	void (*GenQueriesEXT) (GLsizei n, GLuint *ids, );
	void (*GenQueryResourceTagNV) (GLsizei n, GLint *tagIds, );
	void (*GenRenderbuffers) (GLsizei n, GLuint *renderbuffers, );
	void (*GenRenderbuffersEXT) (GLsizei n, GLuint *renderbuffers, );
	void (*GenRenderbuffersOES) (GLsizei n, GLuint *renderbuffers, );
	void (*GenSamplers) (GLsizei count, GLuint *samplers, );
	void (*GenSemaphoresEXT) (GLsizei n, GLuint *semaphores, );
	GLuint (*GenSymbolsEXT) (GL_DataTypeEXT_t datatype, GL_VertexShaderStorageTypeEXT_t storagetype, GL_ParameterRangeEXT_t range, GLuint components, );
	void (*GenTextures) (GLsizei n, GLuint *textures, );
	void (*GenTexturesEXT) (GLsizei n, GLuint *textures, );
	void (*GenTransformFeedbacks) (GLsizei n, GLuint *ids, );
	void (*GenTransformFeedbacksNV) (GLsizei n, GLuint *ids, );
	void (*GenVertexArrays) (GLsizei n, GLuint *arrays, );
	void (*GenVertexArraysAPPLE) (GLsizei n, GLuint *arrays, );
	void (*GenVertexArraysOES) (GLsizei n, GLuint *arrays, );
	GLuint (*GenVertexShadersEXT) (GLuint range, );
	void (*GenerateMipmap) (GL_TextureTarget_t target, );
	void (*GenerateMipmapEXT) (GL_TextureTarget_t target, );
	void (*GenerateMipmapOES) (GL_TextureTarget_t target, );
	void (*GenerateMultiTexMipmapEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, );
	void (*GenerateTextureMipmap) (GLuint texture, );
	void (*GenerateTextureMipmapEXT) (GLuint texture, GL_TextureTarget_t target, );
	void (*GetActiveAtomicCounterBufferiv) (GLuint program, GLuint bufferIndex, GL_AtomicCounterBufferPName_t pname, GLint *params, );
	void (*GetActiveAttrib) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GL_AttributeType_t *type, GLchar *name, );
	void (*GetActiveAttribARB) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GL_AttributeType_t *type, GLcharARB *name, );
	void (*GetActiveSubroutineName) (GLuint program, GL_ShaderType_t shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, );
	void (*GetActiveSubroutineUniformName) (GLuint program, GL_ShaderType_t shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, );
	void (*GetActiveSubroutineUniformiv) (GLuint program, GL_ShaderType_t shadertype, GLuint index, GL_SubroutineParameterName_t pname, GLint *values, );
	void (*GetActiveUniform) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GL_UniformType_t *type, GLchar *name, );
	void (*GetActiveUniformARB) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GL_UniformType_t *type, GLcharARB *name, );
	void (*GetActiveUniformBlockName) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, );
	void (*GetActiveUniformBlockiv) (GLuint program, GLuint uniformBlockIndex, GL_UniformBlockPName_t pname, GLint *params, );
	void (*GetActiveUniformName) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName, );
	void (*GetActiveUniformsiv) (GLuint program, GLsizei uniformCount, GLuint *uniformIndices, GL_UniformPName_t pname, GLint *params, );
	void (*GetActiveVaryingNV) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, );
	void (*GetArrayObjectfvATI) (GL_EnableCap_t array, GL_ArrayObjectPNameATI_t pname, GLfloat *params, );
	void (*GetArrayObjectivATI) (GL_EnableCap_t array, GL_ArrayObjectPNameATI_t pname, GLint *params, );
	void (*GetAttachedObjectsARB) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj, );
	void (*GetAttachedShaders) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, );
	GLint (*GetAttribLocation) (GLuint program, GLchar *name, );
	GLint (*GetAttribLocationARB) (GLhandleARB programObj, GLcharARB *name, );
	void (*GetBooleanIndexedvEXT) (GL_BufferTargetARB_t target, GLuint index, GLboolean *data, );
	void (*GetBooleani_v) (GL_BufferTargetARB_t target, GLuint index, GLboolean *data, );
	void (*GetBooleanv) (GL_GetPName_t pname, GLboolean *data, );
	void (*GetBufferParameteri64v) (GL_BufferTargetARB_t target, GL_BufferPNameARB_t pname, GLint64 *params, );
	void (*GetBufferParameteriv) (GL_BufferTargetARB_t target, GL_BufferPNameARB_t pname, GLint *params, );
	void (*GetBufferParameterivARB) (GL_BufferTargetARB_t target, GL_BufferPNameARB_t pname, GLint *params, );
	void (*GetBufferParameterui64vNV) (GL_BufferTargetARB_t target, GLenum pname, GLuint64EXT *params, );
	void (*GetBufferPointerv) (GL_BufferTargetARB_t target, GL_BufferPointerNameARB_t pname, params, );
	void (*GetBufferPointervARB) (GL_BufferTargetARB_t target, GL_BufferPointerNameARB_t pname, params, );
	void (*GetBufferPointervOES) (GL_BufferTargetARB_t target, GL_BufferPointerNameARB_t pname, params, );
	void (*GetBufferSubData) (GL_BufferTargetARB_t target, GLintptr offset, GLsizeiptr size, data, );
	void (*GetBufferSubDataARB) (GL_BufferTargetARB_t target, GLintptrARB offset, GLsizeiptrARB size, data, );
	void (*GetClipPlane) (GL_ClipPlaneName_t plane, GLdouble *equation, );
	void (*GetClipPlanef) (GL_ClipPlaneName_t plane, GLfloat *equation, );
	void (*GetClipPlanefOES) (GL_ClipPlaneName_t plane, GLfloat *equation, );
	void (*GetClipPlanex) (GL_ClipPlaneName_t plane, GLfixed *equation, );
	void (*GetClipPlanexOES) (GL_ClipPlaneName_t plane, GLfixed *equation, );
	void (*GetColorTable) (GL_ColorTableTarget_t target, GL_PixelFormat_t format, GL_PixelType_t type, table, );
	void (*GetColorTableEXT) (GL_ColorTableTarget_t target, GL_PixelFormat_t format, GL_PixelType_t type, data, );
	void (*GetColorTableParameterfv) (GL_ColorTableTarget_t target, GL_GetColorTableParameterPNameSGI_t pname, GLfloat *params, );
	void (*GetColorTableParameterfvEXT) (GL_ColorTableTarget_t target, GL_GetColorTableParameterPNameSGI_t pname, GLfloat *params, );
	void (*GetColorTableParameterfvSGI) (GL_ColorTableTargetSGI_t target, GL_GetColorTableParameterPNameSGI_t pname, GLfloat *params, );
	void (*GetColorTableParameteriv) (GL_ColorTableTarget_t target, GL_GetColorTableParameterPNameSGI_t pname, GLint *params, );
	void (*GetColorTableParameterivEXT) (GL_ColorTableTarget_t target, GL_GetColorTableParameterPNameSGI_t pname, GLint *params, );
	void (*GetColorTableParameterivSGI) (GL_ColorTableTargetSGI_t target, GL_GetColorTableParameterPNameSGI_t pname, GLint *params, );
	void (*GetColorTableSGI) (GL_ColorTableTargetSGI_t target, GL_PixelFormat_t format, GL_PixelType_t type, table, );
	void (*GetCombinerInputParameterfvNV) (GL_CombinerStageNV_t stage, GL_CombinerPortionNV_t portion, GL_CombinerVariableNV_t variable, GL_CombinerParameterNV_t pname, GLfloat *params, );
	void (*GetCombinerInputParameterivNV) (GL_CombinerStageNV_t stage, GL_CombinerPortionNV_t portion, GL_CombinerVariableNV_t variable, GL_CombinerParameterNV_t pname, GLint *params, );
	void (*GetCombinerOutputParameterfvNV) (GL_CombinerStageNV_t stage, GL_CombinerPortionNV_t portion, GL_CombinerParameterNV_t pname, GLfloat *params, );
	void (*GetCombinerOutputParameterivNV) (GL_CombinerStageNV_t stage, GL_CombinerPortionNV_t portion, GL_CombinerParameterNV_t pname, GLint *params, );
	void (*GetCombinerStageParameterfvNV) (GL_CombinerStageNV_t stage, GL_CombinerParameterNV_t pname, GLfloat *params, );
	GLuint (*GetCommandHeaderNV) (GLenum tokenID, GLuint size, );
	void (*GetCompressedMultiTexImageEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint lod, img, );
	void (*GetCompressedTexImage) (GL_TextureTarget_t target, GLint level, img, );
	void (*GetCompressedTexImageARB) (GL_TextureTarget_t target, GLint level, img, );
	void (*GetCompressedTextureImage) (GLuint texture, GLint level, GLsizei bufSize, pixels, );
	void (*GetCompressedTextureImageEXT) (GLuint texture, GL_TextureTarget_t target, GLint lod, img, );
	void (*GetCompressedTextureSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, pixels, );
	void (*GetConvolutionFilter) (GL_ConvolutionTarget_t target, GL_PixelFormat_t format, GL_PixelType_t type, image, );
	void (*GetConvolutionFilterEXT) (GL_ConvolutionTargetEXT_t target, GL_PixelFormat_t format, GL_PixelType_t type, image, );
	void (*GetConvolutionParameterfv) (GL_ConvolutionTarget_t target, GL_ConvolutionParameterEXT_t pname, GLfloat *params, );
	void (*GetConvolutionParameterfvEXT) (GL_ConvolutionTargetEXT_t target, GL_ConvolutionParameterEXT_t pname, GLfloat *params, );
	void (*GetConvolutionParameteriv) (GL_ConvolutionTarget_t target, GL_ConvolutionParameterEXT_t pname, GLint *params, );
	void (*GetConvolutionParameterivEXT) (GL_ConvolutionTargetEXT_t target, GL_ConvolutionParameterEXT_t pname, GLint *params, );
	void (*GetConvolutionParameterxvOES) (GLenum target, GLenum pname, GLfixed *params, );
	void (*GetCoverageModulationTableNV) (GLsizei bufSize, GLfloat *v, );
	GLuint (*GetDebugMessageLog) (GLuint count, GLsizei bufSize, GL_DebugSource_t *sources, GL_DebugType_t *types, GLuint *ids, GL_DebugSeverity_t *severities, GLsizei *lengths, GLchar *messageLog, );
	GLuint (*GetDebugMessageLogAMD) (GLuint count, GLsizei bufSize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message, );
	GLuint (*GetDebugMessageLogARB) (GLuint count, GLsizei bufSize, GL_DebugSource_t *sources, GL_DebugType_t *types, GLuint *ids, GL_DebugSeverity_t *severities, GLsizei *lengths, GLchar *messageLog, );
	GLuint (*GetDebugMessageLogKHR) (GLuint count, GLsizei bufSize, GL_DebugSource_t *sources, GL_DebugType_t *types, GLuint *ids, GL_DebugSeverity_t *severities, GLsizei *lengths, GLchar *messageLog, );
	void (*GetDetailTexFuncSGIS) (GL_TextureTarget_t target, GLfloat *points, );
	void (*GetDoubleIndexedvEXT) (GL_GetPName_t target, GLuint index, GLdouble *data, );
	void (*GetDoublei_v) (GL_GetPName_t target, GLuint index, GLdouble *data, );
	void (*GetDoublei_vEXT) (GL_GetPName_t pname, GLuint index, GLdouble *params, );
	void (*GetDoublev) (GL_GetPName_t pname, GLdouble *data, );
	void (*GetDriverControlStringQCOM) (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString, );
	void (*GetDriverControlsQCOM) (GLint *num, GLsizei size, GLuint *driverControls, );
	GLenum (*GetError) ();
	void (*GetFenceivNV) (GLuint fence, GL_FenceParameterNameNV_t pname, GLint *params, );
	void (*GetFinalCombinerInputParameterfvNV) (GL_CombinerVariableNV_t variable, GL_CombinerParameterNV_t pname, GLfloat *params, );
	void (*GetFinalCombinerInputParameterivNV) (GL_CombinerVariableNV_t variable, GL_CombinerParameterNV_t pname, GLint *params, );
	void (*GetFirstPerfQueryIdINTEL) (GLuint *queryId, );
	void (*GetFixedv) (GL_GetPName_t pname, GLfixed *params, );
	void (*GetFixedvOES) (GL_GetPName_t pname, GLfixed *params, );
	void (*GetFloatIndexedvEXT) (GL_GetPName_t target, GLuint index, GLfloat *data, );
	void (*GetFloati_v) (GL_GetPName_t target, GLuint index, GLfloat *data, );
	void (*GetFloati_vEXT) (GL_GetPName_t pname, GLuint index, GLfloat *params, );
	void (*GetFloati_vNV) (GL_GetPName_t target, GLuint index, GLfloat *data, );
	void (*GetFloati_vOES) (GL_GetPName_t target, GLuint index, GLfloat *data, );
	void (*GetFloatv) (GL_GetPName_t pname, GLfloat *data, );
	void (*GetFogFuncSGIS) (GLfloat *points, );
	GLint (*GetFragDataIndex) (GLuint program, GLchar *name, );
	GLint (*GetFragDataIndexEXT) (GLuint program, GLchar *name, );
	GLint (*GetFragDataLocation) (GLuint program, GLchar *name, );
	GLint (*GetFragDataLocationEXT) (GLuint program, GLchar *name, );
	void (*GetFragmentLightfvSGIX) (GL_FragmentLightNameSGIX_t light, GL_FragmentLightParameterSGIX_t pname, GLfloat *params, );
	void (*GetFragmentLightivSGIX) (GL_FragmentLightNameSGIX_t light, GL_FragmentLightParameterSGIX_t pname, GLint *params, );
	void (*GetFragmentMaterialfvSGIX) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfloat *params, );
	void (*GetFragmentMaterialivSGIX) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLint *params, );
	void (*GetFramebufferAttachmentParameteriv) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_FramebufferAttachmentParameterName_t pname, GLint *params, );
	void (*GetFramebufferAttachmentParameterivEXT) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_FramebufferAttachmentParameterName_t pname, GLint *params, );
	void (*GetFramebufferAttachmentParameterivOES) (GL_FramebufferTarget_t target, GL_FramebufferAttachment_t attachment, GL_FramebufferAttachmentParameterName_t pname, GLint *params, );
	void (*GetFramebufferParameterfvAMD) (GL_FramebufferTarget_t target, GL_FramebufferAttachmentParameterName_t pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values, );
	void (*GetFramebufferParameteriv) (GL_FramebufferTarget_t target, GL_FramebufferAttachmentParameterName_t pname, GLint *params, );
	void (*GetFramebufferParameterivEXT) (GLuint framebuffer, GL_GetFramebufferParameter_t pname, GLint *params, );
	GLsizei (*GetFramebufferPixelLocalStorageSizeEXT) (GLuint target, );
	GLenum (*GetGraphicsResetStatus) ();
	GLenum (*GetGraphicsResetStatusARB) ();
	GLenum (*GetGraphicsResetStatusEXT) ();
	GLenum (*GetGraphicsResetStatusKHR) ();
	GLhandleARB (*GetHandleARB) (GLenum pname, );
	void (*GetHistogram) (GL_HistogramTargetEXT_t target, GLboolean reset, GL_PixelFormat_t format, GL_PixelType_t type, values, );
	void (*GetHistogramEXT) (GL_HistogramTargetEXT_t target, GLboolean reset, GL_PixelFormat_t format, GL_PixelType_t type, values, );
	void (*GetHistogramParameterfv) (GL_HistogramTargetEXT_t target, GL_GetHistogramParameterPNameEXT_t pname, GLfloat *params, );
	void (*GetHistogramParameterfvEXT) (GL_HistogramTargetEXT_t target, GL_GetHistogramParameterPNameEXT_t pname, GLfloat *params, );
	void (*GetHistogramParameteriv) (GL_HistogramTargetEXT_t target, GL_GetHistogramParameterPNameEXT_t pname, GLint *params, );
	void (*GetHistogramParameterivEXT) (GL_HistogramTargetEXT_t target, GL_GetHistogramParameterPNameEXT_t pname, GLint *params, );
	void (*GetHistogramParameterxvOES) (GL_HistogramTargetEXT_t target, GL_GetHistogramParameterPNameEXT_t pname, GLfixed *params, );
	GLuint64 (*GetImageHandleARB) (GLuint texture, GLint level, GLboolean layered, GLint layer, GL_PixelFormat_t format, );
	GLuint64 (*GetImageHandleNV) (GLuint texture, GLint level, GLboolean layered, GLint layer, GL_PixelFormat_t format, );
	void (*GetImageTransformParameterfvHP) (GL_ImageTransformTargetHP_t target, GL_ImageTransformPNameHP_t pname, GLfloat *params, );
	void (*GetImageTransformParameterivHP) (GL_ImageTransformTargetHP_t target, GL_ImageTransformPNameHP_t pname, GLint *params, );
	void (*GetInfoLogARB) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog, );
	GLint (*GetInstrumentsSGIX) ();
	void (*GetInteger64i_v) (GL_GetPName_t target, GLuint index, GLint64 *data, );
	void (*GetInteger64v) (GL_GetPName_t pname, GLint64 *data, );
	void (*GetInteger64vAPPLE) (GL_GetPName_t pname, GLint64 *params, );
	void (*GetInteger64vEXT) (GL_GetPName_t pname, GLint64 *data, );
	void (*GetIntegerIndexedvEXT) (GL_GetPName_t target, GLuint index, GLint *data, );
	void (*GetIntegeri_v) (GL_GetPName_t target, GLuint index, GLint *data, );
	void (*GetIntegeri_vEXT) (GL_GetPName_t target, GLuint index, GLint *data, );
	void (*GetIntegerui64i_vNV) (GLenum value, GLuint index, GLuint64EXT *result, );
	void (*GetIntegerui64vNV) (GLenum value, GLuint64EXT *result, );
	void (*GetIntegerv) (GL_GetPName_t pname, GLint *data, );
	void (*GetInternalformatSampleivNV) (GL_TextureTarget_t target, GL_InternalFormat_t internalformat, GLsizei samples, GL_InternalFormatPName_t pname, GLsizei count, GLint *params, );
	void (*GetInternalformati64v) (GL_TextureTarget_t target, GL_InternalFormat_t internalformat, GL_InternalFormatPName_t pname, GLsizei count, GLint64 *params, );
	void (*GetInternalformativ) (GL_TextureTarget_t target, GL_InternalFormat_t internalformat, GL_InternalFormatPName_t pname, GLsizei count, GLint *params, );
	void (*GetInvariantBooleanvEXT) (GLuint id, GL_GetVariantValueEXT_t value, GLboolean *data, );
	void (*GetInvariantFloatvEXT) (GLuint id, GL_GetVariantValueEXT_t value, GLfloat *data, );
	void (*GetInvariantIntegervEXT) (GLuint id, GL_GetVariantValueEXT_t value, GLint *data, );
	void (*GetLightfv) (GL_LightName_t light, GL_LightParameter_t pname, GLfloat *params, );
	void (*GetLightiv) (GL_LightName_t light, GL_LightParameter_t pname, GLint *params, );
	void (*GetLightxOES) (GL_LightName_t light, GL_LightParameter_t pname, GLfixed *params, );
	void (*GetLightxv) (GL_LightName_t light, GL_LightParameter_t pname, GLfixed *params, );
	void (*GetLightxvOES) (GL_LightName_t light, GL_LightParameter_t pname, GLfixed *params, );
	void (*GetListParameterfvSGIX) (GLuint list, GL_ListParameterName_t pname, GLfloat *params, );
	void (*GetListParameterivSGIX) (GLuint list, GL_ListParameterName_t pname, GLint *params, );
	void (*GetLocalConstantBooleanvEXT) (GLuint id, GL_GetVariantValueEXT_t value, GLboolean *data, );
	void (*GetLocalConstantFloatvEXT) (GLuint id, GL_GetVariantValueEXT_t value, GLfloat *data, );
	void (*GetLocalConstantIntegervEXT) (GLuint id, GL_GetVariantValueEXT_t value, GLint *data, );
	void (*GetMapAttribParameterfvNV) (GL_EvalTargetNV_t target, GLuint index, GL_MapAttribParameterNV_t pname, GLfloat *params, );
	void (*GetMapAttribParameterivNV) (GL_EvalTargetNV_t target, GLuint index, GL_MapAttribParameterNV_t pname, GLint *params, );
	void (*GetMapControlPointsNV) (GL_EvalTargetNV_t target, GLuint index, GL_MapTypeNV_t type, GLsizei ustride, GLsizei vstride, GLboolean packed, points, );
	void (*GetMapParameterfvNV) (GL_EvalTargetNV_t target, GL_MapParameterNV_t pname, GLfloat *params, );
	void (*GetMapParameterivNV) (GL_EvalTargetNV_t target, GL_MapParameterNV_t pname, GLint *params, );
	void (*GetMapdv) (GL_MapTarget_t target, GL_GetMapQuery_t query, GLdouble *v, );
	void (*GetMapfv) (GL_MapTarget_t target, GL_GetMapQuery_t query, GLfloat *v, );
	void (*GetMapiv) (GL_MapTarget_t target, GL_GetMapQuery_t query, GLint *v, );
	void (*GetMapxvOES) (GL_MapTarget_t target, GL_GetMapQuery_t query, GLfixed *v, );
	void (*GetMaterialfv) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfloat *params, );
	void (*GetMaterialiv) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLint *params, );
	void (*GetMaterialxOES) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfixed param, );
	void (*GetMaterialxv) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfixed *params, );
	void (*GetMaterialxvOES) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfixed *params, );
	void (*GetMemoryObjectDetachedResourcesuivNV) (GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params, );
	void (*GetMemoryObjectParameterivEXT) (GLuint memoryObject, GL_MemoryObjectParameterName_t pname, GLint *params, );
	void (*GetMinmax) (GL_MinmaxTargetEXT_t target, GLboolean reset, GL_PixelFormat_t format, GL_PixelType_t type, values, );
	void (*GetMinmaxEXT) (GL_MinmaxTargetEXT_t target, GLboolean reset, GL_PixelFormat_t format, GL_PixelType_t type, values, );
	void (*GetMinmaxParameterfv) (GL_MinmaxTargetEXT_t target, GL_GetMinmaxParameterPNameEXT_t pname, GLfloat *params, );
	void (*GetMinmaxParameterfvEXT) (GL_MinmaxTargetEXT_t target, GL_GetMinmaxParameterPNameEXT_t pname, GLfloat *params, );
	void (*GetMinmaxParameteriv) (GL_MinmaxTargetEXT_t target, GL_GetMinmaxParameterPNameEXT_t pname, GLint *params, );
	void (*GetMinmaxParameterivEXT) (GL_MinmaxTargetEXT_t target, GL_GetMinmaxParameterPNameEXT_t pname, GLint *params, );
	void (*GetMultiTexEnvfvEXT) (GL_TextureUnit_t texunit, GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfloat *params, );
	void (*GetMultiTexEnvivEXT) (GL_TextureUnit_t texunit, GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLint *params, );
	void (*GetMultiTexGendvEXT) (GL_TextureUnit_t texunit, GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLdouble *params, );
	void (*GetMultiTexGenfvEXT) (GL_TextureUnit_t texunit, GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfloat *params, );
	void (*GetMultiTexGenivEXT) (GL_TextureUnit_t texunit, GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLint *params, );
	void (*GetMultiTexImageEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*GetMultiTexLevelParameterfvEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GL_GetTextureParameter_t pname, GLfloat *params, );
	void (*GetMultiTexLevelParameterivEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetMultiTexParameterIivEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetMultiTexParameterIuivEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLuint *params, );
	void (*GetMultiTexParameterfvEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLfloat *params, );
	void (*GetMultiTexParameterivEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetMultisamplefv) (GL_GetMultisamplePNameNV_t pname, GLuint index, GLfloat *val, );
	void (*GetMultisamplefvNV) (GL_GetMultisamplePNameNV_t pname, GLuint index, GLfloat *val, );
	void (*GetNamedBufferParameteri64v) (GLuint buffer, GL_BufferPNameARB_t pname, GLint64 *params, );
	void (*GetNamedBufferParameteriv) (GLuint buffer, GL_BufferPNameARB_t pname, GLint *params, );
	void (*GetNamedBufferParameterivEXT) (GLuint buffer, GL_BufferPNameARB_t pname, GLint *params, );
	void (*GetNamedBufferParameterui64vNV) (GLuint buffer, GL_BufferPNameARB_t pname, GLuint64EXT *params, );
	void (*GetNamedBufferPointerv) (GLuint buffer, GL_BufferPointerNameARB_t pname, params, );
	void (*GetNamedBufferPointervEXT) (GLuint buffer, GL_BufferPointerNameARB_t pname, params, );
	void (*GetNamedBufferSubData) (GLuint buffer, GLintptr offset, GLsizeiptr size, data, );
	void (*GetNamedBufferSubDataEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, data, );
	void (*GetNamedFramebufferParameterfvAMD) (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values, );
	void (*GetNamedFramebufferAttachmentParameteriv) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GL_FramebufferAttachmentParameterName_t pname, GLint *params, );
	void (*GetNamedFramebufferAttachmentParameterivEXT) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GL_FramebufferAttachmentParameterName_t pname, GLint *params, );
	void (*GetNamedFramebufferParameteriv) (GLuint framebuffer, GL_GetFramebufferParameter_t pname, GLint *param, );
	void (*GetNamedFramebufferParameterivEXT) (GLuint framebuffer, GL_GetFramebufferParameter_t pname, GLint *params, );
	void (*GetNamedProgramLocalParameterIivEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLint *params, );
	void (*GetNamedProgramLocalParameterIuivEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLuint *params, );
	void (*GetNamedProgramLocalParameterdvEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLdouble *params, );
	void (*GetNamedProgramLocalParameterfvEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLfloat *params, );
	void (*GetNamedProgramStringEXT) (GLuint program, GL_ProgramTarget_t target, GL_ProgramStringProperty_t pname, string, );
	void (*GetNamedProgramivEXT) (GLuint program, GL_ProgramTarget_t target, GL_ProgramPropertyARB_t pname, GLint *params, );
	void (*GetNamedRenderbufferParameteriv) (GLuint renderbuffer, GL_RenderbufferParameterName_t pname, GLint *params, );
	void (*GetNamedRenderbufferParameterivEXT) (GLuint renderbuffer, GL_RenderbufferParameterName_t pname, GLint *params, );
	void (*GetNamedStringARB) (GLint namelen, GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string, );
	void (*GetNamedStringivARB) (GLint namelen, GLchar *name, GLenum pname, GLint *params, );
	void (*GetNextPerfQueryIdINTEL) (GLuint queryId, GLuint *nextQueryId, );
	void (*GetObjectBufferfvATI) (GLuint buffer, GL_ArrayObjectPNameATI_t pname, GLfloat *params, );
	void (*GetObjectBufferivATI) (GLuint buffer, GL_ArrayObjectPNameATI_t pname, GLint *params, );
	void (*GetObjectLabel) (GL_ObjectIdentifier_t identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, );
	void (*GetObjectLabelEXT) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label, );
	void (*GetObjectLabelKHR) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, );
	void (*GetObjectParameterfvARB) (GLhandleARB obj, GLenum pname, GLfloat *params, );
	void (*GetObjectParameterivAPPLE) (GLenum objectType, GLuint name, GLenum pname, GLint *params, );
	void (*GetObjectParameterivARB) (GLhandleARB obj, GLenum pname, GLint *params, );
	void (*GetObjectPtrLabel) (ptr, GLsizei bufSize, GLsizei *length, GLchar *label, );
	void (*GetObjectPtrLabelKHR) (ptr, GLsizei bufSize, GLsizei *length, GLchar *label, );
	void (*GetOcclusionQueryivNV) (GLuint id, GL_OcclusionQueryParameterNameNV_t pname, GLint *params, );
	void (*GetOcclusionQueryuivNV) (GLuint id, GL_OcclusionQueryParameterNameNV_t pname, GLuint *params, );
	void (*GetPathColorGenfvNV) (GL_PathColor_t color, GL_PathGenMode_t pname, GLfloat *value, );
	void (*GetPathColorGenivNV) (GL_PathColor_t color, GL_PathGenMode_t pname, GLint *value, );
	void (*GetPathCommandsNV) (GLuint path, GLubyte *commands, );
	void (*GetPathCoordsNV) (GLuint path, GLfloat *coords, );
	void (*GetPathDashArrayNV) (GLuint path, GLfloat *dashArray, );
	GLfloat (*GetPathLengthNV) (GLuint path, GLsizei startSegment, GLsizei numSegments, );
	void (*GetPathMetricRangeNV) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics, );
	void (*GetPathMetricsNV) (GLbitfield metricQueryMask, GLsizei numPaths, GL_PathElementType_t pathNameType, paths, GLuint pathBase, GLsizei stride, GLfloat *metrics, );
	void (*GetPathParameterfvNV) (GLuint path, GL_PathParameter_t pname, GLfloat *value, );
	void (*GetPathParameterivNV) (GLuint path, GL_PathParameter_t pname, GLint *value, );
	void (*GetPathSpacingNV) (GL_PathListMode_t pathListMode, GLsizei numPaths, GL_PathElementType_t pathNameType, paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GL_PathTransformType_t transformType, GLfloat *returnedSpacing, );
	void (*GetPathTexGenfvNV) (GL_TextureUnit_t texCoordSet, GL_PathGenMode_t pname, GLfloat *value, );
	void (*GetPathTexGenivNV) (GL_TextureUnit_t texCoordSet, GL_PathGenMode_t pname, GLint *value, );
	void (*GetPerfCounterInfoINTEL) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue, );
	void (*GetPerfMonitorCounterDataAMD) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten, );
	void (*GetPerfMonitorCounterInfoAMD) (GLuint group, GLuint counter, GLenum pname, data, );
	void (*GetPerfMonitorCounterStringAMD) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString, );
	void (*GetPerfMonitorCountersAMD) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters, );
	void (*GetPerfMonitorGroupStringAMD) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString, );
	void (*GetPerfMonitorGroupsAMD) (GLint *numGroups, GLsizei groupsSize, GLuint *groups, );
	void (*GetPerfQueryDataINTEL) (GLuint queryHandle, GLuint flags, GLsizei dataSize, data, GLuint *bytesWritten, );
	void (*GetPerfQueryIdByNameINTEL) (GLchar *queryName, GLuint *queryId, );
	void (*GetPerfQueryInfoINTEL) (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask, );
	void (*GetPixelMapfv) (GL_PixelMap_t map, GLfloat *values, );
	void (*GetPixelMapuiv) (GL_PixelMap_t map, GLuint *values, );
	void (*GetPixelMapusv) (GL_PixelMap_t map, GLushort *values, );
	void (*GetPixelMapxv) (GL_PixelMap_t map, GLint size, GLfixed *values, );
	void (*GetPixelTexGenParameterfvSGIS) (GL_PixelTexGenParameterNameSGIS_t pname, GLfloat *params, );
	void (*GetPixelTexGenParameterivSGIS) (GL_PixelTexGenParameterNameSGIS_t pname, GLint *params, );
	void (*GetPixelTransformParameterfvEXT) (GLenum target, GLenum pname, GLfloat *params, );
	void (*GetPixelTransformParameterivEXT) (GLenum target, GLenum pname, GLint *params, );
	void (*GetPointerIndexedvEXT) (GLenum target, GLuint index, data, );
	void (*GetPointeri_vEXT) (GLenum pname, GLuint index, params, );
	void (*GetPointerv) (GL_GetPointervPName_t pname, params, );
	void (*GetPointervEXT) (GL_GetPointervPName_t pname, params, );
	void (*GetPointervKHR) (GLenum pname, params, );
	void (*GetPolygonStipple) (GLubyte *mask, );
	void (*GetProgramBinary) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, binary, );
	void (*GetProgramBinaryOES) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, binary, );
	void (*GetProgramEnvParameterIivNV) (GL_ProgramTarget_t target, GLuint index, GLint *params, );
	void (*GetProgramEnvParameterIuivNV) (GL_ProgramTarget_t target, GLuint index, GLuint *params, );
	void (*GetProgramEnvParameterdvARB) (GL_ProgramTarget_t target, GLuint index, GLdouble *params, );
	void (*GetProgramEnvParameterfvARB) (GL_ProgramTarget_t target, GLuint index, GLfloat *params, );
	void (*GetProgramInfoLog) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, );
	void (*GetProgramInterfaceiv) (GLuint program, GL_ProgramInterface_t programInterface, GL_ProgramInterfacePName_t pname, GLint *params, );
	void (*GetProgramLocalParameterIivNV) (GL_ProgramTarget_t target, GLuint index, GLint *params, );
	void (*GetProgramLocalParameterIuivNV) (GL_ProgramTarget_t target, GLuint index, GLuint *params, );
	void (*GetProgramLocalParameterdvARB) (GL_ProgramTarget_t target, GLuint index, GLdouble *params, );
	void (*GetProgramLocalParameterfvARB) (GL_ProgramTarget_t target, GLuint index, GLfloat *params, );
	void (*GetProgramNamedParameterdvNV) (GLuint id, GLsizei len, GLubyte *name, GLdouble *params, );
	void (*GetProgramNamedParameterfvNV) (GLuint id, GLsizei len, GLubyte *name, GLfloat *params, );
	void (*GetProgramParameterdvNV) (GL_VertexAttribEnumNV_t target, GLuint index, GL_VertexAttribEnumNV_t pname, GLdouble *params, );
	void (*GetProgramParameterfvNV) (GL_VertexAttribEnumNV_t target, GLuint index, GL_VertexAttribEnumNV_t pname, GLfloat *params, );
	void (*GetProgramPipelineInfoLog) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, );
	void (*GetProgramPipelineInfoLogEXT) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, );
	void (*GetProgramPipelineiv) (GLuint pipeline, GL_PipelineParameterName_t pname, GLint *params, );
	void (*GetProgramPipelineivEXT) (GLuint pipeline, GL_PipelineParameterName_t pname, GLint *params, );
	GLuint (*GetProgramResourceIndex) (GLuint program, GL_ProgramInterface_t programInterface, GLchar *name, );
	GLint (*GetProgramResourceLocation) (GLuint program, GL_ProgramInterface_t programInterface, GLchar *name, );
	GLint (*GetProgramResourceLocationIndex) (GLuint program, GL_ProgramInterface_t programInterface, GLchar *name, );
	GLint (*GetProgramResourceLocationIndexEXT) (GLuint program, GL_ProgramInterface_t programInterface, GLchar *name, );
	void (*GetProgramResourceName) (GLuint program, GL_ProgramInterface_t programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, );
	void (*GetProgramResourcefvNV) (GLuint program, GL_ProgramInterface_t programInterface, GLuint index, GLsizei propCount, GLenum *props, GLsizei count, GLsizei *length, GLfloat *params, );
	void (*GetProgramResourceiv) (GLuint program, GL_ProgramInterface_t programInterface, GLuint index, GLsizei propCount, GL_ProgramResourceProperty_t *props, GLsizei count, GLsizei *length, GLint *params, );
	void (*GetProgramStageiv) (GLuint program, GL_ShaderType_t shadertype, GL_ProgramStagePName_t pname, GLint *values, );
	void (*GetProgramStringARB) (GL_ProgramTarget_t target, GL_ProgramStringProperty_t pname, string, );
	void (*GetProgramStringNV) (GLuint id, GL_VertexAttribEnumNV_t pname, GLubyte *program, );
	void (*GetProgramSubroutineParameteruivNV) (GLenum target, GLuint index, GLuint *param, );
	void (*GetProgramiv) (GLuint program, GL_ProgramPropertyARB_t pname, GLint *params, );
	void (*GetProgramivARB) (GL_ProgramTarget_t target, GL_ProgramPropertyARB_t pname, GLint *params, );
	void (*GetProgramivNV) (GLuint id, GL_VertexAttribEnumNV_t pname, GLint *params, );
	void (*GetQueryBufferObjecti64v) (GLuint id, GLuint buffer, GL_QueryObjectParameterName_t pname, GLintptr offset, );
	void (*GetQueryBufferObjectiv) (GLuint id, GLuint buffer, GL_QueryObjectParameterName_t pname, GLintptr offset, );
	void (*GetQueryBufferObjectui64v) (GLuint id, GLuint buffer, GL_QueryObjectParameterName_t pname, GLintptr offset, );
	void (*GetQueryBufferObjectuiv) (GLuint id, GLuint buffer, GL_QueryObjectParameterName_t pname, GLintptr offset, );
	void (*GetQueryIndexediv) (GL_QueryTarget_t target, GLuint index, GL_QueryParameterName_t pname, GLint *params, );
	void (*GetQueryObjecti64v) (GLuint id, GL_QueryObjectParameterName_t pname, GLint64 *params, );
	void (*GetQueryObjecti64vEXT) (GLuint id, GL_QueryObjectParameterName_t pname, GLint64 *params, );
	void (*GetQueryObjectiv) (GLuint id, GL_QueryObjectParameterName_t pname, GLint *params, );
	void (*GetQueryObjectivARB) (GLuint id, GL_QueryObjectParameterName_t pname, GLint *params, );
	void (*GetQueryObjectivEXT) (GLuint id, GL_QueryObjectParameterName_t pname, GLint *params, );
	void (*GetQueryObjectui64v) (GLuint id, GL_QueryObjectParameterName_t pname, GLuint64 *params, );
	void (*GetQueryObjectui64vEXT) (GLuint id, GL_QueryObjectParameterName_t pname, GLuint64 *params, );
	void (*GetQueryObjectuiv) (GLuint id, GL_QueryObjectParameterName_t pname, GLuint *params, );
	void (*GetQueryObjectuivARB) (GLuint id, GL_QueryObjectParameterName_t pname, GLuint *params, );
	void (*GetQueryObjectuivEXT) (GLuint id, GL_QueryObjectParameterName_t pname, GLuint *params, );
	void (*GetQueryiv) (GL_QueryTarget_t target, GL_QueryParameterName_t pname, GLint *params, );
	void (*GetQueryivARB) (GL_QueryTarget_t target, GL_QueryParameterName_t pname, GLint *params, );
	void (*GetQueryivEXT) (GL_QueryTarget_t target, GL_QueryParameterName_t pname, GLint *params, );
	void (*GetRenderbufferParameteriv) (GL_RenderbufferTarget_t target, GL_RenderbufferParameterName_t pname, GLint *params, );
	void (*GetRenderbufferParameterivEXT) (GL_RenderbufferTarget_t target, GL_RenderbufferParameterName_t pname, GLint *params, );
	void (*GetRenderbufferParameterivOES) (GL_RenderbufferTarget_t target, GL_RenderbufferParameterName_t pname, GLint *params, );
	void (*GetSamplerParameterIiv) (GLuint sampler, GL_SamplerParameterI_t pname, GLint *params, );
	void (*GetSamplerParameterIivEXT) (GLuint sampler, GL_SamplerParameterI_t pname, GLint *params, );
	void (*GetSamplerParameterIivOES) (GLuint sampler, GL_SamplerParameterI_t pname, GLint *params, );
	void (*GetSamplerParameterIuiv) (GLuint sampler, GL_SamplerParameterI_t pname, GLuint *params, );
	void (*GetSamplerParameterIuivEXT) (GLuint sampler, GL_SamplerParameterI_t pname, GLuint *params, );
	void (*GetSamplerParameterIuivOES) (GLuint sampler, GL_SamplerParameterI_t pname, GLuint *params, );
	void (*GetSamplerParameterfv) (GLuint sampler, GL_SamplerParameterF_t pname, GLfloat *params, );
	void (*GetSamplerParameteriv) (GLuint sampler, GL_SamplerParameterI_t pname, GLint *params, );
	void (*GetSemaphoreParameterivNV) (GLuint semaphore, GL_SemaphoreParameterName_t pname, GLint *params, );
	void (*GetSemaphoreParameterui64vEXT) (GLuint semaphore, GL_SemaphoreParameterName_t pname, GLuint64 *params, );
	void (*GetSeparableFilter) (GL_SeparableTargetEXT_t target, GL_PixelFormat_t format, GL_PixelType_t type, row, column, span, );
	void (*GetSeparableFilterEXT) (GL_SeparableTargetEXT_t target, GL_PixelFormat_t format, GL_PixelType_t type, row, column, span, );
	void (*GetShaderInfoLog) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, );
	void (*GetShaderPrecisionFormat) (GL_ShaderType_t shadertype, GL_PrecisionType_t precisiontype, GLint *range, GLint *precision, );
	void (*GetShaderSource) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, );
	void (*GetShaderSourceARB) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source, );
	void (*GetShaderiv) (GLuint shader, GL_ShaderParameterName_t pname, GLint *params, );
	void (*GetShadingRateImagePaletteNV) (GLuint viewport, GLuint entry, GLenum *rate, );
	void (*GetShadingRateSampleLocationivNV) (GLenum rate, GLuint samples, GLuint index, GLint *location, );
	void (*GetSharpenTexFuncSGIS) (GL_TextureTarget_t target, GLfloat *points, );
	GLushort (*GetStageIndexNV) (GL_ShaderType_t shadertype, );
	const GLubyte *(*GetString) (GL_StringName_t name, );
	const GLubyte *(*GetStringi) (GL_StringName_t name, GLuint index, );
	GLuint (*GetSubroutineIndex) (GLuint program, GL_ShaderType_t shadertype, GLchar *name, );
	GLint (*GetSubroutineUniformLocation) (GLuint program, GL_ShaderType_t shadertype, GLchar *name, );
	void (*GetSynciv) (GLsync sync, GL_SyncParameterName_t pname, GLsizei count, GLsizei *length, GLint *values, );
	void (*GetSyncivAPPLE) (GLsync sync, GL_SyncParameterName_t pname, GLsizei count, GLsizei *length, GLint *values, );
	void (*GetTexBumpParameterfvATI) (GL_GetTexBumpParameterATI_t pname, GLfloat *param, );
	void (*GetTexBumpParameterivATI) (GL_GetTexBumpParameterATI_t pname, GLint *param, );
	void (*GetTexEnvfv) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfloat *params, );
	void (*GetTexEnviv) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLint *params, );
	void (*GetTexEnvxv) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfixed *params, );
	void (*GetTexEnvxvOES) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfixed *params, );
	void (*GetTexFilterFuncSGIS) (GL_TextureTarget_t target, GL_TextureFilterSGIS_t filter, GLfloat *weights, );
	void (*GetTexGendv) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLdouble *params, );
	void (*GetTexGenfv) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfloat *params, );
	void (*GetTexGenfvOES) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfloat *params, );
	void (*GetTexGeniv) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLint *params, );
	void (*GetTexGenivOES) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLint *params, );
	void (*GetTexGenxvOES) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfixed *params, );
	void (*GetTexImage) (GL_TextureTarget_t target, GLint level, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*GetTexLevelParameterfv) (GL_TextureTarget_t target, GLint level, GL_GetTextureParameter_t pname, GLfloat *params, );
	void (*GetTexLevelParameteriv) (GL_TextureTarget_t target, GLint level, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetTexLevelParameterxvOES) (GL_TextureTarget_t target, GLint level, GL_GetTextureParameter_t pname, GLfixed *params, );
	void (*GetTexParameterIiv) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetTexParameterIivEXT) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetTexParameterIivOES) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetTexParameterIuiv) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLuint *params, );
	void (*GetTexParameterIuivEXT) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLuint *params, );
	void (*GetTexParameterIuivOES) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLuint *params, );
	void (*GetTexParameterPointervAPPLE) (GLenum target, GLenum pname, params, );
	void (*GetTexParameterfv) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLfloat *params, );
	void (*GetTexParameteriv) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetTexParameterxv) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLfixed *params, );
	void (*GetTexParameterxvOES) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLfixed *params, );
	GLuint64 (*GetTextureHandleARB) (GLuint texture, );
	GLuint64 (*GetTextureHandleIMG) (GLuint texture, );
	GLuint64 (*GetTextureHandleNV) (GLuint texture, );
	void (*GetTextureImage) (GLuint texture, GLint level, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, pixels, );
	void (*GetTextureImageEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*GetTextureLevelParameterfv) (GLuint texture, GLint level, GL_GetTextureParameter_t pname, GLfloat *params, );
	void (*GetTextureLevelParameterfvEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GL_GetTextureParameter_t pname, GLfloat *params, );
	void (*GetTextureLevelParameteriv) (GLuint texture, GLint level, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetTextureLevelParameterivEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetTextureParameterIiv) (GLuint texture, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetTextureParameterIivEXT) (GLuint texture, GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetTextureParameterIuiv) (GLuint texture, GL_GetTextureParameter_t pname, GLuint *params, );
	void (*GetTextureParameterIuivEXT) (GLuint texture, GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLuint *params, );
	void (*GetTextureParameterfv) (GLuint texture, GL_GetTextureParameter_t pname, GLfloat *params, );
	void (*GetTextureParameterfvEXT) (GLuint texture, GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLfloat *params, );
	void (*GetTextureParameteriv) (GLuint texture, GL_GetTextureParameter_t pname, GLint *params, );
	void (*GetTextureParameterivEXT) (GLuint texture, GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLint *params, );
	GLuint64 (*GetTextureSamplerHandleARB) (GLuint texture, GLuint sampler, );
	GLuint64 (*GetTextureSamplerHandleIMG) (GLuint texture, GLuint sampler, );
	GLuint64 (*GetTextureSamplerHandleNV) (GLuint texture, GLuint sampler, );
	void (*GetTextureSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, pixels, );
	void (*GetTrackMatrixivNV) (GL_VertexAttribEnumNV_t target, GLuint address, GL_VertexAttribEnumNV_t pname, GLint *params, );
	void (*GetTransformFeedbackVarying) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GL_AttributeType_t *type, GLchar *name, );
	void (*GetTransformFeedbackVaryingEXT) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GL_AttributeType_t *type, GLchar *name, );
	void (*GetTransformFeedbackVaryingNV) (GLuint program, GLuint index, GLint *location, );
	void (*GetTransformFeedbacki64_v) (GLuint xfb, GL_TransformFeedbackPName_t pname, GLuint index, GLint64 *param, );
	void (*GetTransformFeedbacki_v) (GLuint xfb, GL_TransformFeedbackPName_t pname, GLuint index, GLint *param, );
	void (*GetTransformFeedbackiv) (GLuint xfb, GL_TransformFeedbackPName_t pname, GLint *param, );
	void (*GetTranslatedShaderSourceANGLE) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, );
	GLuint (*GetUniformBlockIndex) (GLuint program, GLchar *uniformBlockName, );
	GLint (*GetUniformBufferSizeEXT) (GLuint program, GLint location, );
	void (*GetUniformIndices) (GLuint program, GLsizei uniformCount, GLchar *const*uniformNames, GLuint *uniformIndices, );
	GLint (*GetUniformLocation) (GLuint program, GLchar *name, );
	GLint (*GetUniformLocationARB) (GLhandleARB programObj, GLcharARB *name, );
	GLintptr (*GetUniformOffsetEXT) (GLuint program, GLint location, );
	void (*GetUniformSubroutineuiv) (GL_ShaderType_t shadertype, GLint location, GLuint *params, );
	void (*GetUniformdv) (GLuint program, GLint location, GLdouble *params, );
	void (*GetUniformfv) (GLuint program, GLint location, GLfloat *params, );
	void (*GetUniformfvARB) (GLhandleARB programObj, GLint location, GLfloat *params, );
	void (*GetUniformi64vARB) (GLuint program, GLint location, GLint64 *params, );
	void (*GetUniformi64vNV) (GLuint program, GLint location, GLint64EXT *params, );
	void (*GetUniformiv) (GLuint program, GLint location, GLint *params, );
	void (*GetUniformivARB) (GLhandleARB programObj, GLint location, GLint *params, );
	void (*GetUniformui64vARB) (GLuint program, GLint location, GLuint64 *params, );
	void (*GetUniformui64vNV) (GLuint program, GLint location, GLuint64EXT *params, );
	void (*GetUniformuiv) (GLuint program, GLint location, GLuint *params, );
	void (*GetUniformuivEXT) (GLuint program, GLint location, GLuint *params, );
	void (*GetUnsignedBytevEXT) (GL_GetPName_t pname, GLubyte *data, );
	void (*GetUnsignedBytei_vEXT) (GLenum target, GLuint index, GLubyte *data, );
	void (*GetVariantArrayObjectfvATI) (GLuint id, GL_ArrayObjectPNameATI_t pname, GLfloat *params, );
	void (*GetVariantArrayObjectivATI) (GLuint id, GL_ArrayObjectPNameATI_t pname, GLint *params, );
	void (*GetVariantBooleanvEXT) (GLuint id, GL_GetVariantValueEXT_t value, GLboolean *data, );
	void (*GetVariantFloatvEXT) (GLuint id, GL_GetVariantValueEXT_t value, GLfloat *data, );
	void (*GetVariantIntegervEXT) (GLuint id, GL_GetVariantValueEXT_t value, GLint *data, );
	void (*GetVariantPointervEXT) (GLuint id, GL_GetVariantValueEXT_t value, data, );
	GLint (*GetVaryingLocationNV) (GLuint program, GLchar *name, );
	void (*GetVertexArrayIndexed64iv) (GLuint vaobj, GLuint index, GL_VertexArrayPName_t pname, GLint64 *param, );
	void (*GetVertexArrayIndexediv) (GLuint vaobj, GLuint index, GL_VertexArrayPName_t pname, GLint *param, );
	void (*GetVertexArrayIntegeri_vEXT) (GLuint vaobj, GLuint index, GL_VertexArrayPName_t pname, GLint *param, );
	void (*GetVertexArrayIntegervEXT) (GLuint vaobj, GL_VertexArrayPName_t pname, GLint *param, );
	void (*GetVertexArrayPointeri_vEXT) (GLuint vaobj, GLuint index, GL_VertexArrayPName_t pname, param, );
	void (*GetVertexArrayPointervEXT) (GLuint vaobj, GL_VertexArrayPName_t pname, param, );
	void (*GetVertexArrayiv) (GLuint vaobj, GL_VertexArrayPName_t pname, GLint *param, );
	void (*GetVertexAttribArrayObjectfvATI) (GLuint index, GL_ArrayObjectPNameATI_t pname, GLfloat *params, );
	void (*GetVertexAttribArrayObjectivATI) (GLuint index, GL_ArrayObjectPNameATI_t pname, GLint *params, );
	void (*GetVertexAttribIiv) (GLuint index, GL_VertexAttribEnum_t pname, GLint *params, );
	void (*GetVertexAttribIivEXT) (GLuint index, GL_VertexAttribEnum_t pname, GLint *params, );
	void (*GetVertexAttribIuiv) (GLuint index, GL_VertexAttribEnum_t pname, GLuint *params, );
	void (*GetVertexAttribIuivEXT) (GLuint index, GL_VertexAttribEnum_t pname, GLuint *params, );
	void (*GetVertexAttribLdv) (GLuint index, GL_VertexAttribEnum_t pname, GLdouble *params, );
	void (*GetVertexAttribLdvEXT) (GLuint index, GL_VertexAttribEnum_t pname, GLdouble *params, );
	void (*GetVertexAttribLi64vNV) (GLuint index, GL_VertexAttribEnum_t pname, GLint64EXT *params, );
	void (*GetVertexAttribLui64vARB) (GLuint index, GL_VertexAttribEnum_t pname, GLuint64EXT *params, );
	void (*GetVertexAttribLui64vNV) (GLuint index, GL_VertexAttribEnum_t pname, GLuint64EXT *params, );
	void (*GetVertexAttribPointerv) (GLuint index, GL_VertexAttribPointerPropertyARB_t pname, pointer, );
	void (*GetVertexAttribPointervARB) (GLuint index, GL_VertexAttribPointerPropertyARB_t pname, pointer, );
	void (*GetVertexAttribPointervNV) (GLuint index, GL_VertexAttribEnumNV_t pname, pointer, );
	void (*GetVertexAttribdv) (GLuint index, GL_VertexAttribPropertyARB_t pname, GLdouble *params, );
	void (*GetVertexAttribdvARB) (GLuint index, GL_VertexAttribPropertyARB_t pname, GLdouble *params, );
	void (*GetVertexAttribdvNV) (GLuint index, GL_VertexAttribEnumNV_t pname, GLdouble *params, );
	void (*GetVertexAttribfv) (GLuint index, GL_VertexAttribPropertyARB_t pname, GLfloat *params, );
	void (*GetVertexAttribfvARB) (GLuint index, GL_VertexAttribPropertyARB_t pname, GLfloat *params, );
	void (*GetVertexAttribfvNV) (GLuint index, GL_VertexAttribEnumNV_t pname, GLfloat *params, );
	void (*GetVertexAttribiv) (GLuint index, GL_VertexAttribPropertyARB_t pname, GLint *params, );
	void (*GetVertexAttribivARB) (GLuint index, GL_VertexAttribPropertyARB_t pname, GLint *params, );
	void (*GetVertexAttribivNV) (GLuint index, GL_VertexAttribEnumNV_t pname, GLint *params, );
	void (*GetVideoCaptureStreamdvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params, );
	void (*GetVideoCaptureStreamfvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params, );
	void (*GetVideoCaptureStreamivNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params, );
	void (*GetVideoCaptureivNV) (GLuint video_capture_slot, GLenum pname, GLint *params, );
	void (*GetVideoi64vNV) (GLuint video_slot, GLenum pname, GLint64EXT *params, );
	void (*GetVideoivNV) (GLuint video_slot, GLenum pname, GLint *params, );
	void (*GetVideoui64vNV) (GLuint video_slot, GLenum pname, GLuint64EXT *params, );
	void (*GetVideouivNV) (GLuint video_slot, GLenum pname, GLuint *params, );
	void (*GetnColorTable) (GL_ColorTableTarget_t target, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, table, );
	void (*GetnColorTableARB) (GL_ColorTableTarget_t target, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, table, );
	void (*GetnCompressedTexImage) (GL_TextureTarget_t target, GLint lod, GLsizei bufSize, pixels, );
	void (*GetnCompressedTexImageARB) (GL_TextureTarget_t target, GLint lod, GLsizei bufSize, img, );
	void (*GetnConvolutionFilter) (GL_ConvolutionTarget_t target, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, image, );
	void (*GetnConvolutionFilterARB) (GL_ConvolutionTarget_t target, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, image, );
	void (*GetnHistogram) (GL_HistogramTarget_t target, GLboolean reset, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, values, );
	void (*GetnHistogramARB) (GL_HistogramTargetEXT_t target, GLboolean reset, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, values, );
	void (*GetnMapdv) (GL_MapTarget_t target, GL_MapQuery_t query, GLsizei bufSize, GLdouble *v, );
	void (*GetnMapdvARB) (GL_MapTarget_t target, GL_MapQuery_t query, GLsizei bufSize, GLdouble *v, );
	void (*GetnMapfv) (GL_MapTarget_t target, GL_MapQuery_t query, GLsizei bufSize, GLfloat *v, );
	void (*GetnMapfvARB) (GL_MapTarget_t target, GL_MapQuery_t query, GLsizei bufSize, GLfloat *v, );
	void (*GetnMapiv) (GL_MapTarget_t target, GL_MapQuery_t query, GLsizei bufSize, GLint *v, );
	void (*GetnMapivARB) (GL_MapTarget_t target, GL_MapQuery_t query, GLsizei bufSize, GLint *v, );
	void (*GetnMinmax) (GL_MinmaxTarget_t target, GLboolean reset, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, values, );
	void (*GetnMinmaxARB) (GL_MinmaxTargetEXT_t target, GLboolean reset, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, values, );
	void (*GetnPixelMapfv) (GL_PixelMap_t map, GLsizei bufSize, GLfloat *values, );
	void (*GetnPixelMapfvARB) (GL_PixelMap_t map, GLsizei bufSize, GLfloat *values, );
	void (*GetnPixelMapuiv) (GL_PixelMap_t map, GLsizei bufSize, GLuint *values, );
	void (*GetnPixelMapuivARB) (GL_PixelMap_t map, GLsizei bufSize, GLuint *values, );
	void (*GetnPixelMapusv) (GL_PixelMap_t map, GLsizei bufSize, GLushort *values, );
	void (*GetnPixelMapusvARB) (GL_PixelMap_t map, GLsizei bufSize, GLushort *values, );
	void (*GetnPolygonStipple) (GLsizei bufSize, GLubyte *pattern, );
	void (*GetnPolygonStippleARB) (GLsizei bufSize, GLubyte *pattern, );
	void (*GetnSeparableFilter) (GL_SeparableTarget_t target, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei rowBufSize, row, GLsizei columnBufSize, column, span, );
	void (*GetnSeparableFilterARB) (GL_SeparableTargetEXT_t target, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei rowBufSize, row, GLsizei columnBufSize, column, span, );
	void (*GetnTexImage) (GL_TextureTarget_t target, GLint level, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, pixels, );
	void (*GetnTexImageARB) (GL_TextureTarget_t target, GLint level, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, img, );
	void (*GetnUniformdv) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params, );
	void (*GetnUniformdvARB) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params, );
	void (*GetnUniformfv) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params, );
	void (*GetnUniformfvARB) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params, );
	void (*GetnUniformfvEXT) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params, );
	void (*GetnUniformfvKHR) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params, );
	void (*GetnUniformi64vARB) (GLuint program, GLint location, GLsizei bufSize, GLint64 *params, );
	void (*GetnUniformiv) (GLuint program, GLint location, GLsizei bufSize, GLint *params, );
	void (*GetnUniformivARB) (GLuint program, GLint location, GLsizei bufSize, GLint *params, );
	void (*GetnUniformivEXT) (GLuint program, GLint location, GLsizei bufSize, GLint *params, );
	void (*GetnUniformivKHR) (GLuint program, GLint location, GLsizei bufSize, GLint *params, );
	void (*GetnUniformui64vARB) (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params, );
	void (*GetnUniformuiv) (GLuint program, GLint location, GLsizei bufSize, GLuint *params, );
	void (*GetnUniformuivARB) (GLuint program, GLint location, GLsizei bufSize, GLuint *params, );
	void (*GetnUniformuivKHR) (GLuint program, GLint location, GLsizei bufSize, GLuint *params, );
	void (*GlobalAlphaFactorbSUN) (GLbyte factor, );
	void (*GlobalAlphaFactordSUN) (GLdouble factor, );
	void (*GlobalAlphaFactorfSUN) (GLfloat factor, );
	void (*GlobalAlphaFactoriSUN) (GLint factor, );
	void (*GlobalAlphaFactorsSUN) (GLshort factor, );
	void (*GlobalAlphaFactorubSUN) (GLubyte factor, );
	void (*GlobalAlphaFactoruiSUN) (GLuint factor, );
	void (*GlobalAlphaFactorusSUN) (GLushort factor, );
	void (*Hint) (GL_HintTarget_t target, GL_HintMode_t mode, );
	void (*HintPGI) (GL_HintTargetPGI_t target, GLint mode, );
	void (*Histogram) (GL_HistogramTargetEXT_t target, GLsizei width, GL_InternalFormat_t internalformat, GLboolean sink, );
	void (*HistogramEXT) (GL_HistogramTargetEXT_t target, GLsizei width, GL_InternalFormat_t internalformat, GLboolean sink, );
	void (*IglooInterfaceSGIX) (GLenum pname, params, );
	void (*ImageTransformParameterfHP) (GL_ImageTransformTargetHP_t target, GL_ImageTransformPNameHP_t pname, GLfloat param, );
	void (*ImageTransformParameterfvHP) (GL_ImageTransformTargetHP_t target, GL_ImageTransformPNameHP_t pname, GLfloat *params, );
	void (*ImageTransformParameteriHP) (GL_ImageTransformTargetHP_t target, GL_ImageTransformPNameHP_t pname, GLint param, );
	void (*ImageTransformParameterivHP) (GL_ImageTransformTargetHP_t target, GL_ImageTransformPNameHP_t pname, GLint *params, );
	void (*ImportMemoryFdEXT) (GLuint memory, GLuint64 size, GL_ExternalHandleType_t handleType, GLint fd, );
	void (*ImportMemoryWin32HandleEXT) (GLuint memory, GLuint64 size, GL_ExternalHandleType_t handleType, handle, );
	void (*ImportMemoryWin32NameEXT) (GLuint memory, GLuint64 size, GL_ExternalHandleType_t handleType, name, );
	void (*ImportSemaphoreFdEXT) (GLuint semaphore, GL_ExternalHandleType_t handleType, GLint fd, );
	void (*ImportSemaphoreWin32HandleEXT) (GLuint semaphore, GL_ExternalHandleType_t handleType, handle, );
	void (*ImportSemaphoreWin32NameEXT) (GLuint semaphore, GL_ExternalHandleType_t handleType, name, );
	GLsync (*ImportSyncEXT) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags, );
	void (*IndexFormatNV) (GLenum type, GLsizei stride, );
	void (*IndexFuncEXT) (GL_IndexFunctionEXT_t func, GLclampf ref, );
	void (*IndexMask) (GLuint mask, );
	void (*IndexMaterialEXT) (GL_MaterialFace_t face, GL_IndexMaterialParameterEXT_t mode, );
	void (*IndexPointer) (GL_IndexPointerType_t type, GLsizei stride, pointer, );
	void (*IndexPointerEXT) (GL_IndexPointerType_t type, GLsizei stride, GLsizei count, pointer, );
	void (*IndexPointerListIBM) (GL_IndexPointerType_t type, GLint stride, pointer, GLint ptrstride, );
	void (*Indexd) (GLdouble c, );
	void (*Indexdv) (GLdouble *c, );
	void (*Indexf) (GLfloat c, );
	void (*Indexfv) (GLfloat *c, );
	void (*Indexi) (GLint c, );
	void (*Indexiv) (GLint *c, );
	void (*Indexs) (GLshort c, );
	void (*Indexsv) (GLshort *c, );
	void (*Indexub) (GLubyte c, );
	void (*Indexubv) (GLubyte *c, );
	void (*IndexxOES) (GLfixed component, );
	void (*IndexxvOES) (GLfixed *component, );
	void (*InitNames) ();
	void (*InsertComponentEXT) (GLuint res, GLuint src, GLuint num, );
	void (*InsertEventMarkerEXT) (GLsizei length, GLchar *marker, );
	void (*InstrumentsBufferSGIX) (GLsizei size, GLint *buffer, );
	void (*InterleavedArrays) (GL_InterleavedArrayFormat_t format, GLsizei stride, pointer, );
	void (*InterpolatePathsNV) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight, );
	void (*InvalidateBufferData) (GLuint buffer, );
	void (*InvalidateBufferSubData) (GLuint buffer, GLintptr offset, GLsizeiptr length, );
	void (*InvalidateFramebuffer) (GL_FramebufferTarget_t target, GLsizei numAttachments, GL_InvalidateFramebufferAttachment_t *attachments, );
	void (*InvalidateNamedFramebufferData) (GLuint framebuffer, GLsizei numAttachments, GL_FramebufferAttachment_t *attachments, );
	void (*InvalidateNamedFramebufferSubData) (GLuint framebuffer, GLsizei numAttachments, GL_FramebufferAttachment_t *attachments, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*InvalidateSubFramebuffer) (GL_FramebufferTarget_t target, GLsizei numAttachments, GL_InvalidateFramebufferAttachment_t *attachments, GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*InvalidateTexImage) (GLuint texture, GLint level, );
	void (*InvalidateTexSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, );
	GLboolean (*IsAsyncMarkerSGIX) (GLuint marker, );
	GLboolean (*IsBuffer) (GLuint buffer, );
	GLboolean (*IsBufferARB) (GLuint buffer, );
	GLboolean (*IsBufferResidentNV) (GLenum target, );
	GLboolean (*IsCommandListNV) (GLuint list, );
	GLboolean (*IsEnabled) (GL_EnableCap_t cap, );
	GLboolean (*IsEnabledIndexedEXT) (GL_EnableCap_t target, GLuint index, );
	GLboolean (*IsEnabledi) (GL_EnableCap_t target, GLuint index, );
	GLboolean (*IsEnablediEXT) (GL_EnableCap_t target, GLuint index, );
	GLboolean (*IsEnablediNV) (GL_EnableCap_t target, GLuint index, );
	GLboolean (*IsEnablediOES) (GL_EnableCap_t target, GLuint index, );
	GLboolean (*IsFenceAPPLE) (GLuint fence, );
	GLboolean (*IsFenceNV) (GLuint fence, );
	GLboolean (*IsFramebuffer) (GLuint framebuffer, );
	GLboolean (*IsFramebufferEXT) (GLuint framebuffer, );
	GLboolean (*IsFramebufferOES) (GLuint framebuffer, );
	GLboolean (*IsImageHandleResidentARB) (GLuint64 handle, );
	GLboolean (*IsImageHandleResidentNV) (GLuint64 handle, );
	GLboolean (*IsList) (GLuint list, );
	GLboolean (*IsMemoryObjectEXT) (GLuint memoryObject, );
	GLboolean (*IsNameAMD) (GLenum identifier, GLuint name, );
	GLboolean (*IsNamedBufferResidentNV) (GLuint buffer, );
	GLboolean (*IsNamedStringARB) (GLint namelen, GLchar *name, );
	GLboolean (*IsObjectBufferATI) (GLuint buffer, );
	GLboolean (*IsOcclusionQueryNV) (GLuint id, );
	GLboolean (*IsPathNV) (GLuint path, );
	GLboolean (*IsPointInFillPathNV) (GLuint path, GLuint mask, GLfloat x, GLfloat y, );
	GLboolean (*IsPointInStrokePathNV) (GLuint path, GLfloat x, GLfloat y, );
	GLboolean (*IsProgram) (GLuint program, );
	GLboolean (*IsProgramARB) (GLuint program, );
	GLboolean (*IsProgramNV) (GLuint id, );
	GLboolean (*IsProgramPipeline) (GLuint pipeline, );
	GLboolean (*IsProgramPipelineEXT) (GLuint pipeline, );
	GLboolean (*IsQuery) (GLuint id, );
	GLboolean (*IsQueryARB) (GLuint id, );
	GLboolean (*IsQueryEXT) (GLuint id, );
	GLboolean (*IsRenderbuffer) (GLuint renderbuffer, );
	GLboolean (*IsRenderbufferEXT) (GLuint renderbuffer, );
	GLboolean (*IsRenderbufferOES) (GLuint renderbuffer, );
	GLboolean (*IsSemaphoreEXT) (GLuint semaphore, );
	GLboolean (*IsSampler) (GLuint sampler, );
	GLboolean (*IsShader) (GLuint shader, );
	GLboolean (*IsStateNV) (GLuint state, );
	GLboolean (*IsSync) (GLsync sync, );
	GLboolean (*IsSyncAPPLE) (GLsync sync, );
	GLboolean (*IsTexture) (GLuint texture, );
	GLboolean (*IsTextureEXT) (GLuint texture, );
	GLboolean (*IsTextureHandleResidentARB) (GLuint64 handle, );
	GLboolean (*IsTextureHandleResidentNV) (GLuint64 handle, );
	GLboolean (*IsTransformFeedback) (GLuint id, );
	GLboolean (*IsTransformFeedbackNV) (GLuint id, );
	GLboolean (*IsVariantEnabledEXT) (GLuint id, GL_VariantCapEXT_t cap, );
	GLboolean (*IsVertexArray) (GLuint array, );
	GLboolean (*IsVertexArrayAPPLE) (GLuint array, );
	GLboolean (*IsVertexArrayOES) (GLuint array, );
	GLboolean (*IsVertexAttribEnabledAPPLE) (GLuint index, GLenum pname, );
	void (*LGPUCopyImageSubDataNVX) (GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth, );
	void (*LGPUInterlockNVX) ();
	void (*LGPUNamedBufferSubDataNVX) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, data, );
	void (*LabelObjectEXT) (GLenum type, GLuint object, GLsizei length, GLchar *label, );
	void (*LightEnviSGIX) (GL_LightEnvParameterSGIX_t pname, GLint param, );
	void (*LightModelf) (GL_LightModelParameter_t pname, GLfloat param, );
	void (*LightModelfv) (GL_LightModelParameter_t pname, GLfloat *params, );
	void (*LightModeli) (GL_LightModelParameter_t pname, GLint param, );
	void (*LightModeliv) (GL_LightModelParameter_t pname, GLint *params, );
	void (*LightModelx) (GL_LightModelParameter_t pname, GLfixed param, );
	void (*LightModelxOES) (GL_LightModelParameter_t pname, GLfixed param, );
	void (*LightModelxv) (GL_LightModelParameter_t pname, GLfixed *param, );
	void (*LightModelxvOES) (GL_LightModelParameter_t pname, GLfixed *param, );
	void (*Lightf) (GL_LightName_t light, GL_LightParameter_t pname, GLfloat param, );
	void (*Lightfv) (GL_LightName_t light, GL_LightParameter_t pname, GLfloat *params, );
	void (*Lighti) (GL_LightName_t light, GL_LightParameter_t pname, GLint param, );
	void (*Lightiv) (GL_LightName_t light, GL_LightParameter_t pname, GLint *params, );
	void (*Lightx) (GL_LightName_t light, GL_LightParameter_t pname, GLfixed param, );
	void (*LightxOES) (GL_LightName_t light, GL_LightParameter_t pname, GLfixed param, );
	void (*Lightxv) (GL_LightName_t light, GL_LightParameter_t pname, GLfixed *params, );
	void (*LightxvOES) (GL_LightName_t light, GL_LightParameter_t pname, GLfixed *params, );
	void (*LineStipple) (GLint factor, GLushort pattern, );
	void (*LineWidth) (GLfloat width, );
	void (*LineWidthx) (GLfixed width, );
	void (*LineWidthxOES) (GLfixed width, );
	void (*LinkProgram) (GLuint program, );
	void (*LinkProgramARB) (GLhandleARB programObj, );
	void (*ListBase) (GLuint base, );
	void (*ListDrawCommandsStatesClientNV) (GLuint list, GLuint segment, indirects, GLsizei *sizes, GLuint *states, GLuint *fbos, GLuint count, );
	void (*ListParameterfSGIX) (GLuint list, GL_ListParameterName_t pname, GLfloat param, );
	void (*ListParameterfvSGIX) (GLuint list, GL_ListParameterName_t pname, GLfloat *params, );
	void (*ListParameteriSGIX) (GLuint list, GL_ListParameterName_t pname, GLint param, );
	void (*ListParameterivSGIX) (GLuint list, GL_ListParameterName_t pname, GLint *params, );
	void (*LoadIdentity) ();
	void (*LoadIdentityDeformationMapSGIX) (GLbitfield mask, );
	void (*LoadMatrixd) (GLdouble *m, );
	void (*LoadMatrixf) (GLfloat *m, );
	void (*LoadMatrixx) (GLfixed *m, );
	void (*LoadMatrixxOES) (GLfixed *m, );
	void (*LoadName) (GLuint name, );
	void (*LoadPaletteFromModelViewMatrixOES) ();
	void (*LoadProgramNV) (GL_VertexAttribEnumNV_t target, GLuint id, GLsizei len, GLubyte *program, );
	void (*LoadTransposeMatrixd) (GLdouble *m, );
	void (*LoadTransposeMatrixdARB) (GLdouble *m, );
	void (*LoadTransposeMatrixf) (GLfloat *m, );
	void (*LoadTransposeMatrixfARB) (GLfloat *m, );
	void (*LoadTransposeMatrixxOES) (GLfixed *m, );
	void (*LockArraysEXT) (GLint first, GLsizei count, );
	void (*LogicOp) (GL_LogicOp_t opcode, );
	void (*MakeBufferNonResidentNV) (GLenum target, );
	void (*MakeBufferResidentNV) (GLenum target, GLenum access, );
	void (*MakeImageHandleNonResidentARB) (GLuint64 handle, );
	void (*MakeImageHandleNonResidentNV) (GLuint64 handle, );
	void (*MakeImageHandleResidentARB) (GLuint64 handle, GLenum access, );
	void (*MakeImageHandleResidentNV) (GLuint64 handle, GLenum access, );
	void (*MakeNamedBufferNonResidentNV) (GLuint buffer, );
	void (*MakeNamedBufferResidentNV) (GLuint buffer, GLenum access, );
	void (*MakeTextureHandleNonResidentARB) (GLuint64 handle, );
	void (*MakeTextureHandleNonResidentNV) (GLuint64 handle, );
	void (*MakeTextureHandleResidentARB) (GLuint64 handle, );
	void (*MakeTextureHandleResidentNV) (GLuint64 handle, );
	void (*Map1d) (GL_MapTarget_t target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble *points, );
	void (*Map1f) (GL_MapTarget_t target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat *points, );
	void (*Map1xOES) (GL_MapTarget_t target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points, );
	void (*Map2d) (GL_MapTarget_t target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble *points, );
	void (*Map2f) (GL_MapTarget_t target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat *points, );
	void (*Map2xOES) (GL_MapTarget_t target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points, );
	void *(*MapBuffer) (GL_BufferTargetARB_t target, GL_BufferAccessARB_t access, );
	void *(*MapBufferARB) (GL_BufferTargetARB_t target, GL_BufferAccessARB_t access, );
	void *(*MapBufferOES) (GL_BufferTargetARB_t target, GL_BufferAccessARB_t access, );
	void *(*MapBufferRange) (GL_BufferTargetARB_t target, GLintptr offset, GLsizeiptr length, GLbitfield access, );
	void *(*MapBufferRangeEXT) (GL_BufferTargetARB_t target, GLintptr offset, GLsizeiptr length, GLbitfield access, );
	void (*MapControlPointsNV) (GL_EvalTargetNV_t target, GLuint index, GL_MapTypeNV_t type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, points, );
	void (*MapGrid1d) (GLint un, GLdouble u1, GLdouble u2, );
	void (*MapGrid1f) (GLint un, GLfloat u1, GLfloat u2, );
	void (*MapGrid1xOES) (GLint n, GLfixed u1, GLfixed u2, );
	void (*MapGrid2d) (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2, );
	void (*MapGrid2f) (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2, );
	void (*MapGrid2xOES) (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2, );
	void *(*MapNamedBuffer) (GLuint buffer, GL_BufferAccessARB_t access, );
	void *(*MapNamedBufferEXT) (GLuint buffer, GL_BufferAccessARB_t access, );
	void *(*MapNamedBufferRange) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access, );
	void *(*MapNamedBufferRangeEXT) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access, );
	void *(*MapObjectBufferATI) (GLuint buffer, );
	void (*MapParameterfvNV) (GL_EvalTargetNV_t target, GL_MapParameterNV_t pname, GLfloat *params, );
	void (*MapParameterivNV) (GL_EvalTargetNV_t target, GL_MapParameterNV_t pname, GLint *params, );
	void *(*MapTexture2DINTEL) (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout, );
	void (*MapVertexAttrib1dAPPLE) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble *points, );
	void (*MapVertexAttrib1fAPPLE) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat *points, );
	void (*MapVertexAttrib2dAPPLE) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble *points, );
	void (*MapVertexAttrib2fAPPLE) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat *points, );
	void (*Materialf) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfloat param, );
	void (*Materialfv) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfloat *params, );
	void (*Materiali) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLint param, );
	void (*Materialiv) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLint *params, );
	void (*Materialx) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfixed param, );
	void (*MaterialxOES) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfixed param, );
	void (*Materialxv) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfixed *param, );
	void (*MaterialxvOES) (GL_MaterialFace_t face, GL_MaterialParameter_t pname, GLfixed *param, );
	void (*MatrixFrustumEXT) (GL_MatrixMode_t mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, );
	void (*MatrixIndexPointerARB) (GLint size, GL_MatrixIndexPointerTypeARB_t type, GLsizei stride, pointer, );
	void (*MatrixIndexPointerOES) (GLint size, GL_MatrixIndexPointerTypeARB_t type, GLsizei stride, pointer, );
	void (*MatrixIndexubvARB) (GLint size, GLubyte *indices, );
	void (*MatrixIndexuivARB) (GLint size, GLuint *indices, );
	void (*MatrixIndexusvARB) (GLint size, GLushort *indices, );
	void (*MatrixLoad3x2fNV) (GLenum matrixMode, GLfloat *m, );
	void (*MatrixLoad3x3fNV) (GLenum matrixMode, GLfloat *m, );
	void (*MatrixLoadIdentityEXT) (GL_MatrixMode_t mode, );
	void (*MatrixLoadTranspose3x3fNV) (GLenum matrixMode, GLfloat *m, );
	void (*MatrixLoadTransposedEXT) (GL_MatrixMode_t mode, GLdouble *m, );
	void (*MatrixLoadTransposefEXT) (GL_MatrixMode_t mode, GLfloat *m, );
	void (*MatrixLoaddEXT) (GL_MatrixMode_t mode, GLdouble *m, );
	void (*MatrixLoadfEXT) (GL_MatrixMode_t mode, GLfloat *m, );
	void (*MatrixMode) (GL_MatrixMode_t mode, );
	void (*MatrixMult3x2fNV) (GLenum matrixMode, GLfloat *m, );
	void (*MatrixMult3x3fNV) (GLenum matrixMode, GLfloat *m, );
	void (*MatrixMultTranspose3x3fNV) (GLenum matrixMode, GLfloat *m, );
	void (*MatrixMultTransposedEXT) (GL_MatrixMode_t mode, GLdouble *m, );
	void (*MatrixMultTransposefEXT) (GL_MatrixMode_t mode, GLfloat *m, );
	void (*MatrixMultdEXT) (GL_MatrixMode_t mode, GLdouble *m, );
	void (*MatrixMultfEXT) (GL_MatrixMode_t mode, GLfloat *m, );
	void (*MatrixOrthoEXT) (GL_MatrixMode_t mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, );
	void (*MatrixPopEXT) (GL_MatrixMode_t mode, );
	void (*MatrixPushEXT) (GL_MatrixMode_t mode, );
	void (*MatrixRotatedEXT) (GL_MatrixMode_t mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z, );
	void (*MatrixRotatefEXT) (GL_MatrixMode_t mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z, );
	void (*MatrixScaledEXT) (GL_MatrixMode_t mode, GLdouble x, GLdouble y, GLdouble z, );
	void (*MatrixScalefEXT) (GL_MatrixMode_t mode, GLfloat x, GLfloat y, GLfloat z, );
	void (*MatrixTranslatedEXT) (GL_MatrixMode_t mode, GLdouble x, GLdouble y, GLdouble z, );
	void (*MatrixTranslatefEXT) (GL_MatrixMode_t mode, GLfloat x, GLfloat y, GLfloat z, );
	void (*MaxShaderCompilerThreadsKHR) (GLuint count, );
	void (*MaxShaderCompilerThreadsARB) (GLuint count, );
	void (*MemoryBarrier) (GLbitfield barriers, );
	void (*MemoryBarrierByRegion) (GLbitfield barriers, );
	void (*MemoryBarrierEXT) (GLbitfield barriers, );
	void (*MemoryObjectParameterivEXT) (GLuint memoryObject, GL_MemoryObjectParameterName_t pname, GLint *params, );
	void (*MinSampleShading) (GLfloat value, );
	void (*MinSampleShadingARB) (GLfloat value, );
	void (*MinSampleShadingOES) (GLfloat value, );
	void (*Minmax) (GL_MinmaxTargetEXT_t target, GL_InternalFormat_t internalformat, GLboolean sink, );
	void (*MinmaxEXT) (GL_MinmaxTargetEXT_t target, GL_InternalFormat_t internalformat, GLboolean sink, );
	void (*MultMatrixd) (GLdouble *m, );
	void (*MultMatrixf) (GLfloat *m, );
	void (*MultMatrixx) (GLfixed *m, );
	void (*MultMatrixxOES) (GLfixed *m, );
	void (*MultTransposeMatrixd) (GLdouble *m, );
	void (*MultTransposeMatrixdARB) (GLdouble *m, );
	void (*MultTransposeMatrixf) (GLfloat *m, );
	void (*MultTransposeMatrixfARB) (GLfloat *m, );
	void (*MultTransposeMatrixxOES) (GLfixed *m, );
	void (*MultiDrawArrays) (GL_PrimitiveType_t mode, GLint *first, GLsizei *count, GLsizei drawcount, );
	void (*MultiDrawArraysEXT) (GL_PrimitiveType_t mode, GLint *first, GLsizei *count, GLsizei primcount, );
	void (*MultiDrawArraysIndirect) (GL_PrimitiveType_t mode, indirect, GLsizei drawcount, GLsizei stride, );
	void (*MultiDrawArraysIndirectAMD) (GL_PrimitiveType_t mode, indirect, GLsizei primcount, GLsizei stride, );
	void (*MultiDrawArraysIndirectBindlessCountNV) (GL_PrimitiveType_t mode, indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount, );
	void (*MultiDrawArraysIndirectBindlessNV) (GL_PrimitiveType_t mode, indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount, );
	void (*MultiDrawArraysIndirectCount) (GL_PrimitiveType_t mode, indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, );
	void (*MultiDrawArraysIndirectCountARB) (GL_PrimitiveType_t mode, indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, );
	void (*MultiDrawArraysIndirectEXT) (GL_PrimitiveType_t mode, indirect, GLsizei drawcount, GLsizei stride, );
	void (*MultiDrawElementArrayAPPLE) (GL_PrimitiveType_t mode, GLint *first, GLsizei *count, GLsizei primcount, );
	void (*MultiDrawElements) (GL_PrimitiveType_t mode, GLsizei *count, GL_DrawElementsType_t type, indices, GLsizei drawcount, );
	void (*MultiDrawElementsBaseVertex) (GL_PrimitiveType_t mode, GLsizei *count, GL_DrawElementsType_t type, indices, GLsizei drawcount, GLint *basevertex, );
	void (*MultiDrawElementsBaseVertexEXT) (GL_PrimitiveType_t mode, GLsizei *count, GL_DrawElementsType_t type, indices, GLsizei drawcount, GLint *basevertex, );
	void (*MultiDrawElementsEXT) (GL_PrimitiveType_t mode, GLsizei *count, GL_DrawElementsType_t type, indices, GLsizei primcount, );
	void (*MultiDrawElementsIndirect) (GL_PrimitiveType_t mode, GL_DrawElementsType_t type, indirect, GLsizei drawcount, GLsizei stride, );
	void (*MultiDrawElementsIndirectAMD) (GL_PrimitiveType_t mode, GL_DrawElementsType_t type, indirect, GLsizei primcount, GLsizei stride, );
	void (*MultiDrawElementsIndirectBindlessCountNV) (GL_PrimitiveType_t mode, GL_DrawElementsType_t type, indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount, );
	void (*MultiDrawElementsIndirectBindlessNV) (GL_PrimitiveType_t mode, GL_DrawElementsType_t type, indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount, );
	void (*MultiDrawElementsIndirectCount) (GL_PrimitiveType_t mode, GL_DrawElementsType_t type, indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, );
	void (*MultiDrawElementsIndirectCountARB) (GL_PrimitiveType_t mode, GL_DrawElementsType_t type, indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, );
	void (*MultiDrawElementsIndirectEXT) (GL_PrimitiveType_t mode, GL_DrawElementsType_t type, indirect, GLsizei drawcount, GLsizei stride, );
	void (*MultiDrawMeshTasksIndirectNV) (GLintptr indirect, GLsizei drawcount, GLsizei stride, );
	void (*MultiDrawMeshTasksIndirectCountNV) (GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, );
	void (*MultiDrawRangeElementArrayAPPLE) (GL_PrimitiveType_t mode, GLuint start, GLuint end, GLint *first, GLsizei *count, GLsizei primcount, );
	void (*MultiModeDrawArraysIBM) (GL_PrimitiveType_t *mode, GLint *first, GLsizei *count, GLsizei primcount, GLint modestride, );
	void (*MultiModeDrawElementsIBM) (GL_PrimitiveType_t *mode, GLsizei *count, GL_DrawElementsType_t type, indices, GLsizei primcount, GLint modestride, );
	void (*MultiTexBufferEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_InternalFormat_t internalformat, GLuint buffer, );
	void (*MultiTexCoord1bOES) (GL_TextureUnit_t texture, GLbyte s, );
	void (*MultiTexCoord1bvOES) (GL_TextureUnit_t texture, GLbyte *coords, );
	void (*MultiTexCoord1d) (GL_TextureUnit_t target, GLdouble s, );
	void (*MultiTexCoord1dARB) (GL_TextureUnit_t target, GLdouble s, );
	void (*MultiTexCoord1dv) (GL_TextureUnit_t target, GLdouble *v, );
	void (*MultiTexCoord1dvARB) (GL_TextureUnit_t target, GLdouble *v, );
	void (*MultiTexCoord1f) (GL_TextureUnit_t target, GLfloat s, );
	void (*MultiTexCoord1fARB) (GL_TextureUnit_t target, GLfloat s, );
	void (*MultiTexCoord1fv) (GL_TextureUnit_t target, GLfloat *v, );
	void (*MultiTexCoord1fvARB) (GL_TextureUnit_t target, GLfloat *v, );
	void (*MultiTexCoord1hNV) (GL_TextureUnit_t target, GLhalfNV s, );
	void (*MultiTexCoord1hvNV) (GL_TextureUnit_t target, GLhalfNV *v, );
	void (*MultiTexCoord1i) (GL_TextureUnit_t target, GLint s, );
	void (*MultiTexCoord1iARB) (GL_TextureUnit_t target, GLint s, );
	void (*MultiTexCoord1iv) (GL_TextureUnit_t target, GLint *v, );
	void (*MultiTexCoord1ivARB) (GL_TextureUnit_t target, GLint *v, );
	void (*MultiTexCoord1s) (GL_TextureUnit_t target, GLshort s, );
	void (*MultiTexCoord1sARB) (GL_TextureUnit_t target, GLshort s, );
	void (*MultiTexCoord1sv) (GL_TextureUnit_t target, GLshort *v, );
	void (*MultiTexCoord1svARB) (GL_TextureUnit_t target, GLshort *v, );
	void (*MultiTexCoord1xOES) (GL_TextureUnit_t texture, GLfixed s, );
	void (*MultiTexCoord1xvOES) (GL_TextureUnit_t texture, GLfixed *coords, );
	void (*MultiTexCoord2bOES) (GL_TextureUnit_t texture, GLbyte s, GLbyte t, );
	void (*MultiTexCoord2bvOES) (GL_TextureUnit_t texture, GLbyte *coords, );
	void (*MultiTexCoord2d) (GL_TextureUnit_t target, GLdouble s, GLdouble t, );
	void (*MultiTexCoord2dARB) (GL_TextureUnit_t target, GLdouble s, GLdouble t, );
	void (*MultiTexCoord2dv) (GL_TextureUnit_t target, GLdouble *v, );
	void (*MultiTexCoord2dvARB) (GL_TextureUnit_t target, GLdouble *v, );
	void (*MultiTexCoord2f) (GL_TextureUnit_t target, GLfloat s, GLfloat t, );
	void (*MultiTexCoord2fARB) (GL_TextureUnit_t target, GLfloat s, GLfloat t, );
	void (*MultiTexCoord2fv) (GL_TextureUnit_t target, GLfloat *v, );
	void (*MultiTexCoord2fvARB) (GL_TextureUnit_t target, GLfloat *v, );
	void (*MultiTexCoord2hNV) (GL_TextureUnit_t target, GLhalfNV s, GLhalfNV t, );
	void (*MultiTexCoord2hvNV) (GL_TextureUnit_t target, GLhalfNV *v, );
	void (*MultiTexCoord2i) (GL_TextureUnit_t target, GLint s, GLint t, );
	void (*MultiTexCoord2iARB) (GL_TextureUnit_t target, GLint s, GLint t, );
	void (*MultiTexCoord2iv) (GL_TextureUnit_t target, GLint *v, );
	void (*MultiTexCoord2ivARB) (GL_TextureUnit_t target, GLint *v, );
	void (*MultiTexCoord2s) (GL_TextureUnit_t target, GLshort s, GLshort t, );
	void (*MultiTexCoord2sARB) (GL_TextureUnit_t target, GLshort s, GLshort t, );
	void (*MultiTexCoord2sv) (GL_TextureUnit_t target, GLshort *v, );
	void (*MultiTexCoord2svARB) (GL_TextureUnit_t target, GLshort *v, );
	void (*MultiTexCoord2xOES) (GL_TextureUnit_t texture, GLfixed s, GLfixed t, );
	void (*MultiTexCoord2xvOES) (GL_TextureUnit_t texture, GLfixed *coords, );
	void (*MultiTexCoord3bOES) (GL_TextureUnit_t texture, GLbyte s, GLbyte t, GLbyte r, );
	void (*MultiTexCoord3bvOES) (GL_TextureUnit_t texture, GLbyte *coords, );
	void (*MultiTexCoord3d) (GL_TextureUnit_t target, GLdouble s, GLdouble t, GLdouble r, );
	void (*MultiTexCoord3dARB) (GL_TextureUnit_t target, GLdouble s, GLdouble t, GLdouble r, );
	void (*MultiTexCoord3dv) (GL_TextureUnit_t target, GLdouble *v, );
	void (*MultiTexCoord3dvARB) (GL_TextureUnit_t target, GLdouble *v, );
	void (*MultiTexCoord3f) (GL_TextureUnit_t target, GLfloat s, GLfloat t, GLfloat r, );
	void (*MultiTexCoord3fARB) (GL_TextureUnit_t target, GLfloat s, GLfloat t, GLfloat r, );
	void (*MultiTexCoord3fv) (GL_TextureUnit_t target, GLfloat *v, );
	void (*MultiTexCoord3fvARB) (GL_TextureUnit_t target, GLfloat *v, );
	void (*MultiTexCoord3hNV) (GL_TextureUnit_t target, GLhalfNV s, GLhalfNV t, GLhalfNV r, );
	void (*MultiTexCoord3hvNV) (GL_TextureUnit_t target, GLhalfNV *v, );
	void (*MultiTexCoord3i) (GL_TextureUnit_t target, GLint s, GLint t, GLint r, );
	void (*MultiTexCoord3iARB) (GL_TextureUnit_t target, GLint s, GLint t, GLint r, );
	void (*MultiTexCoord3iv) (GL_TextureUnit_t target, GLint *v, );
	void (*MultiTexCoord3ivARB) (GL_TextureUnit_t target, GLint *v, );
	void (*MultiTexCoord3s) (GL_TextureUnit_t target, GLshort s, GLshort t, GLshort r, );
	void (*MultiTexCoord3sARB) (GL_TextureUnit_t target, GLshort s, GLshort t, GLshort r, );
	void (*MultiTexCoord3sv) (GL_TextureUnit_t target, GLshort *v, );
	void (*MultiTexCoord3svARB) (GL_TextureUnit_t target, GLshort *v, );
	void (*MultiTexCoord3xOES) (GL_TextureUnit_t texture, GLfixed s, GLfixed t, GLfixed r, );
	void (*MultiTexCoord3xvOES) (GL_TextureUnit_t texture, GLfixed *coords, );
	void (*MultiTexCoord4bOES) (GL_TextureUnit_t texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q, );
	void (*MultiTexCoord4bvOES) (GL_TextureUnit_t texture, GLbyte *coords, );
	void (*MultiTexCoord4d) (GL_TextureUnit_t target, GLdouble s, GLdouble t, GLdouble r, GLdouble q, );
	void (*MultiTexCoord4dARB) (GL_TextureUnit_t target, GLdouble s, GLdouble t, GLdouble r, GLdouble q, );
	void (*MultiTexCoord4dv) (GL_TextureUnit_t target, GLdouble *v, );
	void (*MultiTexCoord4dvARB) (GL_TextureUnit_t target, GLdouble *v, );
	void (*MultiTexCoord4f) (GL_TextureUnit_t target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, );
	void (*MultiTexCoord4fARB) (GL_TextureUnit_t target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, );
	void (*MultiTexCoord4fv) (GL_TextureUnit_t target, GLfloat *v, );
	void (*MultiTexCoord4fvARB) (GL_TextureUnit_t target, GLfloat *v, );
	void (*MultiTexCoord4hNV) (GL_TextureUnit_t target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q, );
	void (*MultiTexCoord4hvNV) (GL_TextureUnit_t target, GLhalfNV *v, );
	void (*MultiTexCoord4i) (GL_TextureUnit_t target, GLint s, GLint t, GLint r, GLint q, );
	void (*MultiTexCoord4iARB) (GL_TextureUnit_t target, GLint s, GLint t, GLint r, GLint q, );
	void (*MultiTexCoord4iv) (GL_TextureUnit_t target, GLint *v, );
	void (*MultiTexCoord4ivARB) (GL_TextureUnit_t target, GLint *v, );
	void (*MultiTexCoord4s) (GL_TextureUnit_t target, GLshort s, GLshort t, GLshort r, GLshort q, );
	void (*MultiTexCoord4sARB) (GL_TextureUnit_t target, GLshort s, GLshort t, GLshort r, GLshort q, );
	void (*MultiTexCoord4sv) (GL_TextureUnit_t target, GLshort *v, );
	void (*MultiTexCoord4svARB) (GL_TextureUnit_t target, GLshort *v, );
	void (*MultiTexCoord4x) (GL_TextureUnit_t texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q, );
	void (*MultiTexCoord4xOES) (GL_TextureUnit_t texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q, );
	void (*MultiTexCoord4xvOES) (GL_TextureUnit_t texture, GLfixed *coords, );
	void (*MultiTexCoordP1ui) (GL_TextureUnit_t texture, GL_TexCoordPointerType_t type, GLuint coords, );
	void (*MultiTexCoordP1uiv) (GL_TextureUnit_t texture, GL_TexCoordPointerType_t type, GLuint *coords, );
	void (*MultiTexCoordP2ui) (GL_TextureUnit_t texture, GL_TexCoordPointerType_t type, GLuint coords, );
	void (*MultiTexCoordP2uiv) (GL_TextureUnit_t texture, GL_TexCoordPointerType_t type, GLuint *coords, );
	void (*MultiTexCoordP3ui) (GL_TextureUnit_t texture, GL_TexCoordPointerType_t type, GLuint coords, );
	void (*MultiTexCoordP3uiv) (GL_TextureUnit_t texture, GL_TexCoordPointerType_t type, GLuint *coords, );
	void (*MultiTexCoordP4ui) (GL_TextureUnit_t texture, GL_TexCoordPointerType_t type, GLuint coords, );
	void (*MultiTexCoordP4uiv) (GL_TextureUnit_t texture, GL_TexCoordPointerType_t type, GLuint *coords, );
	void (*MultiTexCoordPointerEXT) (GL_TextureUnit_t texunit, GLint size, GL_TexCoordPointerType_t type, GLsizei stride, pointer, );
	void (*MultiTexEnvfEXT) (GL_TextureUnit_t texunit, GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfloat param, );
	void (*MultiTexEnvfvEXT) (GL_TextureUnit_t texunit, GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfloat *params, );
	void (*MultiTexEnviEXT) (GL_TextureUnit_t texunit, GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLint param, );
	void (*MultiTexEnvivEXT) (GL_TextureUnit_t texunit, GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLint *params, );
	void (*MultiTexGendEXT) (GL_TextureUnit_t texunit, GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLdouble param, );
	void (*MultiTexGendvEXT) (GL_TextureUnit_t texunit, GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLdouble *params, );
	void (*MultiTexGenfEXT) (GL_TextureUnit_t texunit, GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfloat param, );
	void (*MultiTexGenfvEXT) (GL_TextureUnit_t texunit, GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfloat *params, );
	void (*MultiTexGeniEXT) (GL_TextureUnit_t texunit, GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLint param, );
	void (*MultiTexGenivEXT) (GL_TextureUnit_t texunit, GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLint *params, );
	void (*MultiTexImage1DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint internalformat, GLsizei width, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*MultiTexImage2DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*MultiTexImage3DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*MultiTexParameterIivEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint *params, );
	void (*MultiTexParameterIuivEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLuint *params, );
	void (*MultiTexParameterfEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLfloat param, );
	void (*MultiTexParameterfvEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLfloat *params, );
	void (*MultiTexParameteriEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint param, );
	void (*MultiTexParameterivEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint *params, );
	void (*MultiTexRenderbufferEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLuint renderbuffer, );
	void (*MultiTexSubImage1DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint xoffset, GLsizei width, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*MultiTexSubImage2DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*MultiTexSubImage3DEXT) (GL_TextureUnit_t texunit, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*MulticastBarrierNV) ();
	void (*MulticastBlitFramebufferNV) (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, );
	void (*MulticastBufferSubDataNV) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, data, );
	void (*MulticastCopyBufferSubDataNV) (GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, );
	void (*MulticastCopyImageSubDataNV) (GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, );
	void (*MulticastFramebufferSampleLocationsfvNV) (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, GLfloat *v, );
	void (*MulticastGetQueryObjecti64vNV) (GLuint gpu, GLuint id, GLenum pname, GLint64 *params, );
	void (*MulticastGetQueryObjectivNV) (GLuint gpu, GLuint id, GLenum pname, GLint *params, );
	void (*MulticastGetQueryObjectui64vNV) (GLuint gpu, GLuint id, GLenum pname, GLuint64 *params, );
	void (*MulticastGetQueryObjectuivNV) (GLuint gpu, GLuint id, GLenum pname, GLuint *params, );
	void (*MulticastScissorArrayvNVX) (GLuint gpu, GLuint first, GLsizei count, GLint *v, );
	void (*MulticastViewportArrayvNVX) (GLuint gpu, GLuint first, GLsizei count, GLfloat *v, );
	void (*MulticastViewportPositionWScaleNVX) (GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff, );
	void (*MulticastWaitSyncNV) (GLuint signalGpu, GLbitfield waitGpuMask, );
	void (*NamedBufferAttachMemoryNV) (GLuint buffer, GLuint memory, GLuint64 offset, );
	void (*NamedBufferData) (GLuint buffer, GLsizeiptr size, data, GL_VertexBufferObjectUsage_t usage, );
	void (*NamedBufferDataEXT) (GLuint buffer, GLsizeiptr size, data, GL_VertexBufferObjectUsage_t usage, );
	void (*NamedBufferPageCommitmentARB) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit, );
	void (*NamedBufferPageCommitmentEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit, );
	void (*NamedBufferPageCommitmentMemNV) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit, );
	void (*NamedBufferStorage) (GLuint buffer, GLsizeiptr size, data, GLbitfield flags, );
	void (*NamedBufferStorageExternalEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags, );
	void (*NamedBufferStorageEXT) (GLuint buffer, GLsizeiptr size, data, GLbitfield flags, );
	void (*NamedBufferStorageMemEXT) (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset, );
	void (*NamedBufferSubData) (GLuint buffer, GLintptr offset, GLsizeiptr size, data, );
	void (*NamedBufferSubDataEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, data, );
	void (*NamedCopyBufferSubDataEXT) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, );
	void (*NamedFramebufferDrawBuffer) (GLuint framebuffer, GL_ColorBuffer_t buf, );
	void (*NamedFramebufferDrawBuffers) (GLuint framebuffer, GLsizei n, GL_ColorBuffer_t *bufs, );
	void (*NamedFramebufferParameteri) (GLuint framebuffer, GL_FramebufferParameterName_t pname, GLint param, );
	void (*NamedFramebufferParameteriEXT) (GLuint framebuffer, GL_FramebufferParameterName_t pname, GLint param, );
	void (*NamedFramebufferReadBuffer) (GLuint framebuffer, GL_ColorBuffer_t src, );
	void (*NamedFramebufferRenderbuffer) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GL_RenderbufferTarget_t renderbuffertarget, GLuint renderbuffer, );
	void (*NamedFramebufferRenderbufferEXT) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GL_RenderbufferTarget_t renderbuffertarget, GLuint renderbuffer, );
	void (*NamedFramebufferSampleLocationsfvARB) (GLuint framebuffer, GLuint start, GLsizei count, GLfloat *v, );
	void (*NamedFramebufferSampleLocationsfvNV) (GLuint framebuffer, GLuint start, GLsizei count, GLfloat *v, );
	void (*NamedFramebufferTexture) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, );
	void (*NamedFramebufferSamplePositionsfvAMD) (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, GLfloat *values, );
	void (*NamedFramebufferTexture1DEXT) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, );
	void (*NamedFramebufferTexture2DEXT) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, );
	void (*NamedFramebufferTexture3DEXT) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GL_TextureTarget_t textarget, GLuint texture, GLint level, GLint zoffset, );
	void (*NamedFramebufferTextureEXT) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, );
	void (*NamedFramebufferTextureFaceEXT) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GL_TextureTarget_t face, );
	void (*NamedFramebufferTextureLayer) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GLint layer, );
	void (*NamedFramebufferTextureLayerEXT) (GLuint framebuffer, GL_FramebufferAttachment_t attachment, GLuint texture, GLint level, GLint layer, );
	void (*NamedProgramLocalParameter4dEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*NamedProgramLocalParameter4dvEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLdouble *params, );
	void (*NamedProgramLocalParameter4fEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*NamedProgramLocalParameter4fvEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLfloat *params, );
	void (*NamedProgramLocalParameterI4iEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLint x, GLint y, GLint z, GLint w, );
	void (*NamedProgramLocalParameterI4ivEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLint *params, );
	void (*NamedProgramLocalParameterI4uiEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, );
	void (*NamedProgramLocalParameterI4uivEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLuint *params, );
	void (*NamedProgramLocalParameters4fvEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLsizei count, GLfloat *params, );
	void (*NamedProgramLocalParametersI4ivEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLsizei count, GLint *params, );
	void (*NamedProgramLocalParametersI4uivEXT) (GLuint program, GL_ProgramTarget_t target, GLuint index, GLsizei count, GLuint *params, );
	void (*NamedProgramStringEXT) (GLuint program, GL_ProgramTarget_t target, GL_ProgramFormat_t format, GLsizei len, string, );
	void (*NamedRenderbufferStorage) (GLuint renderbuffer, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*NamedRenderbufferStorageEXT) (GLuint renderbuffer, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*NamedRenderbufferStorageMultisample) (GLuint renderbuffer, GLsizei samples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*NamedRenderbufferStorageMultisampleAdvancedAMD) (GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*NamedRenderbufferStorageMultisampleCoverageEXT) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*NamedRenderbufferStorageMultisampleEXT) (GLuint renderbuffer, GLsizei samples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*NamedStringARB) (GLenum type, GLint namelen, GLchar *name, GLint stringlen, GLchar *string, );
	void (*NewList) (GLuint list, GL_ListMode_t mode, );
	GLuint (*NewObjectBufferATI) (GLsizei size, pointer, GL_ArrayObjectUsageATI_t usage, );
	void (*Normal3b) (GLbyte nx, GLbyte ny, GLbyte nz, );
	void (*Normal3bv) (GLbyte *v, );
	void (*Normal3d) (GLdouble nx, GLdouble ny, GLdouble nz, );
	void (*Normal3dv) (GLdouble *v, );
	void (*Normal3f) (GLfloat nx, GLfloat ny, GLfloat nz, );
	void (*Normal3fVertex3fSUN) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, );
	void (*Normal3fVertex3fvSUN) (GLfloat *n, GLfloat *v, );
	void (*Normal3fv) (GLfloat *v, );
	void (*Normal3hNV) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz, );
	void (*Normal3hvNV) (GLhalfNV *v, );
	void (*Normal3i) (GLint nx, GLint ny, GLint nz, );
	void (*Normal3iv) (GLint *v, );
	void (*Normal3s) (GLshort nx, GLshort ny, GLshort nz, );
	void (*Normal3sv) (GLshort *v, );
	void (*Normal3x) (GLfixed nx, GLfixed ny, GLfixed nz, );
	void (*Normal3xOES) (GLfixed nx, GLfixed ny, GLfixed nz, );
	void (*Normal3xvOES) (GLfixed *coords, );
	void (*NormalFormatNV) (GLenum type, GLsizei stride, );
	void (*NormalP3ui) (GL_NormalPointerType_t type, GLuint coords, );
	void (*NormalP3uiv) (GL_NormalPointerType_t type, GLuint *coords, );
	void (*NormalPointer) (GL_NormalPointerType_t type, GLsizei stride, pointer, );
	void (*NormalPointerEXT) (GL_NormalPointerType_t type, GLsizei stride, GLsizei count, pointer, );
	void (*NormalPointerListIBM) (GL_NormalPointerType_t type, GLint stride, pointer, GLint ptrstride, );
	void (*NormalPointervINTEL) (GL_NormalPointerType_t type, pointer, );
	void (*NormalStream3bATI) (GL_VertexStreamATI_t stream, GLbyte nx, GLbyte ny, GLbyte nz, );
	void (*NormalStream3bvATI) (GL_VertexStreamATI_t stream, GLbyte *coords, );
	void (*NormalStream3dATI) (GL_VertexStreamATI_t stream, GLdouble nx, GLdouble ny, GLdouble nz, );
	void (*NormalStream3dvATI) (GL_VertexStreamATI_t stream, GLdouble *coords, );
	void (*NormalStream3fATI) (GL_VertexStreamATI_t stream, GLfloat nx, GLfloat ny, GLfloat nz, );
	void (*NormalStream3fvATI) (GL_VertexStreamATI_t stream, GLfloat *coords, );
	void (*NormalStream3iATI) (GL_VertexStreamATI_t stream, GLint nx, GLint ny, GLint nz, );
	void (*NormalStream3ivATI) (GL_VertexStreamATI_t stream, GLint *coords, );
	void (*NormalStream3sATI) (GL_VertexStreamATI_t stream, GLshort nx, GLshort ny, GLshort nz, );
	void (*NormalStream3svATI) (GL_VertexStreamATI_t stream, GLshort *coords, );
	void (*ObjectLabel) (GL_ObjectIdentifier_t identifier, GLuint name, GLsizei length, GLchar *label, );
	void (*ObjectLabelKHR) (GL_ObjectIdentifier_t identifier, GLuint name, GLsizei length, GLchar *label, );
	void (*ObjectPtrLabel) (ptr, GLsizei length, GLchar *label, );
	void (*ObjectPtrLabelKHR) (ptr, GLsizei length, GLchar *label, );
	GLenum (*ObjectPurgeableAPPLE) (GLenum objectType, GLuint name, GLenum option, );
	GLenum (*ObjectUnpurgeableAPPLE) (GLenum objectType, GLuint name, GLenum option, );
	void (*Ortho) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, );
	void (*Orthof) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, );
	void (*OrthofOES) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, );
	void (*Orthox) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, );
	void (*OrthoxOES) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, );
	void (*PNTrianglesfATI) (GL_PNTrianglesPNameATI_t pname, GLfloat param, );
	void (*PNTrianglesiATI) (GL_PNTrianglesPNameATI_t pname, GLint param, );
	void (*PassTexCoordATI) (GLuint dst, GLuint coord, GL_SwizzleOpATI_t swizzle, );
	void (*PassThrough) (GLfloat token, );
	void (*PassThroughxOES) (GLfixed token, );
	void (*PatchParameterfv) (GL_PatchParameterName_t pname, GLfloat *values, );
	void (*PatchParameteri) (GL_PatchParameterName_t pname, GLint value, );
	void (*PatchParameteriEXT) (GL_PatchParameterName_t pname, GLint value, );
	void (*PatchParameteriOES) (GL_PatchParameterName_t pname, GLint value, );
	void (*PathColorGenNV) (GL_PathColor_t color, GL_PathGenMode_t genMode, GL_PathColorFormat_t colorFormat, GLfloat *coeffs, );
	void (*PathCommandsNV) (GLuint path, GLsizei numCommands, GLubyte *commands, GLsizei numCoords, GL_PathCoordType_t coordType, coords, );
	void (*PathCoordsNV) (GLuint path, GLsizei numCoords, GL_PathCoordType_t coordType, coords, );
	void (*PathCoverDepthFuncNV) (GL_DepthFunction_t func, );
	void (*PathDashArrayNV) (GLuint path, GLsizei dashCount, GLfloat *dashArray, );
	void (*PathFogGenNV) (GL_PathGenMode_t genMode, );
	GLenum (*PathGlyphIndexArrayNV) (GLuint firstPathName, GLenum fontTarget, fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, );
	GLenum (*PathGlyphIndexRangeNV) (GLenum fontTarget, fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint *baseAndCount, );
	void (*PathGlyphRangeNV) (GLuint firstPathName, GL_PathFontTarget_t fontTarget, fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GL_PathHandleMissingGlyphs_t handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, );
	void (*PathGlyphsNV) (GLuint firstPathName, GL_PathFontTarget_t fontTarget, fontName, GLbitfield fontStyle, GLsizei numGlyphs, GL_PathElementType_t type, charcodes, GL_PathHandleMissingGlyphs_t handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, );
	GLenum (*PathMemoryGlyphIndexArrayNV) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, );
	void (*PathParameterfNV) (GLuint path, GL_PathParameter_t pname, GLfloat value, );
	void (*PathParameterfvNV) (GLuint path, GL_PathParameter_t pname, GLfloat *value, );
	void (*PathParameteriNV) (GLuint path, GL_PathParameter_t pname, GLint value, );
	void (*PathParameterivNV) (GLuint path, GL_PathParameter_t pname, GLint *value, );
	void (*PathStencilDepthOffsetNV) (GLfloat factor, GLfloat units, );
	void (*PathStencilFuncNV) (GL_StencilFunction_t func, GLint ref, GLuint mask, );
	void (*PathStringNV) (GLuint path, GL_PathStringFormat_t format, GLsizei length, pathString, );
	void (*PathSubCommandsNV) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, GLubyte *commands, GLsizei numCoords, GL_PathCoordType_t coordType, coords, );
	void (*PathSubCoordsNV) (GLuint path, GLsizei coordStart, GLsizei numCoords, GL_PathCoordType_t coordType, coords, );
	void (*PathTexGenNV) (GL_PathColor_t texCoordSet, GL_PathGenMode_t genMode, GLint components, GLfloat *coeffs, );
	void (*PauseTransformFeedback) ();
	void (*PauseTransformFeedbackNV) ();
	void (*PixelDataRangeNV) (GL_PixelDataRangeTargetNV_t target, GLsizei length, pointer, );
	void (*PixelMapfv) (GL_PixelMap_t map, GLsizei mapsize, GLfloat *values, );
	void (*PixelMapuiv) (GL_PixelMap_t map, GLsizei mapsize, GLuint *values, );
	void (*PixelMapusv) (GL_PixelMap_t map, GLsizei mapsize, GLushort *values, );
	void (*PixelMapx) (GL_PixelMap_t map, GLint size, GLfixed *values, );
	void (*PixelStoref) (GL_PixelStoreParameter_t pname, GLfloat param, );
	void (*PixelStorei) (GL_PixelStoreParameter_t pname, GLint param, );
	void (*PixelStorex) (GL_PixelStoreParameter_t pname, GLfixed param, );
	void (*PixelTexGenParameterfSGIS) (GL_PixelTexGenParameterNameSGIS_t pname, GLfloat param, );
	void (*PixelTexGenParameterfvSGIS) (GL_PixelTexGenParameterNameSGIS_t pname, GLfloat *params, );
	void (*PixelTexGenParameteriSGIS) (GL_PixelTexGenParameterNameSGIS_t pname, GLint param, );
	void (*PixelTexGenParameterivSGIS) (GL_PixelTexGenParameterNameSGIS_t pname, GLint *params, );
	void (*PixelTexGenSGIX) (GL_PixelTexGenModeSGIX_t mode, );
	void (*PixelTransferf) (GL_PixelTransferParameter_t pname, GLfloat param, );
	void (*PixelTransferi) (GL_PixelTransferParameter_t pname, GLint param, );
	void (*PixelTransferxOES) (GL_PixelTransferParameter_t pname, GLfixed param, );
	void (*PixelTransformParameterfEXT) (GL_PixelTransformTargetEXT_t target, GL_PixelTransformPNameEXT_t pname, GLfloat param, );
	void (*PixelTransformParameterfvEXT) (GL_PixelTransformTargetEXT_t target, GL_PixelTransformPNameEXT_t pname, GLfloat *params, );
	void (*PixelTransformParameteriEXT) (GL_PixelTransformTargetEXT_t target, GL_PixelTransformPNameEXT_t pname, GLint param, );
	void (*PixelTransformParameterivEXT) (GL_PixelTransformTargetEXT_t target, GL_PixelTransformPNameEXT_t pname, GLint *params, );
	void (*PixelZoom) (GLfloat xfactor, GLfloat yfactor, );
	void (*PixelZoomxOES) (GLfixed xfactor, GLfixed yfactor, );
	GLboolean (*PointAlongPathNV) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY, );
	void (*PointParameterf) (GL_PointParameterNameARB_t pname, GLfloat param, );
	void (*PointParameterfARB) (GL_PointParameterNameARB_t pname, GLfloat param, );
	void (*PointParameterfEXT) (GL_PointParameterNameARB_t pname, GLfloat param, );
	void (*PointParameterfSGIS) (GL_PointParameterNameARB_t pname, GLfloat param, );
	void (*PointParameterfv) (GL_PointParameterNameARB_t pname, GLfloat *params, );
	void (*PointParameterfvARB) (GL_PointParameterNameARB_t pname, GLfloat *params, );
	void (*PointParameterfvEXT) (GL_PointParameterNameARB_t pname, GLfloat *params, );
	void (*PointParameterfvSGIS) (GL_PointParameterNameARB_t pname, GLfloat *params, );
	void (*PointParameteri) (GL_PointParameterNameARB_t pname, GLint param, );
	void (*PointParameteriNV) (GL_PointParameterNameARB_t pname, GLint param, );
	void (*PointParameteriv) (GL_PointParameterNameARB_t pname, GLint *params, );
	void (*PointParameterivNV) (GL_PointParameterNameARB_t pname, GLint *params, );
	void (*PointParameterx) (GL_PointParameterNameARB_t pname, GLfixed param, );
	void (*PointParameterxOES) (GL_PointParameterNameARB_t pname, GLfixed param, );
	void (*PointParameterxv) (GL_PointParameterNameARB_t pname, GLfixed *params, );
	void (*PointParameterxvOES) (GL_PointParameterNameARB_t pname, GLfixed *params, );
	void (*PointSize) (GLfloat size, );
	void (*PointSizePointerOES) (GLenum type, GLsizei stride, pointer, );
	void (*PointSizex) (GLfixed size, );
	void (*PointSizexOES) (GLfixed size, );
	GLint (*PollAsyncSGIX) (GLuint *markerp, );
	GLint (*PollInstrumentsSGIX) (GLint *marker_p, );
	void (*PolygonMode) (GL_MaterialFace_t face, GL_PolygonMode_t mode, );
	void (*PolygonModeNV) (GL_MaterialFace_t face, GL_PolygonMode_t mode, );
	void (*PolygonOffset) (GLfloat factor, GLfloat units, );
	void (*PolygonOffsetClamp) (GLfloat factor, GLfloat units, GLfloat clamp, );
	void (*PolygonOffsetClampEXT) (GLfloat factor, GLfloat units, GLfloat clamp, );
	void (*PolygonOffsetEXT) (GLfloat factor, GLfloat bias, );
	void (*PolygonOffsetx) (GLfixed factor, GLfixed units, );
	void (*PolygonOffsetxOES) (GLfixed factor, GLfixed units, );
	void (*PolygonStipple) (GLubyte *mask, );
	void (*PopAttrib) ();
	void (*PopClientAttrib) ();
	void (*PopDebugGroup) ();
	void (*PopDebugGroupKHR) ();
	void (*PopGroupMarkerEXT) ();
	void (*PopMatrix) ();
	void (*PopName) ();
	void (*PresentFrameDualFillNV) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3, );
	void (*PresentFrameKeyedNV) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1, );
	void (*PrimitiveBoundingBox) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, );
	void (*PrimitiveBoundingBoxARB) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, );
	void (*PrimitiveBoundingBoxEXT) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, );
	void (*PrimitiveBoundingBoxOES) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, );
	void (*PrimitiveRestartIndex) (GLuint index, );
	void (*PrimitiveRestartIndexNV) (GLuint index, );
	void (*PrimitiveRestartNV) ();
	void (*PrioritizeTextures) (GLsizei n, GLuint *textures, GLfloat *priorities, );
	void (*PrioritizeTexturesEXT) (GLsizei n, GLuint *textures, GLclampf *priorities, );
	void (*PrioritizeTexturesxOES) (GLsizei n, GLuint *textures, GLfixed *priorities, );
	void (*ProgramBinary) (GLuint program, GLenum binaryFormat, binary, GLsizei length, );
	void (*ProgramBinaryOES) (GLuint program, GLenum binaryFormat, binary, GLint length, );
	void (*ProgramBufferParametersIivNV) (GL_ProgramTarget_t target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, GLint *params, );
	void (*ProgramBufferParametersIuivNV) (GL_ProgramTarget_t target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, GLuint *params, );
	void (*ProgramBufferParametersfvNV) (GL_ProgramTarget_t target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, GLfloat *params, );
	void (*ProgramEnvParameter4dARB) (GL_ProgramTarget_t target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*ProgramEnvParameter4dvARB) (GL_ProgramTarget_t target, GLuint index, GLdouble *params, );
	void (*ProgramEnvParameter4fARB) (GL_ProgramTarget_t target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*ProgramEnvParameter4fvARB) (GL_ProgramTarget_t target, GLuint index, GLfloat *params, );
	void (*ProgramEnvParameterI4iNV) (GL_ProgramTarget_t target, GLuint index, GLint x, GLint y, GLint z, GLint w, );
	void (*ProgramEnvParameterI4ivNV) (GL_ProgramTarget_t target, GLuint index, GLint *params, );
	void (*ProgramEnvParameterI4uiNV) (GL_ProgramTarget_t target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, );
	void (*ProgramEnvParameterI4uivNV) (GL_ProgramTarget_t target, GLuint index, GLuint *params, );
	void (*ProgramEnvParameters4fvEXT) (GL_ProgramTarget_t target, GLuint index, GLsizei count, GLfloat *params, );
	void (*ProgramEnvParametersI4ivNV) (GL_ProgramTarget_t target, GLuint index, GLsizei count, GLint *params, );
	void (*ProgramEnvParametersI4uivNV) (GL_ProgramTarget_t target, GLuint index, GLsizei count, GLuint *params, );
	void (*ProgramLocalParameter4dARB) (GL_ProgramTarget_t target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*ProgramLocalParameter4dvARB) (GL_ProgramTarget_t target, GLuint index, GLdouble *params, );
	void (*ProgramLocalParameter4fARB) (GL_ProgramTarget_t target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*ProgramLocalParameter4fvARB) (GL_ProgramTarget_t target, GLuint index, GLfloat *params, );
	void (*ProgramLocalParameterI4iNV) (GL_ProgramTarget_t target, GLuint index, GLint x, GLint y, GLint z, GLint w, );
	void (*ProgramLocalParameterI4ivNV) (GL_ProgramTarget_t target, GLuint index, GLint *params, );
	void (*ProgramLocalParameterI4uiNV) (GL_ProgramTarget_t target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, );
	void (*ProgramLocalParameterI4uivNV) (GL_ProgramTarget_t target, GLuint index, GLuint *params, );
	void (*ProgramLocalParameters4fvEXT) (GL_ProgramTarget_t target, GLuint index, GLsizei count, GLfloat *params, );
	void (*ProgramLocalParametersI4ivNV) (GL_ProgramTarget_t target, GLuint index, GLsizei count, GLint *params, );
	void (*ProgramLocalParametersI4uivNV) (GL_ProgramTarget_t target, GLuint index, GLsizei count, GLuint *params, );
	void (*ProgramNamedParameter4dNV) (GLuint id, GLsizei len, GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*ProgramNamedParameter4dvNV) (GLuint id, GLsizei len, GLubyte *name, GLdouble *v, );
	void (*ProgramNamedParameter4fNV) (GLuint id, GLsizei len, GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*ProgramNamedParameter4fvNV) (GLuint id, GLsizei len, GLubyte *name, GLfloat *v, );
	void (*ProgramParameter4dNV) (GL_VertexAttribEnumNV_t target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*ProgramParameter4dvNV) (GL_VertexAttribEnumNV_t target, GLuint index, GLdouble *v, );
	void (*ProgramParameter4fNV) (GL_VertexAttribEnumNV_t target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*ProgramParameter4fvNV) (GL_VertexAttribEnumNV_t target, GLuint index, GLfloat *v, );
	void (*ProgramParameteri) (GLuint program, GL_ProgramParameterPName_t pname, GLint value, );
	void (*ProgramParameteriARB) (GLuint program, GL_ProgramParameterPName_t pname, GLint value, );
	void (*ProgramParameteriEXT) (GLuint program, GL_ProgramParameterPName_t pname, GLint value, );
	void (*ProgramParameters4dvNV) (GL_VertexAttribEnumNV_t target, GLuint index, GLsizei count, GLdouble *v, );
	void (*ProgramParameters4fvNV) (GL_VertexAttribEnumNV_t target, GLuint index, GLsizei count, GLfloat *v, );
	void (*ProgramPathFragmentInputGenNV) (GLuint program, GLint location, GLenum genMode, GLint components, GLfloat *coeffs, );
	void (*ProgramStringARB) (GL_ProgramTarget_t target, GL_ProgramFormat_t format, GLsizei len, string, );
	void (*ProgramSubroutineParametersuivNV) (GLenum target, GLsizei count, GLuint *params, );
	void (*ProgramUniform1d) (GLuint program, GLint location, GLdouble v0, );
	void (*ProgramUniform1dEXT) (GLuint program, GLint location, GLdouble x, );
	void (*ProgramUniform1dv) (GLuint program, GLint location, GLsizei count, GLdouble *value, );
	void (*ProgramUniform1dvEXT) (GLuint program, GLint location, GLsizei count, GLdouble *value, );
	void (*ProgramUniform1f) (GLuint program, GLint location, GLfloat v0, );
	void (*ProgramUniform1fEXT) (GLuint program, GLint location, GLfloat v0, );
	void (*ProgramUniform1fv) (GLuint program, GLint location, GLsizei count, GLfloat *value, );
	void (*ProgramUniform1fvEXT) (GLuint program, GLint location, GLsizei count, GLfloat *value, );
	void (*ProgramUniform1i) (GLuint program, GLint location, GLint v0, );
	void (*ProgramUniform1i64ARB) (GLuint program, GLint location, GLint64 x, );
	void (*ProgramUniform1i64NV) (GLuint program, GLint location, GLint64EXT x, );
	void (*ProgramUniform1i64vARB) (GLuint program, GLint location, GLsizei count, GLint64 *value, );
	void (*ProgramUniform1i64vNV) (GLuint program, GLint location, GLsizei count, GLint64EXT *value, );
	void (*ProgramUniform1iEXT) (GLuint program, GLint location, GLint v0, );
	void (*ProgramUniform1iv) (GLuint program, GLint location, GLsizei count, GLint *value, );
	void (*ProgramUniform1ivEXT) (GLuint program, GLint location, GLsizei count, GLint *value, );
	void (*ProgramUniform1ui) (GLuint program, GLint location, GLuint v0, );
	void (*ProgramUniform1ui64ARB) (GLuint program, GLint location, GLuint64 x, );
	void (*ProgramUniform1ui64NV) (GLuint program, GLint location, GLuint64EXT x, );
	void (*ProgramUniform1ui64vARB) (GLuint program, GLint location, GLsizei count, GLuint64 *value, );
	void (*ProgramUniform1ui64vNV) (GLuint program, GLint location, GLsizei count, GLuint64EXT *value, );
	void (*ProgramUniform1uiEXT) (GLuint program, GLint location, GLuint v0, );
	void (*ProgramUniform1uiv) (GLuint program, GLint location, GLsizei count, GLuint *value, );
	void (*ProgramUniform1uivEXT) (GLuint program, GLint location, GLsizei count, GLuint *value, );
	void (*ProgramUniform2d) (GLuint program, GLint location, GLdouble v0, GLdouble v1, );
	void (*ProgramUniform2dEXT) (GLuint program, GLint location, GLdouble x, GLdouble y, );
	void (*ProgramUniform2dv) (GLuint program, GLint location, GLsizei count, GLdouble *value, );
	void (*ProgramUniform2dvEXT) (GLuint program, GLint location, GLsizei count, GLdouble *value, );
	void (*ProgramUniform2f) (GLuint program, GLint location, GLfloat v0, GLfloat v1, );
	void (*ProgramUniform2fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1, );
	void (*ProgramUniform2fv) (GLuint program, GLint location, GLsizei count, GLfloat *value, );
	void (*ProgramUniform2fvEXT) (GLuint program, GLint location, GLsizei count, GLfloat *value, );
	void (*ProgramUniform2i) (GLuint program, GLint location, GLint v0, GLint v1, );
	void (*ProgramUniform2i64ARB) (GLuint program, GLint location, GLint64 x, GLint64 y, );
	void (*ProgramUniform2i64NV) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, );
	void (*ProgramUniform2i64vARB) (GLuint program, GLint location, GLsizei count, GLint64 *value, );
	void (*ProgramUniform2i64vNV) (GLuint program, GLint location, GLsizei count, GLint64EXT *value, );
	void (*ProgramUniform2iEXT) (GLuint program, GLint location, GLint v0, GLint v1, );
	void (*ProgramUniform2iv) (GLuint program, GLint location, GLsizei count, GLint *value, );
	void (*ProgramUniform2ivEXT) (GLuint program, GLint location, GLsizei count, GLint *value, );
	void (*ProgramUniform2ui) (GLuint program, GLint location, GLuint v0, GLuint v1, );
	void (*ProgramUniform2ui64ARB) (GLuint program, GLint location, GLuint64 x, GLuint64 y, );
	void (*ProgramUniform2ui64NV) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, );
	void (*ProgramUniform2ui64vARB) (GLuint program, GLint location, GLsizei count, GLuint64 *value, );
	void (*ProgramUniform2ui64vNV) (GLuint program, GLint location, GLsizei count, GLuint64EXT *value, );
	void (*ProgramUniform2uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1, );
	void (*ProgramUniform2uiv) (GLuint program, GLint location, GLsizei count, GLuint *value, );
	void (*ProgramUniform2uivEXT) (GLuint program, GLint location, GLsizei count, GLuint *value, );
	void (*ProgramUniform3d) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, );
	void (*ProgramUniform3dEXT) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, );
	void (*ProgramUniform3dv) (GLuint program, GLint location, GLsizei count, GLdouble *value, );
	void (*ProgramUniform3dvEXT) (GLuint program, GLint location, GLsizei count, GLdouble *value, );
	void (*ProgramUniform3f) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, );
	void (*ProgramUniform3fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, );
	void (*ProgramUniform3fv) (GLuint program, GLint location, GLsizei count, GLfloat *value, );
	void (*ProgramUniform3fvEXT) (GLuint program, GLint location, GLsizei count, GLfloat *value, );
	void (*ProgramUniform3i) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, );
	void (*ProgramUniform3i64ARB) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, );
	void (*ProgramUniform3i64NV) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, );
	void (*ProgramUniform3i64vARB) (GLuint program, GLint location, GLsizei count, GLint64 *value, );
	void (*ProgramUniform3i64vNV) (GLuint program, GLint location, GLsizei count, GLint64EXT *value, );
	void (*ProgramUniform3iEXT) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, );
	void (*ProgramUniform3iv) (GLuint program, GLint location, GLsizei count, GLint *value, );
	void (*ProgramUniform3ivEXT) (GLuint program, GLint location, GLsizei count, GLint *value, );
	void (*ProgramUniform3ui) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, );
	void (*ProgramUniform3ui64ARB) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, );
	void (*ProgramUniform3ui64NV) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, );
	void (*ProgramUniform3ui64vARB) (GLuint program, GLint location, GLsizei count, GLuint64 *value, );
	void (*ProgramUniform3ui64vNV) (GLuint program, GLint location, GLsizei count, GLuint64EXT *value, );
	void (*ProgramUniform3uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, );
	void (*ProgramUniform3uiv) (GLuint program, GLint location, GLsizei count, GLuint *value, );
	void (*ProgramUniform3uivEXT) (GLuint program, GLint location, GLsizei count, GLuint *value, );
	void (*ProgramUniform4d) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3, );
	void (*ProgramUniform4dEXT) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*ProgramUniform4dv) (GLuint program, GLint location, GLsizei count, GLdouble *value, );
	void (*ProgramUniform4dvEXT) (GLuint program, GLint location, GLsizei count, GLdouble *value, );
	void (*ProgramUniform4f) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, );
	void (*ProgramUniform4fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, );
	void (*ProgramUniform4fv) (GLuint program, GLint location, GLsizei count, GLfloat *value, );
	void (*ProgramUniform4fvEXT) (GLuint program, GLint location, GLsizei count, GLfloat *value, );
	void (*ProgramUniform4i) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, );
	void (*ProgramUniform4i64ARB) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w, );
	void (*ProgramUniform4i64NV) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, );
	void (*ProgramUniform4i64vARB) (GLuint program, GLint location, GLsizei count, GLint64 *value, );
	void (*ProgramUniform4i64vNV) (GLuint program, GLint location, GLsizei count, GLint64EXT *value, );
	void (*ProgramUniform4iEXT) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, );
	void (*ProgramUniform4iv) (GLuint program, GLint location, GLsizei count, GLint *value, );
	void (*ProgramUniform4ivEXT) (GLuint program, GLint location, GLsizei count, GLint *value, );
	void (*ProgramUniform4ui) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, );
	void (*ProgramUniform4ui64ARB) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w, );
	void (*ProgramUniform4ui64NV) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, );
	void (*ProgramUniform4ui64vARB) (GLuint program, GLint location, GLsizei count, GLuint64 *value, );
	void (*ProgramUniform4ui64vNV) (GLuint program, GLint location, GLsizei count, GLuint64EXT *value, );
	void (*ProgramUniform4uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, );
	void (*ProgramUniform4uiv) (GLuint program, GLint location, GLsizei count, GLuint *value, );
	void (*ProgramUniform4uivEXT) (GLuint program, GLint location, GLsizei count, GLuint *value, );
	void (*ProgramUniformHandleui64ARB) (GLuint program, GLint location, GLuint64 value, );
	void (*ProgramUniformHandleui64IMG) (GLuint program, GLint location, GLuint64 value, );
	void (*ProgramUniformHandleui64NV) (GLuint program, GLint location, GLuint64 value, );
	void (*ProgramUniformHandleui64vARB) (GLuint program, GLint location, GLsizei count, GLuint64 *values, );
	void (*ProgramUniformHandleui64vIMG) (GLuint program, GLint location, GLsizei count, GLuint64 *values, );
	void (*ProgramUniformHandleui64vNV) (GLuint program, GLint location, GLsizei count, GLuint64 *values, );
	void (*ProgramUniformMatrix2dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix2dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix2fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix2x3dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix2x3dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix2x3fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix2x3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix2x4dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix2x4dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix2x4fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix2x4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix3dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix3dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix3fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix3x2dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix3x2dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix3x2fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix3x2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix3x4dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix3x4dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix3x4fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix3x4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix4dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix4dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix4fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix4x2dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix4x2dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix4x2fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix4x2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix4x3dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix4x3dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*ProgramUniformMatrix4x3fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformMatrix4x3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*ProgramUniformui64NV) (GLuint program, GLint location, GLuint64EXT value, );
	void (*ProgramUniformui64vNV) (GLuint program, GLint location, GLsizei count, GLuint64EXT *value, );
	void (*ProgramVertexLimitNV) (GL_ProgramTarget_t target, GLint limit, );
	void (*ProvokingVertex) (GL_VertexProvokingMode_t mode, );
	void (*ProvokingVertexEXT) (GL_VertexProvokingMode_t mode, );
	void (*PushAttrib) (GLbitfield mask, );
	void (*PushClientAttrib) (GLbitfield mask, );
	void (*PushClientAttribDefaultEXT) (GLbitfield mask, );
	void (*PushDebugGroup) (GL_DebugSource_t source, GLuint id, GLsizei length, GLchar *message, );
	void (*PushDebugGroupKHR) (GL_DebugSource_t source, GLuint id, GLsizei length, GLchar *message, );
	void (*PushGroupMarkerEXT) (GLsizei length, GLchar *marker, );
	void (*PushMatrix) ();
	void (*PushName) (GLuint name, );
	void (*QueryCounter) (GLuint id, GL_QueryCounterTarget_t target, );
	void (*QueryCounterEXT) (GLuint id, GL_QueryCounterTarget_t target, );
	GLbitfield (*QueryMatrixxOES) (GLfixed *mantissa, GLint *exponent, );
	void (*QueryObjectParameteruiAMD) (GL_QueryTarget_t target, GLuint id, GLenum pname, GLuint param, );
	GLint (*QueryResourceNV) (GLenum queryType, GLint tagId, GLuint count, GLint *buffer, );
	void (*QueryResourceTagNV) (GLint tagId, GLchar *tagString, );
	void (*RasterPos2d) (GLdouble x, GLdouble y, );
	void (*RasterPos2dv) (GLdouble *v, );
	void (*RasterPos2f) (GLfloat x, GLfloat y, );
	void (*RasterPos2fv) (GLfloat *v, );
	void (*RasterPos2i) (GLint x, GLint y, );
	void (*RasterPos2iv) (GLint *v, );
	void (*RasterPos2s) (GLshort x, GLshort y, );
	void (*RasterPos2sv) (GLshort *v, );
	void (*RasterPos2xOES) (GLfixed x, GLfixed y, );
	void (*RasterPos2xvOES) (GLfixed *coords, );
	void (*RasterPos3d) (GLdouble x, GLdouble y, GLdouble z, );
	void (*RasterPos3dv) (GLdouble *v, );
	void (*RasterPos3f) (GLfloat x, GLfloat y, GLfloat z, );
	void (*RasterPos3fv) (GLfloat *v, );
	void (*RasterPos3i) (GLint x, GLint y, GLint z, );
	void (*RasterPos3iv) (GLint *v, );
	void (*RasterPos3s) (GLshort x, GLshort y, GLshort z, );
	void (*RasterPos3sv) (GLshort *v, );
	void (*RasterPos3xOES) (GLfixed x, GLfixed y, GLfixed z, );
	void (*RasterPos3xvOES) (GLfixed *coords, );
	void (*RasterPos4d) (GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*RasterPos4dv) (GLdouble *v, );
	void (*RasterPos4f) (GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*RasterPos4fv) (GLfloat *v, );
	void (*RasterPos4i) (GLint x, GLint y, GLint z, GLint w, );
	void (*RasterPos4iv) (GLint *v, );
	void (*RasterPos4s) (GLshort x, GLshort y, GLshort z, GLshort w, );
	void (*RasterPos4sv) (GLshort *v, );
	void (*RasterPos4xOES) (GLfixed x, GLfixed y, GLfixed z, GLfixed w, );
	void (*RasterPos4xvOES) (GLfixed *coords, );
	void (*RasterSamplesEXT) (GLuint samples, GLboolean fixedsamplelocations, );
	void (*ReadBuffer) (GL_ReadBufferMode_t src, );
	void (*ReadBufferIndexedEXT) (GL_ReadBufferMode_t src, GLint index, );
	void (*ReadBufferNV) (GLenum mode, );
	void (*ReadInstrumentsSGIX) (GLint marker, );
	void (*ReadPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*ReadnPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, data, );
	void (*ReadnPixelsARB) (GLint x, GLint y, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, data, );
	void (*ReadnPixelsEXT) (GLint x, GLint y, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, data, );
	void (*ReadnPixelsKHR) (GLint x, GLint y, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, GLsizei bufSize, data, );
	GLboolean (*ReleaseKeyedMutexWin32EXT) (GLuint memory, GLuint64 key, );
	void (*Rectd) (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2, );
	void (*Rectdv) (GLdouble *v1, GLdouble *v2, );
	void (*Rectf) (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2, );
	void (*Rectfv) (GLfloat *v1, GLfloat *v2, );
	void (*Recti) (GLint x1, GLint y1, GLint x2, GLint y2, );
	void (*Rectiv) (GLint *v1, GLint *v2, );
	void (*Rects) (GLshort x1, GLshort y1, GLshort x2, GLshort y2, );
	void (*Rectsv) (GLshort *v1, GLshort *v2, );
	void (*RectxOES) (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2, );
	void (*RectxvOES) (GLfixed *v1, GLfixed *v2, );
	void (*ReferencePlaneSGIX) (GLdouble *equation, );
	void (*ReleaseShaderCompiler) ();
	void (*RenderGpuMaskNV) (GLbitfield mask, );
	GLint (*RenderMode) (GL_RenderingMode_t mode, );
	void (*RenderbufferStorage) (GL_RenderbufferTarget_t target, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*RenderbufferStorageEXT) (GL_RenderbufferTarget_t target, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*RenderbufferStorageMultisample) (GL_RenderbufferTarget_t target, GLsizei samples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*RenderbufferStorageMultisampleANGLE) (GL_RenderbufferTarget_t target, GLsizei samples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*RenderbufferStorageMultisampleAPPLE) (GL_RenderbufferTarget_t target, GLsizei samples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*RenderbufferStorageMultisampleAdvancedAMD) (GL_RenderbufferTarget_t target, GLsizei samples, GLsizei storageSamples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*RenderbufferStorageMultisampleCoverageNV) (GL_RenderbufferTarget_t target, GLsizei coverageSamples, GLsizei colorSamples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*RenderbufferStorageMultisampleEXT) (GL_RenderbufferTarget_t target, GLsizei samples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*RenderbufferStorageMultisampleIMG) (GL_RenderbufferTarget_t target, GLsizei samples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*RenderbufferStorageMultisampleNV) (GL_RenderbufferTarget_t target, GLsizei samples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*RenderbufferStorageOES) (GL_RenderbufferTarget_t target, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*ReplacementCodePointerSUN) (GL_ReplacementCodeTypeSUN_t type, GLsizei stride, pointer, );
	void (*ReplacementCodeubSUN) (GLubyte code, );
	void (*ReplacementCodeubvSUN) (GLubyte *code, );
	void (*ReplacementCodeuiColor3fVertex3fSUN) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z, );
	void (*ReplacementCodeuiColor3fVertex3fvSUN) (GLuint *rc, GLfloat *c, GLfloat *v, );
	void (*ReplacementCodeuiColor4fNormal3fVertex3fSUN) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, );
	void (*ReplacementCodeuiColor4fNormal3fVertex3fvSUN) (GLuint *rc, GLfloat *c, GLfloat *n, GLfloat *v, );
	void (*ReplacementCodeuiColor4ubVertex3fSUN) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z, );
	void (*ReplacementCodeuiColor4ubVertex3fvSUN) (GLuint *rc, GLubyte *c, GLfloat *v, );
	void (*ReplacementCodeuiNormal3fVertex3fSUN) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, );
	void (*ReplacementCodeuiNormal3fVertex3fvSUN) (GLuint *rc, GLfloat *n, GLfloat *v, );
	void (*ReplacementCodeuiSUN) (GLuint code, );
	void (*ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, );
	void (*ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) (GLuint *rc, GLfloat *tc, GLfloat *c, GLfloat *n, GLfloat *v, );
	void (*ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, );
	void (*ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) (GLuint *rc, GLfloat *tc, GLfloat *n, GLfloat *v, );
	void (*ReplacementCodeuiTexCoord2fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z, );
	void (*ReplacementCodeuiTexCoord2fVertex3fvSUN) (GLuint *rc, GLfloat *tc, GLfloat *v, );
	void (*ReplacementCodeuiVertex3fSUN) (GLuint rc, GLfloat x, GLfloat y, GLfloat z, );
	void (*ReplacementCodeuiVertex3fvSUN) (GLuint *rc, GLfloat *v, );
	void (*ReplacementCodeuivSUN) (GLuint *code, );
	void (*ReplacementCodeusSUN) (GLushort code, );
	void (*ReplacementCodeusvSUN) (GLushort *code, );
	void (*RequestResidentProgramsNV) (GLsizei n, GLuint *programs, );
	void (*ResetHistogram) (GL_HistogramTargetEXT_t target, );
	void (*ResetHistogramEXT) (GL_HistogramTargetEXT_t target, );
	void (*ResetMemoryObjectParameterNV) (GLuint memory, GLenum pname, );
	void (*ResetMinmax) (GL_MinmaxTargetEXT_t target, );
	void (*ResetMinmaxEXT) (GL_MinmaxTargetEXT_t target, );
	void (*ResizeBuffersMESA) ();
	void (*ResolveDepthValuesNV) ();
	void (*ResolveMultisampleFramebufferAPPLE) ();
	void (*ResumeTransformFeedback) ();
	void (*ResumeTransformFeedbackNV) ();
	void (*Rotated) (GLdouble angle, GLdouble x, GLdouble y, GLdouble z, );
	void (*Rotatef) (GLfloat angle, GLfloat x, GLfloat y, GLfloat z, );
	void (*Rotatex) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z, );
	void (*RotatexOES) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z, );
	void (*SampleCoverage) (GLfloat value, GLboolean invert, );
	void (*SampleCoverageARB) (GLfloat value, GLboolean invert, );
	void (*SampleCoveragex) (GLclampx value, GLboolean invert, );
	void (*SampleCoveragexOES) (GLclampx value, GLboolean invert, );
	void (*SampleMapATI) (GLuint dst, GLuint interp, GL_SwizzleOpATI_t swizzle, );
	void (*SampleMaskEXT) (GLclampf value, GLboolean invert, );
	void (*SampleMaskIndexedNV) (GLuint index, GLbitfield mask, );
	void (*SampleMaskSGIS) (GLclampf value, GLboolean invert, );
	void (*SampleMaski) (GLuint maskNumber, GLbitfield mask, );
	void (*SamplePatternEXT) (GL_SamplePatternEXT_t pattern, );
	void (*SamplePatternSGIS) (GL_SamplePatternSGIS_t pattern, );
	void (*SamplerParameterIiv) (GLuint sampler, GL_SamplerParameterI_t pname, GLint *param, );
	void (*SamplerParameterIivEXT) (GLuint sampler, GL_SamplerParameterI_t pname, GLint *param, );
	void (*SamplerParameterIivOES) (GLuint sampler, GL_SamplerParameterI_t pname, GLint *param, );
	void (*SamplerParameterIuiv) (GLuint sampler, GL_SamplerParameterI_t pname, GLuint *param, );
	void (*SamplerParameterIuivEXT) (GLuint sampler, GL_SamplerParameterI_t pname, GLuint *param, );
	void (*SamplerParameterIuivOES) (GLuint sampler, GL_SamplerParameterI_t pname, GLuint *param, );
	void (*SamplerParameterf) (GLuint sampler, GL_SamplerParameterF_t pname, GLfloat param, );
	void (*SamplerParameterfv) (GLuint sampler, GL_SamplerParameterF_t pname, GLfloat *param, );
	void (*SamplerParameteri) (GLuint sampler, GL_SamplerParameterI_t pname, GLint param, );
	void (*SamplerParameteriv) (GLuint sampler, GL_SamplerParameterI_t pname, GLint *param, );
	void (*Scaled) (GLdouble x, GLdouble y, GLdouble z, );
	void (*Scalef) (GLfloat x, GLfloat y, GLfloat z, );
	void (*Scalex) (GLfixed x, GLfixed y, GLfixed z, );
	void (*ScalexOES) (GLfixed x, GLfixed y, GLfixed z, );
	void (*Scissor) (GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*ScissorArrayv) (GLuint first, GLsizei count, GLint *v, );
	void (*ScissorArrayvNV) (GLuint first, GLsizei count, GLint *v, );
	void (*ScissorArrayvOES) (GLuint first, GLsizei count, GLint *v, );
	void (*ScissorExclusiveArrayvNV) (GLuint first, GLsizei count, GLint *v, );
	void (*ScissorExclusiveNV) (GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*ScissorIndexed) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, );
	void (*ScissorIndexedNV) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, );
	void (*ScissorIndexedOES) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, );
	void (*ScissorIndexedv) (GLuint index, GLint *v, );
	void (*ScissorIndexedvNV) (GLuint index, GLint *v, );
	void (*ScissorIndexedvOES) (GLuint index, GLint *v, );
	void (*SecondaryColor3b) (GLbyte red, GLbyte green, GLbyte blue, );
	void (*SecondaryColor3bEXT) (GLbyte red, GLbyte green, GLbyte blue, );
	void (*SecondaryColor3bv) (GLbyte *v, );
	void (*SecondaryColor3bvEXT) (GLbyte *v, );
	void (*SecondaryColor3d) (GLdouble red, GLdouble green, GLdouble blue, );
	void (*SecondaryColor3dEXT) (GLdouble red, GLdouble green, GLdouble blue, );
	void (*SecondaryColor3dv) (GLdouble *v, );
	void (*SecondaryColor3dvEXT) (GLdouble *v, );
	void (*SecondaryColor3f) (GLfloat red, GLfloat green, GLfloat blue, );
	void (*SecondaryColor3fEXT) (GLfloat red, GLfloat green, GLfloat blue, );
	void (*SecondaryColor3fv) (GLfloat *v, );
	void (*SecondaryColor3fvEXT) (GLfloat *v, );
	void (*SecondaryColor3hNV) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, );
	void (*SecondaryColor3hvNV) (GLhalfNV *v, );
	void (*SecondaryColor3i) (GLint red, GLint green, GLint blue, );
	void (*SecondaryColor3iEXT) (GLint red, GLint green, GLint blue, );
	void (*SecondaryColor3iv) (GLint *v, );
	void (*SecondaryColor3ivEXT) (GLint *v, );
	void (*SecondaryColor3s) (GLshort red, GLshort green, GLshort blue, );
	void (*SecondaryColor3sEXT) (GLshort red, GLshort green, GLshort blue, );
	void (*SecondaryColor3sv) (GLshort *v, );
	void (*SecondaryColor3svEXT) (GLshort *v, );
	void (*SecondaryColor3ub) (GLubyte red, GLubyte green, GLubyte blue, );
	void (*SecondaryColor3ubEXT) (GLubyte red, GLubyte green, GLubyte blue, );
	void (*SecondaryColor3ubv) (GLubyte *v, );
	void (*SecondaryColor3ubvEXT) (GLubyte *v, );
	void (*SecondaryColor3ui) (GLuint red, GLuint green, GLuint blue, );
	void (*SecondaryColor3uiEXT) (GLuint red, GLuint green, GLuint blue, );
	void (*SecondaryColor3uiv) (GLuint *v, );
	void (*SecondaryColor3uivEXT) (GLuint *v, );
	void (*SecondaryColor3us) (GLushort red, GLushort green, GLushort blue, );
	void (*SecondaryColor3usEXT) (GLushort red, GLushort green, GLushort blue, );
	void (*SecondaryColor3usv) (GLushort *v, );
	void (*SecondaryColor3usvEXT) (GLushort *v, );
	void (*SecondaryColorFormatNV) (GLint size, GL_ColorPointerType_t type, GLsizei stride, );
	void (*SecondaryColorP3ui) (GL_ColorPointerType_t type, GLuint color, );
	void (*SecondaryColorP3uiv) (GL_ColorPointerType_t type, GLuint *color, );
	void (*SecondaryColorPointer) (GLint size, GL_ColorPointerType_t type, GLsizei stride, pointer, );
	void (*SecondaryColorPointerEXT) (GLint size, GL_ColorPointerType_t type, GLsizei stride, pointer, );
	void (*SecondaryColorPointerListIBM) (GLint size, GL_SecondaryColorPointerTypeIBM_t type, GLint stride, pointer, GLint ptrstride, );
	void (*SelectBuffer) (GLsizei size, GLuint *buffer, );
	void (*SelectPerfMonitorCountersAMD) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList, );
	void (*SemaphoreParameterivNV) (GLuint semaphore, GL_SemaphoreParameterName_t pname, GLint *params, );
	void (*SemaphoreParameterui64vEXT) (GLuint semaphore, GL_SemaphoreParameterName_t pname, GLuint64 *params, );
	void (*SeparableFilter2D) (GL_SeparableTargetEXT_t target, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, row, column, );
	void (*SeparableFilter2DEXT) (GL_SeparableTargetEXT_t target, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, row, column, );
	void (*SetFenceAPPLE) (GLuint fence, );
	void (*SetFenceNV) (GLuint fence, GL_FenceConditionNV_t condition, );
	void (*SetFragmentShaderConstantATI) (GLuint dst, GLfloat *value, );
	void (*SetInvariantEXT) (GLuint id, GL_ScalarType_t type, addr, );
	void (*SetLocalConstantEXT) (GLuint id, GL_ScalarType_t type, addr, );
	void (*SetMultisamplefvAMD) (GLenum pname, GLuint index, GLfloat *val, );
	void (*ShadeModel) (GL_ShadingModel_t mode, );
	void (*ShaderBinary) (GLsizei count, GLuint *shaders, GL_ShaderBinaryFormat_t binaryFormat, binary, GLsizei length, );
	void (*ShaderOp1EXT) (GL_VertexShaderOpEXT_t op, GLuint res, GLuint arg1, );
	void (*ShaderOp2EXT) (GL_VertexShaderOpEXT_t op, GLuint res, GLuint arg1, GLuint arg2, );
	void (*ShaderOp3EXT) (GL_VertexShaderOpEXT_t op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3, );
	void (*ShaderSource) (GLuint shader, GLsizei count, GLchar *const*string, GLint *length, );
	void (*ShaderSourceARB) (GLhandleARB shaderObj, GLsizei count, GLcharARB **string, GLint *length, );
	void (*ShaderStorageBlockBinding) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding, );
	void (*ShadingRateImageBarrierNV) (GLboolean synchronize, );
	void (*ShadingRateQCOM) (GL_ShadingRateQCOM_t rate, );
	void (*ShadingRateImagePaletteNV) (GLuint viewport, GLuint first, GLsizei count, GLenum *rates, );
	void (*ShadingRateSampleOrderNV) (GLenum order, );
	void (*ShadingRateSampleOrderCustomNV) (GLenum rate, GLuint samples, GLint *locations, );
	void (*SharpenTexFuncSGIS) (GL_TextureTarget_t target, GLsizei n, GLfloat *points, );
	void (*SignalSemaphoreEXT) (GLuint semaphore, GLuint numBufferBarriers, GLuint *buffers, GLuint numTextureBarriers, GLuint *textures, GL_TextureLayout_t *dstLayouts, );
	void (*SignalSemaphoreui64NVX) (GLuint signalGpu, GLsizei fenceObjectCount, GLuint *semaphoreArray, GLuint64 *fenceValueArray, );
	void (*SpecializeShader) (GLuint shader, GLchar *pEntryPoint, GLuint numSpecializationConstants, GLuint *pConstantIndex, GLuint *pConstantValue, );
	void (*SpecializeShaderARB) (GLuint shader, GLchar *pEntryPoint, GLuint numSpecializationConstants, GLuint *pConstantIndex, GLuint *pConstantValue, );
	void (*SpriteParameterfSGIX) (GL_SpriteParameterNameSGIX_t pname, GLfloat param, );
	void (*SpriteParameterfvSGIX) (GL_SpriteParameterNameSGIX_t pname, GLfloat *params, );
	void (*SpriteParameteriSGIX) (GL_SpriteParameterNameSGIX_t pname, GLint param, );
	void (*SpriteParameterivSGIX) (GL_SpriteParameterNameSGIX_t pname, GLint *params, );
	void (*StartInstrumentsSGIX) ();
	void (*StartTilingQCOM) (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask, );
	void (*StateCaptureNV) (GLuint state, GLenum mode, );
	void (*StencilClearTagEXT) (GLsizei stencilTagBits, GLuint stencilClearTag, );
	void (*StencilFillPathInstancedNV) (GLsizei numPaths, GL_PathElementType_t pathNameType, paths, GLuint pathBase, GL_PathFillMode_t fillMode, GLuint mask, GL_PathTransformType_t transformType, GLfloat *transformValues, );
	void (*StencilFillPathNV) (GLuint path, GL_PathFillMode_t fillMode, GLuint mask, );
	void (*StencilFunc) (GL_StencilFunction_t func, GLint ref, GLuint mask, );
	void (*StencilFuncSeparate) (GL_StencilFaceDirection_t face, GL_StencilFunction_t func, GLint ref, GLuint mask, );
	void (*StencilFuncSeparateATI) (GL_StencilFunction_t frontfunc, GL_StencilFunction_t backfunc, GLint ref, GLuint mask, );
	void (*StencilMask) (GLuint mask, );
	void (*StencilMaskSeparate) (GL_StencilFaceDirection_t face, GLuint mask, );
	void (*StencilOp) (GL_StencilOp_t fail, GL_StencilOp_t zfail, GL_StencilOp_t zpass, );
	void (*StencilOpSeparate) (GL_StencilFaceDirection_t face, GL_StencilOp_t sfail, GL_StencilOp_t dpfail, GL_StencilOp_t dppass, );
	void (*StencilOpSeparateATI) (GL_StencilFaceDirection_t face, GL_StencilOp_t sfail, GL_StencilOp_t dpfail, GL_StencilOp_t dppass, );
	void (*StencilOpValueAMD) (GL_StencilFaceDirection_t face, GLuint value, );
	void (*StencilStrokePathInstancedNV) (GLsizei numPaths, GL_PathElementType_t pathNameType, paths, GLuint pathBase, GLint reference, GLuint mask, GL_PathTransformType_t transformType, GLfloat *transformValues, );
	void (*StencilStrokePathNV) (GLuint path, GLint reference, GLuint mask, );
	void (*StencilThenCoverFillPathInstancedNV) (GLsizei numPaths, GLenum pathNameType, paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, GLfloat *transformValues, );
	void (*StencilThenCoverFillPathNV) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode, );
	void (*StencilThenCoverStrokePathInstancedNV) (GLsizei numPaths, GLenum pathNameType, paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, GLfloat *transformValues, );
	void (*StencilThenCoverStrokePathNV) (GLuint path, GLint reference, GLuint mask, GLenum coverMode, );
	void (*StopInstrumentsSGIX) (GLint marker, );
	void (*StringMarkerGREMEDY) (GLsizei len, string, );
	void (*SubpixelPrecisionBiasNV) (GLuint xbits, GLuint ybits, );
	void (*SwizzleEXT) (GLuint res, GLuint in, GL_VertexShaderCoordOutEXT_t outX, GL_VertexShaderCoordOutEXT_t outY, GL_VertexShaderCoordOutEXT_t outZ, GL_VertexShaderCoordOutEXT_t outW, );
	void (*SyncTextureINTEL) (GLuint texture, );
	void (*TagSampleBufferSGIX) ();
	void (*Tangent3bEXT) (GLbyte tx, GLbyte ty, GLbyte tz, );
	void (*Tangent3bvEXT) (GLbyte *v, );
	void (*Tangent3dEXT) (GLdouble tx, GLdouble ty, GLdouble tz, );
	void (*Tangent3dvEXT) (GLdouble *v, );
	void (*Tangent3fEXT) (GLfloat tx, GLfloat ty, GLfloat tz, );
	void (*Tangent3fvEXT) (GLfloat *v, );
	void (*Tangent3iEXT) (GLint tx, GLint ty, GLint tz, );
	void (*Tangent3ivEXT) (GLint *v, );
	void (*Tangent3sEXT) (GLshort tx, GLshort ty, GLshort tz, );
	void (*Tangent3svEXT) (GLshort *v, );
	void (*TangentPointerEXT) (GL_TangentPointerTypeEXT_t type, GLsizei stride, pointer, );
	void (*TbufferMask3DFX) (GLuint mask, );
	void (*TessellationFactorAMD) (GLfloat factor, );
	void (*TessellationModeAMD) (GLenum mode, );
	GLboolean (*TestFenceAPPLE) (GLuint fence, );
	GLboolean (*TestFenceNV) (GLuint fence, );
	GLboolean (*TestObjectAPPLE) (GL_ObjectTypeAPPLE_t object, GLuint name, );
	void (*TexAttachMemoryNV) (GL_TextureTarget_t target, GLuint memory, GLuint64 offset, );
	void (*TexBuffer) (GL_TextureTarget_t target, GL_SizedInternalFormat_t internalformat, GLuint buffer, );
	void (*TexBufferARB) (GL_TextureTarget_t target, GL_SizedInternalFormat_t internalformat, GLuint buffer, );
	void (*TexBufferEXT) (GL_TextureTarget_t target, GL_SizedInternalFormat_t internalformat, GLuint buffer, );
	void (*TexBufferOES) (GL_TextureTarget_t target, GL_SizedInternalFormat_t internalformat, GLuint buffer, );
	void (*TexBufferRange) (GL_TextureTarget_t target, GL_SizedInternalFormat_t internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, );
	void (*TexBufferRangeEXT) (GL_TextureTarget_t target, GL_SizedInternalFormat_t internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, );
	void (*TexBufferRangeOES) (GL_TextureTarget_t target, GL_SizedInternalFormat_t internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, );
	void (*TexBumpParameterfvATI) (GL_TexBumpParameterATI_t pname, GLfloat *param, );
	void (*TexBumpParameterivATI) (GL_TexBumpParameterATI_t pname, GLint *param, );
	void (*TexCoord1bOES) (GLbyte s, );
	void (*TexCoord1bvOES) (GLbyte *coords, );
	void (*TexCoord1d) (GLdouble s, );
	void (*TexCoord1dv) (GLdouble *v, );
	void (*TexCoord1f) (GLfloat s, );
	void (*TexCoord1fv) (GLfloat *v, );
	void (*TexCoord1hNV) (GLhalfNV s, );
	void (*TexCoord1hvNV) (GLhalfNV *v, );
	void (*TexCoord1i) (GLint s, );
	void (*TexCoord1iv) (GLint *v, );
	void (*TexCoord1s) (GLshort s, );
	void (*TexCoord1sv) (GLshort *v, );
	void (*TexCoord1xOES) (GLfixed s, );
	void (*TexCoord1xvOES) (GLfixed *coords, );
	void (*TexCoord2bOES) (GLbyte s, GLbyte t, );
	void (*TexCoord2bvOES) (GLbyte *coords, );
	void (*TexCoord2d) (GLdouble s, GLdouble t, );
	void (*TexCoord2dv) (GLdouble *v, );
	void (*TexCoord2f) (GLfloat s, GLfloat t, );
	void (*TexCoord2fColor3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z, );
	void (*TexCoord2fColor3fVertex3fvSUN) (GLfloat *tc, GLfloat *c, GLfloat *v, );
	void (*TexCoord2fColor4fNormal3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, );
	void (*TexCoord2fColor4fNormal3fVertex3fvSUN) (GLfloat *tc, GLfloat *c, GLfloat *n, GLfloat *v, );
	void (*TexCoord2fColor4ubVertex3fSUN) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z, );
	void (*TexCoord2fColor4ubVertex3fvSUN) (GLfloat *tc, GLubyte *c, GLfloat *v, );
	void (*TexCoord2fNormal3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, );
	void (*TexCoord2fNormal3fVertex3fvSUN) (GLfloat *tc, GLfloat *n, GLfloat *v, );
	void (*TexCoord2fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z, );
	void (*TexCoord2fVertex3fvSUN) (GLfloat *tc, GLfloat *v, );
	void (*TexCoord2fv) (GLfloat *v, );
	void (*TexCoord2hNV) (GLhalfNV s, GLhalfNV t, );
	void (*TexCoord2hvNV) (GLhalfNV *v, );
	void (*TexCoord2i) (GLint s, GLint t, );
	void (*TexCoord2iv) (GLint *v, );
	void (*TexCoord2s) (GLshort s, GLshort t, );
	void (*TexCoord2sv) (GLshort *v, );
	void (*TexCoord2xOES) (GLfixed s, GLfixed t, );
	void (*TexCoord2xvOES) (GLfixed *coords, );
	void (*TexCoord3bOES) (GLbyte s, GLbyte t, GLbyte r, );
	void (*TexCoord3bvOES) (GLbyte *coords, );
	void (*TexCoord3d) (GLdouble s, GLdouble t, GLdouble r, );
	void (*TexCoord3dv) (GLdouble *v, );
	void (*TexCoord3f) (GLfloat s, GLfloat t, GLfloat r, );
	void (*TexCoord3fv) (GLfloat *v, );
	void (*TexCoord3hNV) (GLhalfNV s, GLhalfNV t, GLhalfNV r, );
	void (*TexCoord3hvNV) (GLhalfNV *v, );
	void (*TexCoord3i) (GLint s, GLint t, GLint r, );
	void (*TexCoord3iv) (GLint *v, );
	void (*TexCoord3s) (GLshort s, GLshort t, GLshort r, );
	void (*TexCoord3sv) (GLshort *v, );
	void (*TexCoord3xOES) (GLfixed s, GLfixed t, GLfixed r, );
	void (*TexCoord3xvOES) (GLfixed *coords, );
	void (*TexCoord4bOES) (GLbyte s, GLbyte t, GLbyte r, GLbyte q, );
	void (*TexCoord4bvOES) (GLbyte *coords, );
	void (*TexCoord4d) (GLdouble s, GLdouble t, GLdouble r, GLdouble q, );
	void (*TexCoord4dv) (GLdouble *v, );
	void (*TexCoord4f) (GLfloat s, GLfloat t, GLfloat r, GLfloat q, );
	void (*TexCoord4fColor4fNormal3fVertex4fSUN) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*TexCoord4fColor4fNormal3fVertex4fvSUN) (GLfloat *tc, GLfloat *c, GLfloat *n, GLfloat *v, );
	void (*TexCoord4fVertex4fSUN) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*TexCoord4fVertex4fvSUN) (GLfloat *tc, GLfloat *v, );
	void (*TexCoord4fv) (GLfloat *v, );
	void (*TexCoord4hNV) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q, );
	void (*TexCoord4hvNV) (GLhalfNV *v, );
	void (*TexCoord4i) (GLint s, GLint t, GLint r, GLint q, );
	void (*TexCoord4iv) (GLint *v, );
	void (*TexCoord4s) (GLshort s, GLshort t, GLshort r, GLshort q, );
	void (*TexCoord4sv) (GLshort *v, );
	void (*TexCoord4xOES) (GLfixed s, GLfixed t, GLfixed r, GLfixed q, );
	void (*TexCoord4xvOES) (GLfixed *coords, );
	void (*TexCoordFormatNV) (GLint size, GLenum type, GLsizei stride, );
	void (*TexCoordP1ui) (GL_TexCoordPointerType_t type, GLuint coords, );
	void (*TexCoordP1uiv) (GL_TexCoordPointerType_t type, GLuint *coords, );
	void (*TexCoordP2ui) (GL_TexCoordPointerType_t type, GLuint coords, );
	void (*TexCoordP2uiv) (GL_TexCoordPointerType_t type, GLuint *coords, );
	void (*TexCoordP3ui) (GL_TexCoordPointerType_t type, GLuint coords, );
	void (*TexCoordP3uiv) (GL_TexCoordPointerType_t type, GLuint *coords, );
	void (*TexCoordP4ui) (GL_TexCoordPointerType_t type, GLuint coords, );
	void (*TexCoordP4uiv) (GL_TexCoordPointerType_t type, GLuint *coords, );
	void (*TexCoordPointer) (GLint size, GL_TexCoordPointerType_t type, GLsizei stride, pointer, );
	void (*TexCoordPointerEXT) (GLint size, GL_TexCoordPointerType_t type, GLsizei stride, GLsizei count, pointer, );
	void (*TexCoordPointerListIBM) (GLint size, GL_TexCoordPointerType_t type, GLint stride, pointer, GLint ptrstride, );
	void (*TexCoordPointervINTEL) (GLint size, GL_VertexPointerType_t type, pointer, );
	void (*TexEnvf) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfloat param, );
	void (*TexEnvfv) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfloat *params, );
	void (*TexEnvi) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLint param, );
	void (*TexEnviv) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLint *params, );
	void (*TexEnvx) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfixed param, );
	void (*TexEnvxOES) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfixed param, );
	void (*TexEnvxv) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfixed *params, );
	void (*TexEnvxvOES) (GL_TextureEnvTarget_t target, GL_TextureEnvParameter_t pname, GLfixed *params, );
	void (*TexEstimateMotionQCOM) (GLuint ref, GLuint target, GLuint output, );
	void (*TexEstimateMotionRegionsQCOM) (GLuint ref, GLuint target, GLuint output, GLuint mask, );
	void (*ExtrapolateTex2DQCOM) (GLuint src1, GLuint src2, GLuint output, GLfloat scaleFactor, );
	void (*TexFilterFuncSGIS) (GL_TextureTarget_t target, GL_TextureFilterSGIS_t filter, GLsizei n, GLfloat *weights, );
	void (*TexGend) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLdouble param, );
	void (*TexGendv) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLdouble *params, );
	void (*TexGenf) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfloat param, );
	void (*TexGenfOES) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfloat param, );
	void (*TexGenfv) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfloat *params, );
	void (*TexGenfvOES) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfloat *params, );
	void (*TexGeni) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLint param, );
	void (*TexGeniOES) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLint param, );
	void (*TexGeniv) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLint *params, );
	void (*TexGenivOES) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLint *params, );
	void (*TexGenxOES) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfixed param, );
	void (*TexGenxvOES) (GL_TextureCoordName_t coord, GL_TextureGenParameter_t pname, GLfixed *params, );
	void (*TexImage1D) (GL_TextureTarget_t target, GLint level, GLint internalformat, GLsizei width, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexImage2D) (GL_TextureTarget_t target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexImage2DMultisample) (GL_TextureTarget_t target, GLsizei samples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, );
	void (*TexImage2DMultisampleCoverageNV) (GL_TextureTarget_t target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, );
	void (*TexImage3D) (GL_TextureTarget_t target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexImage3DEXT) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexImage3DMultisample) (GL_TextureTarget_t target, GLsizei samples, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, );
	void (*TexImage3DMultisampleCoverageNV) (GL_TextureTarget_t target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, );
	void (*TexImage3DOES) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexImage4DSGIS) (GL_TextureTarget_t target, GLint level, GL_InternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexPageCommitmentARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, );
	void (*TexPageCommitmentEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, );
	void (*TexPageCommitmentMemNV) (GL_TextureTarget_t target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit, );
	void (*TexParameterIiv) (GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint *params, );
	void (*TexParameterIivEXT) (GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint *params, );
	void (*TexParameterIivOES) (GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint *params, );
	void (*TexParameterIuiv) (GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLuint *params, );
	void (*TexParameterIuivEXT) (GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLuint *params, );
	void (*TexParameterIuivOES) (GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLuint *params, );
	void (*TexParameterf) (GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLfloat param, );
	void (*TexParameterfv) (GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLfloat *params, );
	void (*TexParameteri) (GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint param, );
	void (*TexParameteriv) (GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint *params, );
	void (*TexParameterx) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLfixed param, );
	void (*TexParameterxOES) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLfixed param, );
	void (*TexParameterxv) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLfixed *params, );
	void (*TexParameterxvOES) (GL_TextureTarget_t target, GL_GetTextureParameter_t pname, GLfixed *params, );
	void (*TexRenderbufferNV) (GL_TextureTarget_t target, GLuint renderbuffer, );
	void (*TexStorage1D) (GL_TextureTarget_t target, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, );
	void (*TexStorage1DEXT) (GL_TextureTarget_t target, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, );
	void (*TexStorage2D) (GL_TextureTarget_t target, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*TexStorage2DEXT) (GL_TextureTarget_t target, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*TexStorage2DMultisample) (GL_TextureTarget_t target, GLsizei samples, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, );
	void (*TexStorage3D) (GL_TextureTarget_t target, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, );
	void (*TexStorage3DEXT) (GL_TextureTarget_t target, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, );
	void (*TexStorage3DMultisample) (GL_TextureTarget_t target, GLsizei samples, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, );
	void (*TexStorage3DMultisampleOES) (GL_TextureTarget_t target, GLsizei samples, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, );
	void (*TexStorageMem1DEXT) (GL_TextureTarget_t target, GLsizei levels, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLuint memory, GLuint64 offset, );
	void (*TexStorageMem2DEXT) (GL_TextureTarget_t target, GLsizei levels, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset, );
	void (*TexStorageMem2DMultisampleEXT) (GL_TextureTarget_t target, GLsizei samples, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, );
	void (*TexStorageMem3DEXT) (GL_TextureTarget_t target, GLsizei levels, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, );
	void (*TexStorageMem3DMultisampleEXT) (GL_TextureTarget_t target, GLsizei samples, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, );
	void (*TexStorageSparseAMD) (GL_TextureTarget_t target, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags, );
	void (*TexSubImage1D) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLsizei width, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexSubImage1DEXT) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLsizei width, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexSubImage2D) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexSubImage2DEXT) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexSubImage3D) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexSubImage3DEXT) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexSubImage3DOES) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TexSubImage4DSGIS) (GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TextureAttachMemoryNV) (GLuint texture, GLuint memory, GLuint64 offset, );
	void (*TextureBarrier) ();
	void (*TextureBarrierNV) ();
	void (*TextureBuffer) (GLuint texture, GL_SizedInternalFormat_t internalformat, GLuint buffer, );
	void (*TextureBufferEXT) (GLuint texture, GL_TextureTarget_t target, GL_SizedInternalFormat_t internalformat, GLuint buffer, );
	void (*TextureBufferRange) (GLuint texture, GL_SizedInternalFormat_t internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, );
	void (*TextureBufferRangeEXT) (GLuint texture, GL_TextureTarget_t target, GL_SizedInternalFormat_t internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, );
	void (*TextureColorMaskSGIS) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, );
	void (*TextureFoveationParametersQCOM) (GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea, );
	void (*TextureImage1DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint internalformat, GLsizei width, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TextureImage2DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TextureImage2DMultisampleCoverageNV) (GLuint texture, GL_TextureTarget_t target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, );
	void (*TextureImage2DMultisampleNV) (GLuint texture, GL_TextureTarget_t target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, );
	void (*TextureImage3DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TextureImage3DMultisampleCoverageNV) (GLuint texture, GL_TextureTarget_t target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, );
	void (*TextureImage3DMultisampleNV) (GLuint texture, GL_TextureTarget_t target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, );
	void (*TextureLightEXT) (GL_LightTexturePNameEXT_t pname, );
	void (*TextureMaterialEXT) (GL_MaterialFace_t face, GL_MaterialParameter_t mode, );
	void (*TextureNormalEXT) (GL_TextureNormalModeEXT_t mode, );
	void (*TexturePageCommitmentEXT) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, );
	void (*TexturePageCommitmentMemNV) (GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit, );
	void (*TextureParameterIiv) (GLuint texture, GL_TextureParameterName_t pname, GLint *params, );
	void (*TextureParameterIivEXT) (GLuint texture, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint *params, );
	void (*TextureParameterIuiv) (GLuint texture, GL_TextureParameterName_t pname, GLuint *params, );
	void (*TextureParameterIuivEXT) (GLuint texture, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLuint *params, );
	void (*TextureParameterf) (GLuint texture, GL_TextureParameterName_t pname, GLfloat param, );
	void (*TextureParameterfEXT) (GLuint texture, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLfloat param, );
	void (*TextureParameterfv) (GLuint texture, GL_TextureParameterName_t pname, GLfloat *param, );
	void (*TextureParameterfvEXT) (GLuint texture, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLfloat *params, );
	void (*TextureParameteri) (GLuint texture, GL_TextureParameterName_t pname, GLint param, );
	void (*TextureParameteriEXT) (GLuint texture, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint param, );
	void (*TextureParameteriv) (GLuint texture, GL_TextureParameterName_t pname, GLint *param, );
	void (*TextureParameterivEXT) (GLuint texture, GL_TextureTarget_t target, GL_TextureParameterName_t pname, GLint *params, );
	void (*TextureRangeAPPLE) (GLenum target, GLsizei length, pointer, );
	void (*TextureRenderbufferEXT) (GLuint texture, GL_TextureTarget_t target, GLuint renderbuffer, );
	void (*TextureStorage1D) (GLuint texture, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, );
	void (*TextureStorage1DEXT) (GLuint texture, GLenum target, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, );
	void (*TextureStorage2D) (GLuint texture, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*TextureStorage2DEXT) (GLuint texture, GLenum target, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, );
	void (*TextureStorage2DMultisample) (GLuint texture, GLsizei samples, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, );
	void (*TextureStorage2DMultisampleEXT) (GLuint texture, GL_TextureTarget_t target, GLsizei samples, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, );
	void (*TextureStorage3D) (GLuint texture, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, );
	void (*TextureStorage3DEXT) (GLuint texture, GLenum target, GLsizei levels, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, );
	void (*TextureStorage3DMultisample) (GLuint texture, GLsizei samples, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, );
	void (*TextureStorage3DMultisampleEXT) (GLuint texture, GLenum target, GLsizei samples, GL_SizedInternalFormat_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, );
	void (*TextureStorageMem1DEXT) (GLuint texture, GLsizei levels, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLuint memory, GLuint64 offset, );
	void (*TextureStorageMem2DEXT) (GLuint texture, GLsizei levels, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset, );
	void (*TextureStorageMem2DMultisampleEXT) (GLuint texture, GLsizei samples, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, );
	void (*TextureStorageMem3DEXT) (GLuint texture, GLsizei levels, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, );
	void (*TextureStorageMem3DMultisampleEXT) (GLuint texture, GLsizei samples, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, );
	void (*TextureStorageSparseAMD) (GLuint texture, GLenum target, GL_SizedInternalFormat_t internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags, );
	void (*TextureSubImage1D) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TextureSubImage1DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint xoffset, GLsizei width, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TextureSubImage2D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TextureSubImage2DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TextureSubImage3D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TextureSubImage3DEXT) (GLuint texture, GL_TextureTarget_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL_PixelFormat_t format, GL_PixelType_t type, pixels, );
	void (*TextureView) (GLuint texture, GL_TextureTarget_t target, GLuint origtexture, GL_SizedInternalFormat_t internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, );
	void (*TextureViewEXT) (GLuint texture, GL_TextureTarget_t target, GLuint origtexture, GL_SizedInternalFormat_t internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, );
	void (*TextureViewOES) (GLuint texture, GL_TextureTarget_t target, GLuint origtexture, GL_SizedInternalFormat_t internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, );
	void (*TrackMatrixNV) (GL_VertexAttribEnumNV_t target, GLuint address, GL_VertexAttribEnumNV_t matrix, GL_VertexAttribEnumNV_t transform, );
	void (*TransformFeedbackAttribsNV) (GLsizei count, GLint *attribs, GLenum bufferMode, );
	void (*TransformFeedbackBufferBase) (GLuint xfb, GLuint index, GLuint buffer, );
	void (*TransformFeedbackBufferRange) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, );
	void (*TransformFeedbackStreamAttribsNV) (GLsizei count, GLint *attribs, GLsizei nbuffers, GLint *bufstreams, GLenum bufferMode, );
	void (*TransformFeedbackVaryings) (GLuint program, GLsizei count, GLchar *const*varyings, GL_TransformFeedbackBufferMode_t bufferMode, );
	void (*TransformFeedbackVaryingsEXT) (GLuint program, GLsizei count, GLchar *const*varyings, GLenum bufferMode, );
	void (*TransformFeedbackVaryingsNV) (GLuint program, GLsizei count, GLint *locations, GLenum bufferMode, );
	void (*TransformPathNV) (GLuint resultPath, GLuint srcPath, GL_PathTransformType_t transformType, GLfloat *transformValues, );
	void (*Translated) (GLdouble x, GLdouble y, GLdouble z, );
	void (*Translatef) (GLfloat x, GLfloat y, GLfloat z, );
	void (*Translatex) (GLfixed x, GLfixed y, GLfixed z, );
	void (*TranslatexOES) (GLfixed x, GLfixed y, GLfixed z, );
	void (*Uniform1d) (GLint location, GLdouble x, );
	void (*Uniform1dv) (GLint location, GLsizei count, GLdouble *value, );
	void (*Uniform1f) (GLint location, GLfloat v0, );
	void (*Uniform1fARB) (GLint location, GLfloat v0, );
	void (*Uniform1fv) (GLint location, GLsizei count, GLfloat *value, );
	void (*Uniform1fvARB) (GLint location, GLsizei count, GLfloat *value, );
	void (*Uniform1i) (GLint location, GLint v0, );
	void (*Uniform1i64ARB) (GLint location, GLint64 x, );
	void (*Uniform1i64NV) (GLint location, GLint64EXT x, );
	void (*Uniform1i64vARB) (GLint location, GLsizei count, GLint64 *value, );
	void (*Uniform1i64vNV) (GLint location, GLsizei count, GLint64EXT *value, );
	void (*Uniform1iARB) (GLint location, GLint v0, );
	void (*Uniform1iv) (GLint location, GLsizei count, GLint *value, );
	void (*Uniform1ivARB) (GLint location, GLsizei count, GLint *value, );
	void (*Uniform1ui) (GLint location, GLuint v0, );
	void (*Uniform1ui64ARB) (GLint location, GLuint64 x, );
	void (*Uniform1ui64NV) (GLint location, GLuint64EXT x, );
	void (*Uniform1ui64vARB) (GLint location, GLsizei count, GLuint64 *value, );
	void (*Uniform1ui64vNV) (GLint location, GLsizei count, GLuint64EXT *value, );
	void (*Uniform1uiEXT) (GLint location, GLuint v0, );
	void (*Uniform1uiv) (GLint location, GLsizei count, GLuint *value, );
	void (*Uniform1uivEXT) (GLint location, GLsizei count, GLuint *value, );
	void (*Uniform2d) (GLint location, GLdouble x, GLdouble y, );
	void (*Uniform2dv) (GLint location, GLsizei count, GLdouble *value, );
	void (*Uniform2f) (GLint location, GLfloat v0, GLfloat v1, );
	void (*Uniform2fARB) (GLint location, GLfloat v0, GLfloat v1, );
	void (*Uniform2fv) (GLint location, GLsizei count, GLfloat *value, );
	void (*Uniform2fvARB) (GLint location, GLsizei count, GLfloat *value, );
	void (*Uniform2i) (GLint location, GLint v0, GLint v1, );
	void (*Uniform2i64ARB) (GLint location, GLint64 x, GLint64 y, );
	void (*Uniform2i64NV) (GLint location, GLint64EXT x, GLint64EXT y, );
	void (*Uniform2i64vARB) (GLint location, GLsizei count, GLint64 *value, );
	void (*Uniform2i64vNV) (GLint location, GLsizei count, GLint64EXT *value, );
	void (*Uniform2iARB) (GLint location, GLint v0, GLint v1, );
	void (*Uniform2iv) (GLint location, GLsizei count, GLint *value, );
	void (*Uniform2ivARB) (GLint location, GLsizei count, GLint *value, );
	void (*Uniform2ui) (GLint location, GLuint v0, GLuint v1, );
	void (*Uniform2ui64ARB) (GLint location, GLuint64 x, GLuint64 y, );
	void (*Uniform2ui64NV) (GLint location, GLuint64EXT x, GLuint64EXT y, );
	void (*Uniform2ui64vARB) (GLint location, GLsizei count, GLuint64 *value, );
	void (*Uniform2ui64vNV) (GLint location, GLsizei count, GLuint64EXT *value, );
	void (*Uniform2uiEXT) (GLint location, GLuint v0, GLuint v1, );
	void (*Uniform2uiv) (GLint location, GLsizei count, GLuint *value, );
	void (*Uniform2uivEXT) (GLint location, GLsizei count, GLuint *value, );
	void (*Uniform3d) (GLint location, GLdouble x, GLdouble y, GLdouble z, );
	void (*Uniform3dv) (GLint location, GLsizei count, GLdouble *value, );
	void (*Uniform3f) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, );
	void (*Uniform3fARB) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, );
	void (*Uniform3fv) (GLint location, GLsizei count, GLfloat *value, );
	void (*Uniform3fvARB) (GLint location, GLsizei count, GLfloat *value, );
	void (*Uniform3i) (GLint location, GLint v0, GLint v1, GLint v2, );
	void (*Uniform3i64ARB) (GLint location, GLint64 x, GLint64 y, GLint64 z, );
	void (*Uniform3i64NV) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, );
	void (*Uniform3i64vARB) (GLint location, GLsizei count, GLint64 *value, );
	void (*Uniform3i64vNV) (GLint location, GLsizei count, GLint64EXT *value, );
	void (*Uniform3iARB) (GLint location, GLint v0, GLint v1, GLint v2, );
	void (*Uniform3iv) (GLint location, GLsizei count, GLint *value, );
	void (*Uniform3ivARB) (GLint location, GLsizei count, GLint *value, );
	void (*Uniform3ui) (GLint location, GLuint v0, GLuint v1, GLuint v2, );
	void (*Uniform3ui64ARB) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, );
	void (*Uniform3ui64NV) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, );
	void (*Uniform3ui64vARB) (GLint location, GLsizei count, GLuint64 *value, );
	void (*Uniform3ui64vNV) (GLint location, GLsizei count, GLuint64EXT *value, );
	void (*Uniform3uiEXT) (GLint location, GLuint v0, GLuint v1, GLuint v2, );
	void (*Uniform3uiv) (GLint location, GLsizei count, GLuint *value, );
	void (*Uniform3uivEXT) (GLint location, GLsizei count, GLuint *value, );
	void (*Uniform4d) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*Uniform4dv) (GLint location, GLsizei count, GLdouble *value, );
	void (*Uniform4f) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, );
	void (*Uniform4fARB) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, );
	void (*Uniform4fv) (GLint location, GLsizei count, GLfloat *value, );
	void (*Uniform4fvARB) (GLint location, GLsizei count, GLfloat *value, );
	void (*Uniform4i) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3, );
	void (*Uniform4i64ARB) (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w, );
	void (*Uniform4i64NV) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, );
	void (*Uniform4i64vARB) (GLint location, GLsizei count, GLint64 *value, );
	void (*Uniform4i64vNV) (GLint location, GLsizei count, GLint64EXT *value, );
	void (*Uniform4iARB) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3, );
	void (*Uniform4iv) (GLint location, GLsizei count, GLint *value, );
	void (*Uniform4ivARB) (GLint location, GLsizei count, GLint *value, );
	void (*Uniform4ui) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, );
	void (*Uniform4ui64ARB) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w, );
	void (*Uniform4ui64NV) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, );
	void (*Uniform4ui64vARB) (GLint location, GLsizei count, GLuint64 *value, );
	void (*Uniform4ui64vNV) (GLint location, GLsizei count, GLuint64EXT *value, );
	void (*Uniform4uiEXT) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, );
	void (*Uniform4uiv) (GLint location, GLsizei count, GLuint *value, );
	void (*Uniform4uivEXT) (GLint location, GLsizei count, GLuint *value, );
	void (*UniformBlockBinding) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, );
	void (*UniformBufferEXT) (GLuint program, GLint location, GLuint buffer, );
	void (*UniformHandleui64ARB) (GLint location, GLuint64 value, );
	void (*UniformHandleui64IMG) (GLint location, GLuint64 value, );
	void (*UniformHandleui64NV) (GLint location, GLuint64 value, );
	void (*UniformHandleui64vARB) (GLint location, GLsizei count, GLuint64 *value, );
	void (*UniformHandleui64vIMG) (GLint location, GLsizei count, GLuint64 *value, );
	void (*UniformHandleui64vNV) (GLint location, GLsizei count, GLuint64 *value, );
	void (*UniformMatrix2dv) (GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*UniformMatrix2fv) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix2fvARB) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix2x3dv) (GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*UniformMatrix2x3fv) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix2x3fvNV) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix2x4dv) (GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*UniformMatrix2x4fv) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix2x4fvNV) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix3dv) (GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*UniformMatrix3fv) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix3fvARB) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix3x2dv) (GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*UniformMatrix3x2fv) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix3x2fvNV) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix3x4dv) (GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*UniformMatrix3x4fv) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix3x4fvNV) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix4dv) (GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*UniformMatrix4fv) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix4fvARB) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix4x2dv) (GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*UniformMatrix4x2fv) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix4x2fvNV) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix4x3dv) (GLint location, GLsizei count, GLboolean transpose, GLdouble *value, );
	void (*UniformMatrix4x3fv) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformMatrix4x3fvNV) (GLint location, GLsizei count, GLboolean transpose, GLfloat *value, );
	void (*UniformSubroutinesuiv) (GL_ShaderType_t shadertype, GLsizei count, GLuint *indices, );
	void (*Uniformui64NV) (GLint location, GLuint64EXT value, );
	void (*Uniformui64vNV) (GLint location, GLsizei count, GLuint64EXT *value, );
	void (*UnlockArraysEXT) ();
	GLboolean (*UnmapBuffer) (GL_BufferTargetARB_t target, );
	GLboolean (*UnmapBufferARB) (GL_BufferTargetARB_t target, );
	GLboolean (*UnmapBufferOES) (GLenum target, );
	GLboolean (*UnmapNamedBuffer) (GLuint buffer, );
	GLboolean (*UnmapNamedBufferEXT) (GLuint buffer, );
	void (*UnmapObjectBufferATI) (GLuint buffer, );
	void (*UnmapTexture2DINTEL) (GLuint texture, GLint level, );
	void (*UpdateObjectBufferATI) (GLuint buffer, GLuint offset, GLsizei size, pointer, GL_PreserveModeATI_t preserve, );
	void (*UploadGpuMaskNVX) (GLbitfield mask, );
	void (*UseProgram) (GLuint program, );
	void (*UseProgramObjectARB) (GLhandleARB programObj, );
	void (*UseProgramStages) (GLuint pipeline, GLbitfield stages, GLuint program, );
	void (*UseProgramStagesEXT) (GLuint pipeline, GLbitfield stages, GLuint program, );
	void (*UseShaderProgramEXT) (GLenum type, GLuint program, );
	void (*VDPAUFiniNV) ();
	void (*VDPAUGetSurfaceivNV) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei *length, GLint *values, );
	void (*VDPAUInitNV) (vdpDevice, getProcAddress, );
	GLboolean (*VDPAUIsSurfaceNV) (GLvdpauSurfaceNV surface, );
	void (*VDPAUMapSurfacesNV) (GLsizei numSurfaces, GLvdpauSurfaceNV *surfaces, );
	GLvdpauSurfaceNV (*VDPAURegisterOutputSurfaceNV) (vdpSurface, GLenum target, GLsizei numTextureNames, GLuint *textureNames, );
	GLvdpauSurfaceNV (*VDPAURegisterVideoSurfaceNV) (vdpSurface, GLenum target, GLsizei numTextureNames, GLuint *textureNames, );
	GLvdpauSurfaceNV (*VDPAURegisterVideoSurfaceWithPictureStructureNV) (vdpSurface, GLenum target, GLsizei numTextureNames, GLuint *textureNames, GLboolean isFrameStructure, );
	void (*VDPAUSurfaceAccessNV) (GLvdpauSurfaceNV surface, GLenum access, );
	void (*VDPAUUnmapSurfacesNV) (GLsizei numSurface, GLvdpauSurfaceNV *surfaces, );
	void (*VDPAUUnregisterSurfaceNV) (GLvdpauSurfaceNV surface, );
	void (*ValidateProgram) (GLuint program, );
	void (*ValidateProgramARB) (GLhandleARB programObj, );
	void (*ValidateProgramPipeline) (GLuint pipeline, );
	void (*ValidateProgramPipelineEXT) (GLuint pipeline, );
	void (*VariantArrayObjectATI) (GLuint id, GL_ScalarType_t type, GLsizei stride, GLuint buffer, GLuint offset, );
	void (*VariantPointerEXT) (GLuint id, GL_ScalarType_t type, GLuint stride, addr, );
	void (*VariantbvEXT) (GLuint id, GLbyte *addr, );
	void (*VariantdvEXT) (GLuint id, GLdouble *addr, );
	void (*VariantfvEXT) (GLuint id, GLfloat *addr, );
	void (*VariantivEXT) (GLuint id, GLint *addr, );
	void (*VariantsvEXT) (GLuint id, GLshort *addr, );
	void (*VariantubvEXT) (GLuint id, GLubyte *addr, );
	void (*VariantuivEXT) (GLuint id, GLuint *addr, );
	void (*VariantusvEXT) (GLuint id, GLushort *addr, );
	void (*Vertex2bOES) (GLbyte x, GLbyte y, );
	void (*Vertex2bvOES) (GLbyte *coords, );
	void (*Vertex2d) (GLdouble x, GLdouble y, );
	void (*Vertex2dv) (GLdouble *v, );
	void (*Vertex2f) (GLfloat x, GLfloat y, );
	void (*Vertex2fv) (GLfloat *v, );
	void (*Vertex2hNV) (GLhalfNV x, GLhalfNV y, );
	void (*Vertex2hvNV) (GLhalfNV *v, );
	void (*Vertex2i) (GLint x, GLint y, );
	void (*Vertex2iv) (GLint *v, );
	void (*Vertex2s) (GLshort x, GLshort y, );
	void (*Vertex2sv) (GLshort *v, );
	void (*Vertex2xOES) (GLfixed x, );
	void (*Vertex2xvOES) (GLfixed *coords, );
	void (*Vertex3bOES) (GLbyte x, GLbyte y, GLbyte z, );
	void (*Vertex3bvOES) (GLbyte *coords, );
	void (*Vertex3d) (GLdouble x, GLdouble y, GLdouble z, );
	void (*Vertex3dv) (GLdouble *v, );
	void (*Vertex3f) (GLfloat x, GLfloat y, GLfloat z, );
	void (*Vertex3fv) (GLfloat *v, );
	void (*Vertex3hNV) (GLhalfNV x, GLhalfNV y, GLhalfNV z, );
	void (*Vertex3hvNV) (GLhalfNV *v, );
	void (*Vertex3i) (GLint x, GLint y, GLint z, );
	void (*Vertex3iv) (GLint *v, );
	void (*Vertex3s) (GLshort x, GLshort y, GLshort z, );
	void (*Vertex3sv) (GLshort *v, );
	void (*Vertex3xOES) (GLfixed x, GLfixed y, );
	void (*Vertex3xvOES) (GLfixed *coords, );
	void (*Vertex4bOES) (GLbyte x, GLbyte y, GLbyte z, GLbyte w, );
	void (*Vertex4bvOES) (GLbyte *coords, );
	void (*Vertex4d) (GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*Vertex4dv) (GLdouble *v, );
	void (*Vertex4f) (GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*Vertex4fv) (GLfloat *v, );
	void (*Vertex4hNV) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w, );
	void (*Vertex4hvNV) (GLhalfNV *v, );
	void (*Vertex4i) (GLint x, GLint y, GLint z, GLint w, );
	void (*Vertex4iv) (GLint *v, );
	void (*Vertex4s) (GLshort x, GLshort y, GLshort z, GLshort w, );
	void (*Vertex4sv) (GLshort *v, );
	void (*Vertex4xOES) (GLfixed x, GLfixed y, GLfixed z, );
	void (*Vertex4xvOES) (GLfixed *coords, );
	void (*VertexArrayAttribBinding) (GLuint vaobj, GLuint attribindex, GLuint bindingindex, );
	void (*VertexArrayAttribFormat) (GLuint vaobj, GLuint attribindex, GLint size, GL_VertexAttribType_t type, GLboolean normalized, GLuint relativeoffset, );
	void (*VertexArrayAttribIFormat) (GLuint vaobj, GLuint attribindex, GLint size, GL_VertexAttribIType_t type, GLuint relativeoffset, );
	void (*VertexArrayAttribLFormat) (GLuint vaobj, GLuint attribindex, GLint size, GL_VertexAttribLType_t type, GLuint relativeoffset, );
	void (*VertexArrayBindVertexBufferEXT) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, );
	void (*VertexArrayBindingDivisor) (GLuint vaobj, GLuint bindingindex, GLuint divisor, );
	void (*VertexArrayColorOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GL_ColorPointerType_t type, GLsizei stride, GLintptr offset, );
	void (*VertexArrayEdgeFlagOffsetEXT) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset, );
	void (*VertexArrayElementBuffer) (GLuint vaobj, GLuint buffer, );
	void (*VertexArrayFogCoordOffsetEXT) (GLuint vaobj, GLuint buffer, GL_FogCoordinatePointerType_t type, GLsizei stride, GLintptr offset, );
	void (*VertexArrayIndexOffsetEXT) (GLuint vaobj, GLuint buffer, GL_IndexPointerType_t type, GLsizei stride, GLintptr offset, );
	void (*VertexArrayMultiTexCoordOffsetEXT) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GL_TexCoordPointerType_t type, GLsizei stride, GLintptr offset, );
	void (*VertexArrayNormalOffsetEXT) (GLuint vaobj, GLuint buffer, GL_NormalPointerType_t type, GLsizei stride, GLintptr offset, );
	void (*VertexArrayParameteriAPPLE) (GL_VertexArrayPNameAPPLE_t pname, GLint param, );
	void (*VertexArrayRangeAPPLE) (GLsizei length, pointer, );
	void (*VertexArrayRangeNV) (GLsizei length, pointer, );
	void (*VertexArraySecondaryColorOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GL_ColorPointerType_t type, GLsizei stride, GLintptr offset, );
	void (*VertexArrayTexCoordOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GL_TexCoordPointerType_t type, GLsizei stride, GLintptr offset, );
	void (*VertexArrayVertexAttribBindingEXT) (GLuint vaobj, GLuint attribindex, GLuint bindingindex, );
	void (*VertexArrayVertexAttribDivisorEXT) (GLuint vaobj, GLuint index, GLuint divisor, );
	void (*VertexArrayVertexAttribFormatEXT) (GLuint vaobj, GLuint attribindex, GLint size, GL_VertexAttribType_t type, GLboolean normalized, GLuint relativeoffset, );
	void (*VertexArrayVertexAttribIFormatEXT) (GLuint vaobj, GLuint attribindex, GLint size, GL_VertexAttribIType_t type, GLuint relativeoffset, );
	void (*VertexArrayVertexAttribIOffsetEXT) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GL_VertexAttribType_t type, GLsizei stride, GLintptr offset, );
	void (*VertexArrayVertexAttribLFormatEXT) (GLuint vaobj, GLuint attribindex, GLint size, GL_VertexAttribLType_t type, GLuint relativeoffset, );
	void (*VertexArrayVertexAttribLOffsetEXT) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GL_VertexAttribLType_t type, GLsizei stride, GLintptr offset, );
	void (*VertexArrayVertexAttribOffsetEXT) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GL_VertexAttribPointerType_t type, GLboolean normalized, GLsizei stride, GLintptr offset, );
	void (*VertexArrayVertexBindingDivisorEXT) (GLuint vaobj, GLuint bindingindex, GLuint divisor, );
	void (*VertexArrayVertexBuffer) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, );
	void (*VertexArrayVertexBuffers) (GLuint vaobj, GLuint first, GLsizei count, GLuint *buffers, GLintptr *offsets, GLsizei *strides, );
	void (*VertexArrayVertexOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GL_VertexPointerType_t type, GLsizei stride, GLintptr offset, );
	void (*VertexAttrib1d) (GLuint index, GLdouble x, );
	void (*VertexAttrib1dARB) (GLuint index, GLdouble x, );
	void (*VertexAttrib1dNV) (GLuint index, GLdouble x, );
	void (*VertexAttrib1dv) (GLuint index, GLdouble *v, );
	void (*VertexAttrib1dvARB) (GLuint index, GLdouble *v, );
	void (*VertexAttrib1dvNV) (GLuint index, GLdouble *v, );
	void (*VertexAttrib1f) (GLuint index, GLfloat x, );
	void (*VertexAttrib1fARB) (GLuint index, GLfloat x, );
	void (*VertexAttrib1fNV) (GLuint index, GLfloat x, );
	void (*VertexAttrib1fv) (GLuint index, GLfloat *v, );
	void (*VertexAttrib1fvARB) (GLuint index, GLfloat *v, );
	void (*VertexAttrib1fvNV) (GLuint index, GLfloat *v, );
	void (*VertexAttrib1hNV) (GLuint index, GLhalfNV x, );
	void (*VertexAttrib1hvNV) (GLuint index, GLhalfNV *v, );
	void (*VertexAttrib1s) (GLuint index, GLshort x, );
	void (*VertexAttrib1sARB) (GLuint index, GLshort x, );
	void (*VertexAttrib1sNV) (GLuint index, GLshort x, );
	void (*VertexAttrib1sv) (GLuint index, GLshort *v, );
	void (*VertexAttrib1svARB) (GLuint index, GLshort *v, );
	void (*VertexAttrib1svNV) (GLuint index, GLshort *v, );
	void (*VertexAttrib2d) (GLuint index, GLdouble x, GLdouble y, );
	void (*VertexAttrib2dARB) (GLuint index, GLdouble x, GLdouble y, );
	void (*VertexAttrib2dNV) (GLuint index, GLdouble x, GLdouble y, );
	void (*VertexAttrib2dv) (GLuint index, GLdouble *v, );
	void (*VertexAttrib2dvARB) (GLuint index, GLdouble *v, );
	void (*VertexAttrib2dvNV) (GLuint index, GLdouble *v, );
	void (*VertexAttrib2f) (GLuint index, GLfloat x, GLfloat y, );
	void (*VertexAttrib2fARB) (GLuint index, GLfloat x, GLfloat y, );
	void (*VertexAttrib2fNV) (GLuint index, GLfloat x, GLfloat y, );
	void (*VertexAttrib2fv) (GLuint index, GLfloat *v, );
	void (*VertexAttrib2fvARB) (GLuint index, GLfloat *v, );
	void (*VertexAttrib2fvNV) (GLuint index, GLfloat *v, );
	void (*VertexAttrib2hNV) (GLuint index, GLhalfNV x, GLhalfNV y, );
	void (*VertexAttrib2hvNV) (GLuint index, GLhalfNV *v, );
	void (*VertexAttrib2s) (GLuint index, GLshort x, GLshort y, );
	void (*VertexAttrib2sARB) (GLuint index, GLshort x, GLshort y, );
	void (*VertexAttrib2sNV) (GLuint index, GLshort x, GLshort y, );
	void (*VertexAttrib2sv) (GLuint index, GLshort *v, );
	void (*VertexAttrib2svARB) (GLuint index, GLshort *v, );
	void (*VertexAttrib2svNV) (GLuint index, GLshort *v, );
	void (*VertexAttrib3d) (GLuint index, GLdouble x, GLdouble y, GLdouble z, );
	void (*VertexAttrib3dARB) (GLuint index, GLdouble x, GLdouble y, GLdouble z, );
	void (*VertexAttrib3dNV) (GLuint index, GLdouble x, GLdouble y, GLdouble z, );
	void (*VertexAttrib3dv) (GLuint index, GLdouble *v, );
	void (*VertexAttrib3dvARB) (GLuint index, GLdouble *v, );
	void (*VertexAttrib3dvNV) (GLuint index, GLdouble *v, );
	void (*VertexAttrib3f) (GLuint index, GLfloat x, GLfloat y, GLfloat z, );
	void (*VertexAttrib3fARB) (GLuint index, GLfloat x, GLfloat y, GLfloat z, );
	void (*VertexAttrib3fNV) (GLuint index, GLfloat x, GLfloat y, GLfloat z, );
	void (*VertexAttrib3fv) (GLuint index, GLfloat *v, );
	void (*VertexAttrib3fvARB) (GLuint index, GLfloat *v, );
	void (*VertexAttrib3fvNV) (GLuint index, GLfloat *v, );
	void (*VertexAttrib3hNV) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, );
	void (*VertexAttrib3hvNV) (GLuint index, GLhalfNV *v, );
	void (*VertexAttrib3s) (GLuint index, GLshort x, GLshort y, GLshort z, );
	void (*VertexAttrib3sARB) (GLuint index, GLshort x, GLshort y, GLshort z, );
	void (*VertexAttrib3sNV) (GLuint index, GLshort x, GLshort y, GLshort z, );
	void (*VertexAttrib3sv) (GLuint index, GLshort *v, );
	void (*VertexAttrib3svARB) (GLuint index, GLshort *v, );
	void (*VertexAttrib3svNV) (GLuint index, GLshort *v, );
	void (*VertexAttrib4Nbv) (GLuint index, GLbyte *v, );
	void (*VertexAttrib4NbvARB) (GLuint index, GLbyte *v, );
	void (*VertexAttrib4Niv) (GLuint index, GLint *v, );
	void (*VertexAttrib4NivARB) (GLuint index, GLint *v, );
	void (*VertexAttrib4Nsv) (GLuint index, GLshort *v, );
	void (*VertexAttrib4NsvARB) (GLuint index, GLshort *v, );
	void (*VertexAttrib4Nub) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, );
	void (*VertexAttrib4NubARB) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, );
	void (*VertexAttrib4Nubv) (GLuint index, GLubyte *v, );
	void (*VertexAttrib4NubvARB) (GLuint index, GLubyte *v, );
	void (*VertexAttrib4Nuiv) (GLuint index, GLuint *v, );
	void (*VertexAttrib4NuivARB) (GLuint index, GLuint *v, );
	void (*VertexAttrib4Nusv) (GLuint index, GLushort *v, );
	void (*VertexAttrib4NusvARB) (GLuint index, GLushort *v, );
	void (*VertexAttrib4bv) (GLuint index, GLbyte *v, );
	void (*VertexAttrib4bvARB) (GLuint index, GLbyte *v, );
	void (*VertexAttrib4d) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*VertexAttrib4dARB) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*VertexAttrib4dNV) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*VertexAttrib4dv) (GLuint index, GLdouble *v, );
	void (*VertexAttrib4dvARB) (GLuint index, GLdouble *v, );
	void (*VertexAttrib4dvNV) (GLuint index, GLdouble *v, );
	void (*VertexAttrib4f) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*VertexAttrib4fARB) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*VertexAttrib4fNV) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*VertexAttrib4fv) (GLuint index, GLfloat *v, );
	void (*VertexAttrib4fvARB) (GLuint index, GLfloat *v, );
	void (*VertexAttrib4fvNV) (GLuint index, GLfloat *v, );
	void (*VertexAttrib4hNV) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w, );
	void (*VertexAttrib4hvNV) (GLuint index, GLhalfNV *v, );
	void (*VertexAttrib4iv) (GLuint index, GLint *v, );
	void (*VertexAttrib4ivARB) (GLuint index, GLint *v, );
	void (*VertexAttrib4s) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, );
	void (*VertexAttrib4sARB) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, );
	void (*VertexAttrib4sNV) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, );
	void (*VertexAttrib4sv) (GLuint index, GLshort *v, );
	void (*VertexAttrib4svARB) (GLuint index, GLshort *v, );
	void (*VertexAttrib4svNV) (GLuint index, GLshort *v, );
	void (*VertexAttrib4ubNV) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, );
	void (*VertexAttrib4ubv) (GLuint index, GLubyte *v, );
	void (*VertexAttrib4ubvARB) (GLuint index, GLubyte *v, );
	void (*VertexAttrib4ubvNV) (GLuint index, GLubyte *v, );
	void (*VertexAttrib4uiv) (GLuint index, GLuint *v, );
	void (*VertexAttrib4uivARB) (GLuint index, GLuint *v, );
	void (*VertexAttrib4usv) (GLuint index, GLushort *v, );
	void (*VertexAttrib4usvARB) (GLuint index, GLushort *v, );
	void (*VertexAttribArrayObjectATI) (GLuint index, GLint size, GL_VertexAttribPointerType_t type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset, );
	void (*VertexAttribBinding) (GLuint attribindex, GLuint bindingindex, );
	void (*VertexAttribDivisor) (GLuint index, GLuint divisor, );
	void (*VertexAttribDivisorANGLE) (GLuint index, GLuint divisor, );
	void (*VertexAttribDivisorARB) (GLuint index, GLuint divisor, );
	void (*VertexAttribDivisorEXT) (GLuint index, GLuint divisor, );
	void (*VertexAttribDivisorNV) (GLuint index, GLuint divisor, );
	void (*VertexAttribFormat) (GLuint attribindex, GLint size, GL_VertexAttribType_t type, GLboolean normalized, GLuint relativeoffset, );
	void (*VertexAttribFormatNV) (GLuint index, GLint size, GL_VertexAttribType_t type, GLboolean normalized, GLsizei stride, );
	void (*VertexAttribI1i) (GLuint index, GLint x, );
	void (*VertexAttribI1iEXT) (GLuint index, GLint x, );
	void (*VertexAttribI1iv) (GLuint index, GLint *v, );
	void (*VertexAttribI1ivEXT) (GLuint index, GLint *v, );
	void (*VertexAttribI1ui) (GLuint index, GLuint x, );
	void (*VertexAttribI1uiEXT) (GLuint index, GLuint x, );
	void (*VertexAttribI1uiv) (GLuint index, GLuint *v, );
	void (*VertexAttribI1uivEXT) (GLuint index, GLuint *v, );
	void (*VertexAttribI2i) (GLuint index, GLint x, GLint y, );
	void (*VertexAttribI2iEXT) (GLuint index, GLint x, GLint y, );
	void (*VertexAttribI2iv) (GLuint index, GLint *v, );
	void (*VertexAttribI2ivEXT) (GLuint index, GLint *v, );
	void (*VertexAttribI2ui) (GLuint index, GLuint x, GLuint y, );
	void (*VertexAttribI2uiEXT) (GLuint index, GLuint x, GLuint y, );
	void (*VertexAttribI2uiv) (GLuint index, GLuint *v, );
	void (*VertexAttribI2uivEXT) (GLuint index, GLuint *v, );
	void (*VertexAttribI3i) (GLuint index, GLint x, GLint y, GLint z, );
	void (*VertexAttribI3iEXT) (GLuint index, GLint x, GLint y, GLint z, );
	void (*VertexAttribI3iv) (GLuint index, GLint *v, );
	void (*VertexAttribI3ivEXT) (GLuint index, GLint *v, );
	void (*VertexAttribI3ui) (GLuint index, GLuint x, GLuint y, GLuint z, );
	void (*VertexAttribI3uiEXT) (GLuint index, GLuint x, GLuint y, GLuint z, );
	void (*VertexAttribI3uiv) (GLuint index, GLuint *v, );
	void (*VertexAttribI3uivEXT) (GLuint index, GLuint *v, );
	void (*VertexAttribI4bv) (GLuint index, GLbyte *v, );
	void (*VertexAttribI4bvEXT) (GLuint index, GLbyte *v, );
	void (*VertexAttribI4i) (GLuint index, GLint x, GLint y, GLint z, GLint w, );
	void (*VertexAttribI4iEXT) (GLuint index, GLint x, GLint y, GLint z, GLint w, );
	void (*VertexAttribI4iv) (GLuint index, GLint *v, );
	void (*VertexAttribI4ivEXT) (GLuint index, GLint *v, );
	void (*VertexAttribI4sv) (GLuint index, GLshort *v, );
	void (*VertexAttribI4svEXT) (GLuint index, GLshort *v, );
	void (*VertexAttribI4ubv) (GLuint index, GLubyte *v, );
	void (*VertexAttribI4ubvEXT) (GLuint index, GLubyte *v, );
	void (*VertexAttribI4ui) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, );
	void (*VertexAttribI4uiEXT) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, );
	void (*VertexAttribI4uiv) (GLuint index, GLuint *v, );
	void (*VertexAttribI4uivEXT) (GLuint index, GLuint *v, );
	void (*VertexAttribI4usv) (GLuint index, GLushort *v, );
	void (*VertexAttribI4usvEXT) (GLuint index, GLushort *v, );
	void (*VertexAttribIFormat) (GLuint attribindex, GLint size, GL_VertexAttribIType_t type, GLuint relativeoffset, );
	void (*VertexAttribIFormatNV) (GLuint index, GLint size, GL_VertexAttribIType_t type, GLsizei stride, );
	void (*VertexAttribIPointer) (GLuint index, GLint size, GL_VertexAttribIType_t type, GLsizei stride, pointer, );
	void (*VertexAttribIPointerEXT) (GLuint index, GLint size, GL_VertexAttribIType_t type, GLsizei stride, pointer, );
	void (*VertexAttribL1d) (GLuint index, GLdouble x, );
	void (*VertexAttribL1dEXT) (GLuint index, GLdouble x, );
	void (*VertexAttribL1dv) (GLuint index, GLdouble *v, );
	void (*VertexAttribL1dvEXT) (GLuint index, GLdouble *v, );
	void (*VertexAttribL1i64NV) (GLuint index, GLint64EXT x, );
	void (*VertexAttribL1i64vNV) (GLuint index, GLint64EXT *v, );
	void (*VertexAttribL1ui64ARB) (GLuint index, GLuint64EXT x, );
	void (*VertexAttribL1ui64NV) (GLuint index, GLuint64EXT x, );
	void (*VertexAttribL1ui64vARB) (GLuint index, GLuint64EXT *v, );
	void (*VertexAttribL1ui64vNV) (GLuint index, GLuint64EXT *v, );
	void (*VertexAttribL2d) (GLuint index, GLdouble x, GLdouble y, );
	void (*VertexAttribL2dEXT) (GLuint index, GLdouble x, GLdouble y, );
	void (*VertexAttribL2dv) (GLuint index, GLdouble *v, );
	void (*VertexAttribL2dvEXT) (GLuint index, GLdouble *v, );
	void (*VertexAttribL2i64NV) (GLuint index, GLint64EXT x, GLint64EXT y, );
	void (*VertexAttribL2i64vNV) (GLuint index, GLint64EXT *v, );
	void (*VertexAttribL2ui64NV) (GLuint index, GLuint64EXT x, GLuint64EXT y, );
	void (*VertexAttribL2ui64vNV) (GLuint index, GLuint64EXT *v, );
	void (*VertexAttribL3d) (GLuint index, GLdouble x, GLdouble y, GLdouble z, );
	void (*VertexAttribL3dEXT) (GLuint index, GLdouble x, GLdouble y, GLdouble z, );
	void (*VertexAttribL3dv) (GLuint index, GLdouble *v, );
	void (*VertexAttribL3dvEXT) (GLuint index, GLdouble *v, );
	void (*VertexAttribL3i64NV) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, );
	void (*VertexAttribL3i64vNV) (GLuint index, GLint64EXT *v, );
	void (*VertexAttribL3ui64NV) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, );
	void (*VertexAttribL3ui64vNV) (GLuint index, GLuint64EXT *v, );
	void (*VertexAttribL4d) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*VertexAttribL4dEXT) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*VertexAttribL4dv) (GLuint index, GLdouble *v, );
	void (*VertexAttribL4dvEXT) (GLuint index, GLdouble *v, );
	void (*VertexAttribL4i64NV) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, );
	void (*VertexAttribL4i64vNV) (GLuint index, GLint64EXT *v, );
	void (*VertexAttribL4ui64NV) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, );
	void (*VertexAttribL4ui64vNV) (GLuint index, GLuint64EXT *v, );
	void (*VertexAttribLFormat) (GLuint attribindex, GLint size, GL_VertexAttribLType_t type, GLuint relativeoffset, );
	void (*VertexAttribLFormatNV) (GLuint index, GLint size, GL_VertexAttribLType_t type, GLsizei stride, );
	void (*VertexAttribLPointer) (GLuint index, GLint size, GL_VertexAttribLType_t type, GLsizei stride, pointer, );
	void (*VertexAttribLPointerEXT) (GLuint index, GLint size, GL_VertexAttribLType_t type, GLsizei stride, pointer, );
	void (*VertexAttribP1ui) (GLuint index, GL_VertexAttribPointerType_t type, GLboolean normalized, GLuint value, );
	void (*VertexAttribP1uiv) (GLuint index, GL_VertexAttribPointerType_t type, GLboolean normalized, GLuint *value, );
	void (*VertexAttribP2ui) (GLuint index, GL_VertexAttribPointerType_t type, GLboolean normalized, GLuint value, );
	void (*VertexAttribP2uiv) (GLuint index, GL_VertexAttribPointerType_t type, GLboolean normalized, GLuint *value, );
	void (*VertexAttribP3ui) (GLuint index, GL_VertexAttribPointerType_t type, GLboolean normalized, GLuint value, );
	void (*VertexAttribP3uiv) (GLuint index, GL_VertexAttribPointerType_t type, GLboolean normalized, GLuint *value, );
	void (*VertexAttribP4ui) (GLuint index, GL_VertexAttribPointerType_t type, GLboolean normalized, GLuint value, );
	void (*VertexAttribP4uiv) (GLuint index, GL_VertexAttribPointerType_t type, GLboolean normalized, GLuint *value, );
	void (*VertexAttribParameteriAMD) (GLuint index, GLenum pname, GLint param, );
	void (*VertexAttribPointer) (GLuint index, GLint size, GL_VertexAttribPointerType_t type, GLboolean normalized, GLsizei stride, pointer, );
	void (*VertexAttribPointerARB) (GLuint index, GLint size, GL_VertexAttribPointerType_t type, GLboolean normalized, GLsizei stride, pointer, );
	void (*VertexAttribPointerNV) (GLuint index, GLint fsize, GL_VertexAttribEnumNV_t type, GLsizei stride, pointer, );
	void (*VertexAttribs1dvNV) (GLuint index, GLsizei count, GLdouble *v, );
	void (*VertexAttribs1fvNV) (GLuint index, GLsizei count, GLfloat *v, );
	void (*VertexAttribs1hvNV) (GLuint index, GLsizei n, GLhalfNV *v, );
	void (*VertexAttribs1svNV) (GLuint index, GLsizei count, GLshort *v, );
	void (*VertexAttribs2dvNV) (GLuint index, GLsizei count, GLdouble *v, );
	void (*VertexAttribs2fvNV) (GLuint index, GLsizei count, GLfloat *v, );
	void (*VertexAttribs2hvNV) (GLuint index, GLsizei n, GLhalfNV *v, );
	void (*VertexAttribs2svNV) (GLuint index, GLsizei count, GLshort *v, );
	void (*VertexAttribs3dvNV) (GLuint index, GLsizei count, GLdouble *v, );
	void (*VertexAttribs3fvNV) (GLuint index, GLsizei count, GLfloat *v, );
	void (*VertexAttribs3hvNV) (GLuint index, GLsizei n, GLhalfNV *v, );
	void (*VertexAttribs3svNV) (GLuint index, GLsizei count, GLshort *v, );
	void (*VertexAttribs4dvNV) (GLuint index, GLsizei count, GLdouble *v, );
	void (*VertexAttribs4fvNV) (GLuint index, GLsizei count, GLfloat *v, );
	void (*VertexAttribs4hvNV) (GLuint index, GLsizei n, GLhalfNV *v, );
	void (*VertexAttribs4svNV) (GLuint index, GLsizei count, GLshort *v, );
	void (*VertexAttribs4ubvNV) (GLuint index, GLsizei count, GLubyte *v, );
	void (*VertexBindingDivisor) (GLuint bindingindex, GLuint divisor, );
	void (*VertexBlendARB) (GLint count, );
	void (*VertexBlendEnvfATI) (GL_VertexStreamATI_t pname, GLfloat param, );
	void (*VertexBlendEnviATI) (GL_VertexStreamATI_t pname, GLint param, );
	void (*VertexFormatNV) (GLint size, GL_VertexPointerType_t type, GLsizei stride, );
	void (*VertexP2ui) (GL_VertexPointerType_t type, GLuint value, );
	void (*VertexP2uiv) (GL_VertexPointerType_t type, GLuint *value, );
	void (*VertexP3ui) (GL_VertexPointerType_t type, GLuint value, );
	void (*VertexP3uiv) (GL_VertexPointerType_t type, GLuint *value, );
	void (*VertexP4ui) (GL_VertexPointerType_t type, GLuint value, );
	void (*VertexP4uiv) (GL_VertexPointerType_t type, GLuint *value, );
	void (*VertexPointer) (GLint size, GL_VertexPointerType_t type, GLsizei stride, pointer, );
	void (*VertexPointerEXT) (GLint size, GL_VertexPointerType_t type, GLsizei stride, GLsizei count, pointer, );
	void (*VertexPointerListIBM) (GLint size, GL_VertexPointerType_t type, GLint stride, pointer, GLint ptrstride, );
	void (*VertexPointervINTEL) (GLint size, GL_VertexPointerType_t type, pointer, );
	void (*VertexStream1dATI) (GL_VertexStreamATI_t stream, GLdouble x, );
	void (*VertexStream1dvATI) (GL_VertexStreamATI_t stream, GLdouble *coords, );
	void (*VertexStream1fATI) (GL_VertexStreamATI_t stream, GLfloat x, );
	void (*VertexStream1fvATI) (GL_VertexStreamATI_t stream, GLfloat *coords, );
	void (*VertexStream1iATI) (GL_VertexStreamATI_t stream, GLint x, );
	void (*VertexStream1ivATI) (GL_VertexStreamATI_t stream, GLint *coords, );
	void (*VertexStream1sATI) (GL_VertexStreamATI_t stream, GLshort x, );
	void (*VertexStream1svATI) (GL_VertexStreamATI_t stream, GLshort *coords, );
	void (*VertexStream2dATI) (GL_VertexStreamATI_t stream, GLdouble x, GLdouble y, );
	void (*VertexStream2dvATI) (GL_VertexStreamATI_t stream, GLdouble *coords, );
	void (*VertexStream2fATI) (GL_VertexStreamATI_t stream, GLfloat x, GLfloat y, );
	void (*VertexStream2fvATI) (GL_VertexStreamATI_t stream, GLfloat *coords, );
	void (*VertexStream2iATI) (GL_VertexStreamATI_t stream, GLint x, GLint y, );
	void (*VertexStream2ivATI) (GL_VertexStreamATI_t stream, GLint *coords, );
	void (*VertexStream2sATI) (GL_VertexStreamATI_t stream, GLshort x, GLshort y, );
	void (*VertexStream2svATI) (GL_VertexStreamATI_t stream, GLshort *coords, );
	void (*VertexStream3dATI) (GL_VertexStreamATI_t stream, GLdouble x, GLdouble y, GLdouble z, );
	void (*VertexStream3dvATI) (GL_VertexStreamATI_t stream, GLdouble *coords, );
	void (*VertexStream3fATI) (GL_VertexStreamATI_t stream, GLfloat x, GLfloat y, GLfloat z, );
	void (*VertexStream3fvATI) (GL_VertexStreamATI_t stream, GLfloat *coords, );
	void (*VertexStream3iATI) (GL_VertexStreamATI_t stream, GLint x, GLint y, GLint z, );
	void (*VertexStream3ivATI) (GL_VertexStreamATI_t stream, GLint *coords, );
	void (*VertexStream3sATI) (GL_VertexStreamATI_t stream, GLshort x, GLshort y, GLshort z, );
	void (*VertexStream3svATI) (GL_VertexStreamATI_t stream, GLshort *coords, );
	void (*VertexStream4dATI) (GL_VertexStreamATI_t stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*VertexStream4dvATI) (GL_VertexStreamATI_t stream, GLdouble *coords, );
	void (*VertexStream4fATI) (GL_VertexStreamATI_t stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*VertexStream4fvATI) (GL_VertexStreamATI_t stream, GLfloat *coords, );
	void (*VertexStream4iATI) (GL_VertexStreamATI_t stream, GLint x, GLint y, GLint z, GLint w, );
	void (*VertexStream4ivATI) (GL_VertexStreamATI_t stream, GLint *coords, );
	void (*VertexStream4sATI) (GL_VertexStreamATI_t stream, GLshort x, GLshort y, GLshort z, GLshort w, );
	void (*VertexStream4svATI) (GL_VertexStreamATI_t stream, GLshort *coords, );
	void (*VertexWeightPointerEXT) (GLint size, GL_VertexWeightPointerTypeEXT_t type, GLsizei stride, pointer, );
	void (*VertexWeightfEXT) (GLfloat weight, );
	void (*VertexWeightfvEXT) (GLfloat *weight, );
	void (*VertexWeighthNV) (GLhalfNV weight, );
	void (*VertexWeighthvNV) (GLhalfNV *weight, );
	GLenum (*VideoCaptureNV) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time, );
	void (*VideoCaptureStreamParameterdvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params, );
	void (*VideoCaptureStreamParameterfvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params, );
	void (*VideoCaptureStreamParameterivNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params, );
	void (*Viewport) (GLint x, GLint y, GLsizei width, GLsizei height, );
	void (*ViewportArrayv) (GLuint first, GLsizei count, GLfloat *v, );
	void (*ViewportArrayvNV) (GLuint first, GLsizei count, GLfloat *v, );
	void (*ViewportArrayvOES) (GLuint first, GLsizei count, GLfloat *v, );
	void (*ViewportIndexedf) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, );
	void (*ViewportIndexedfOES) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, );
	void (*ViewportIndexedfNV) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, );
	void (*ViewportIndexedfv) (GLuint index, GLfloat *v, );
	void (*ViewportIndexedfvOES) (GLuint index, GLfloat *v, );
	void (*ViewportIndexedfvNV) (GLuint index, GLfloat *v, );
	void (*ViewportPositionWScaleNV) (GLuint index, GLfloat xcoeff, GLfloat ycoeff, );
	void (*ViewportSwizzleNV) (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew, );
	void (*WaitSemaphoreEXT) (GLuint semaphore, GLuint numBufferBarriers, GLuint *buffers, GLuint numTextureBarriers, GLuint *textures, GL_TextureLayout_t *srcLayouts, );
	void (*WaitSemaphoreui64NVX) (GLuint waitGpu, GLsizei fenceObjectCount, GLuint *semaphoreArray, GLuint64 *fenceValueArray, );
	void (*WaitSync) (GLsync sync, GLbitfield flags, GLuint64 timeout, );
	void (*WaitSyncAPPLE) (GLsync sync, GLbitfield flags, GLuint64 timeout, );
	void (*WeightPathsNV) (GLuint resultPath, GLsizei numPaths, GLuint *paths, GLfloat *weights, );
	void (*WeightPointerARB) (GLint size, GL_WeightPointerTypeARB_t type, GLsizei stride, pointer, );
	void (*WeightPointerOES) (GLint size, GLenum type, GLsizei stride, pointer, );
	void (*WeightbvARB) (GLint size, GLbyte *weights, );
	void (*WeightdvARB) (GLint size, GLdouble *weights, );
	void (*WeightfvARB) (GLint size, GLfloat *weights, );
	void (*WeightivARB) (GLint size, GLint *weights, );
	void (*WeightsvARB) (GLint size, GLshort *weights, );
	void (*WeightubvARB) (GLint size, GLubyte *weights, );
	void (*WeightuivARB) (GLint size, GLuint *weights, );
	void (*WeightusvARB) (GLint size, GLushort *weights, );
	void (*WindowPos2d) (GLdouble x, GLdouble y, );
	void (*WindowPos2dARB) (GLdouble x, GLdouble y, );
	void (*WindowPos2dMESA) (GLdouble x, GLdouble y, );
	void (*WindowPos2dv) (GLdouble *v, );
	void (*WindowPos2dvARB) (GLdouble *v, );
	void (*WindowPos2dvMESA) (GLdouble *v, );
	void (*WindowPos2f) (GLfloat x, GLfloat y, );
	void (*WindowPos2fARB) (GLfloat x, GLfloat y, );
	void (*WindowPos2fMESA) (GLfloat x, GLfloat y, );
	void (*WindowPos2fv) (GLfloat *v, );
	void (*WindowPos2fvARB) (GLfloat *v, );
	void (*WindowPos2fvMESA) (GLfloat *v, );
	void (*WindowPos2i) (GLint x, GLint y, );
	void (*WindowPos2iARB) (GLint x, GLint y, );
	void (*WindowPos2iMESA) (GLint x, GLint y, );
	void (*WindowPos2iv) (GLint *v, );
	void (*WindowPos2ivARB) (GLint *v, );
	void (*WindowPos2ivMESA) (GLint *v, );
	void (*WindowPos2s) (GLshort x, GLshort y, );
	void (*WindowPos2sARB) (GLshort x, GLshort y, );
	void (*WindowPos2sMESA) (GLshort x, GLshort y, );
	void (*WindowPos2sv) (GLshort *v, );
	void (*WindowPos2svARB) (GLshort *v, );
	void (*WindowPos2svMESA) (GLshort *v, );
	void (*WindowPos3d) (GLdouble x, GLdouble y, GLdouble z, );
	void (*WindowPos3dARB) (GLdouble x, GLdouble y, GLdouble z, );
	void (*WindowPos3dMESA) (GLdouble x, GLdouble y, GLdouble z, );
	void (*WindowPos3dv) (GLdouble *v, );
	void (*WindowPos3dvARB) (GLdouble *v, );
	void (*WindowPos3dvMESA) (GLdouble *v, );
	void (*WindowPos3f) (GLfloat x, GLfloat y, GLfloat z, );
	void (*WindowPos3fARB) (GLfloat x, GLfloat y, GLfloat z, );
	void (*WindowPos3fMESA) (GLfloat x, GLfloat y, GLfloat z, );
	void (*WindowPos3fv) (GLfloat *v, );
	void (*WindowPos3fvARB) (GLfloat *v, );
	void (*WindowPos3fvMESA) (GLfloat *v, );
	void (*WindowPos3i) (GLint x, GLint y, GLint z, );
	void (*WindowPos3iARB) (GLint x, GLint y, GLint z, );
	void (*WindowPos3iMESA) (GLint x, GLint y, GLint z, );
	void (*WindowPos3iv) (GLint *v, );
	void (*WindowPos3ivARB) (GLint *v, );
	void (*WindowPos3ivMESA) (GLint *v, );
	void (*WindowPos3s) (GLshort x, GLshort y, GLshort z, );
	void (*WindowPos3sARB) (GLshort x, GLshort y, GLshort z, );
	void (*WindowPos3sMESA) (GLshort x, GLshort y, GLshort z, );
	void (*WindowPos3sv) (GLshort *v, );
	void (*WindowPos3svARB) (GLshort *v, );
	void (*WindowPos3svMESA) (GLshort *v, );
	void (*WindowPos4dMESA) (GLdouble x, GLdouble y, GLdouble z, GLdouble w, );
	void (*WindowPos4dvMESA) (GLdouble *v, );
	void (*WindowPos4fMESA) (GLfloat x, GLfloat y, GLfloat z, GLfloat w, );
	void (*WindowPos4fvMESA) (GLfloat *v, );
	void (*WindowPos4iMESA) (GLint x, GLint y, GLint z, GLint w, );
	void (*WindowPos4ivMESA) (GLint *v, );
	void (*WindowPos4sMESA) (GLshort x, GLshort y, GLshort z, GLshort w, );
	void (*WindowPos4svMESA) (GLshort *v, );
	void (*WindowRectanglesEXT) (GLenum mode, GLsizei count, GLint *box, );
	void (*WriteMaskEXT) (GLuint res, GLuint in, GL_VertexShaderWriteMaskEXT_t outX, GL_VertexShaderWriteMaskEXT_t outY, GL_VertexShaderWriteMaskEXT_t outZ, GL_VertexShaderWriteMaskEXT_t outW, );
	void (*DrawVkImageNV) (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1, );
	GLVULKANPROCNV (*GetVkProcAddrNV) (GLchar *name, );
	void (*WaitVkSemaphoreNV) (GLuint64 vkSemaphore, );
	void (*SignalVkSemaphoreNV) (GLuint64 vkSemaphore, );
	void (*SignalVkFenceNV) (GLuint64 vkFence, );
	void (*FramebufferParameteriMESA) (GL_FramebufferTarget_t target, GL_FramebufferParameterName_t pname, GLint param, );
	void (*GetFramebufferParameterivMESA) (GL_FramebufferTarget_t target, GL_FramebufferAttachmentParameterName_t pname, GLint *params, );
} gl_funcs_t;

#endif
